{"ast":null,"code":"import * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n  constructor(/** The MatButtonToggle that emits the event. */\n  source, /** The value assigned to the MatButtonToggle. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n  constructor(_changeDetector, defaultOptions) {\n    this._changeDetector = _changeDetector;\n    this._vertical = false;\n    this._multiple = false;\n    this._disabled = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    this._controlValueAccessorChangeFn = () => {};\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    this._onTouched = () => {};\n    this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    /** Event emitted when the group's value changes. */\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /** `name` attribute for the underlying `input` element. */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n    this._name = value;\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  /** Whether the toggle group is vertical. */\n  get vertical() {\n    return this._vertical;\n  }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  /** Value of the toggle group. */\n  get value() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : selected[0] || null;\n  }\n  /** Whether multiple button toggles can be selected. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /** Whether multiple button toggle group is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n  }\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent() {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      this.selected.checked = false;\n    }\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve().then(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n    return toggle.value === this._rawValue;\n  }\n  /** Updates the selection state of the toggles in the group based on a value. */\n  _setSelectionByValue(value) {\n    this._rawValue = value;\n    if (!this._buttonToggles) {\n      return;\n    }\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n      this._clearSelection();\n      value.forEach(currentValue => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n  /** Clears the selected toggles. */\n  _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n  /** Selects a value if there's a toggle that corresponds to it. */\n  _selectValue(value) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n  /** Syncs up the group's value with the model and emits the change event. */\n  _updateModelValue(isUserInput) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n  return new (t || MatButtonToggleGroup)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\nMatButtonToggleGroup.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatButtonToggleGroup,\n  selectors: [[\"mat-button-toggle-group\"]],\n  contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n  hostVars: 5,\n  hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n      i0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    appearance: \"appearance\",\n    name: \"name\",\n    vertical: \"vertical\",\n    value: \"value\",\n    multiple: \"multiple\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggleGroup\"],\n  features: [i0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n    provide: MAT_BUTTON_TOGGLE_GROUP,\n    useExisting: MatButtonToggleGroup\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-button-toggle-group',\n      providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n        provide: MAT_BUTTON_TOGGLE_GROUP,\n        useExisting: MatButtonToggleGroup\n      }],\n      host: {\n        'role': 'group',\n        'class': 'mat-button-toggle-group',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.mat-button-toggle-vertical]': 'vertical',\n        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n      },\n      exportAs: 'matButtonToggleGroup'\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    _buttonToggles: [{\n      type: ContentChildren,\n      args: [forwardRef(() => MatButtonToggle), {\n        // Note that this would technically pick up toggles\n        // from nested groups, but that's not a case that we support.\n        descendants: true\n      }]\n    }],\n    appearance: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }]\n  });\n})();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n  constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._isSingleSelector = false;\n    this._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    this.ariaLabelledby = null;\n    this._disabled = false;\n    /** Event emitted when the group value changes. */\n    this.change = new EventEmitter();\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /** Unique ID for the underlying `button` element. */\n  get buttonId() {\n    return `${this.id}-button`;\n  }\n  /** The appearance style of the button. */\n  get appearance() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value) {\n    this._appearance = value;\n  }\n  /** Whether the button is checked. */\n  get checked() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Whether the button is disabled. */\n  get disabled() {\n    return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  ngOnInit() {\n    const group = this.buttonToggleGroup;\n    this._isSingleSelector = group && !group.multiple;\n    this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n    if (this._isSingleSelector) {\n      this.name = group.name;\n    }\n    if (group) {\n      if (group._isPrechecked(this)) {\n        this.checked = true;\n      } else if (group._isSelected(this) !== this._checked) {\n        // As as side effect of the circular dependency between the toggle group and the button,\n        // we may end up in a state where the button is supposed to be checked on init, but it\n        // isn't, because the checked value was assigned too early. This can happen when Ivy\n        // assigns the static input value before the `ngOnInit` has run.\n        group._syncButtonToggle(this, this._checked);\n      }\n    }\n  }\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n  /** Focuses the button. */\n  focus(options) {\n    this._buttonElement.nativeElement.focus(options);\n  }\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n  return new (t || MatButtonToggle)(i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\nMatButtonToggle.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatButtonToggle,\n  selectors: [[\"mat-button-toggle\"]],\n  viewQuery: function MatButtonToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() {\n        return ctx.focus();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n      i0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    id: \"id\",\n    name: \"name\",\n    value: \"value\",\n    tabIndex: \"tabIndex\",\n    appearance: \"appearance\",\n    checked: \"checked\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggle\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 9,\n  consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n  template: function MatButtonToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"button\", 0, 1);\n      i0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n        return ctx._onButtonClick();\n      });\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵprojection(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"span\", 3);\n      i0.ɵɵelement(5, \"span\", 4);\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    }\n  },\n  directives: [i2.MatRipple],\n  styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .cdk-high-contrast-active .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-button-toggle',\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matButtonToggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disableRipple'],\n      host: {\n        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mat-button-toggle-checked]': 'checked',\n        '[class.mat-button-toggle-disabled]': 'disabled',\n        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n        'class': 'mat-button-toggle',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.id]': 'id',\n        '[attr.name]': 'null',\n        '(focus)': 'focus()',\n        'role': 'presentation'\n      },\n      template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n      styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .cdk-high-contrast-active .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatButtonToggleGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_GROUP]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    _buttonElement: [{\n      type: ViewChild,\n      args: ['button']\n    }],\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) {\n  return new (t || MatButtonToggleModule)();\n};\nMatButtonToggleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatButtonToggleModule\n});\nMatButtonToggleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[MatCommonModule, MatRippleModule], MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule],\n      exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n      declarations: [MatButtonToggleGroup, MatButtonToggle]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };","map":{"version":3,"names":["i1","coerceBooleanProperty","SelectionModel","i0","InjectionToken","forwardRef","EventEmitter","Directive","Optional","Inject","ContentChildren","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","ViewChild","NgModule","NG_VALUE_ACCESSOR","i2","mixinDisableRipple","MatCommonModule","MatRippleModule","_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","constructor","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","name","_buttonToggles","forEach","toggle","_markForCheck","vertical","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","disabled","ngOnInit","ngAfterContentInit","select","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","Array","isArray","length","event","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","ngDevMode","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","ɵfac","MatButtonToggleGroup_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatButtonToggle","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","ɵɵattribute","ɵɵclassProp","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ɵsetClassMetadata","args","selector","providers","host","decorators","descendants","_MatButtonToggleBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","buttonId","id","_appearance","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","MatButtonToggle_Factory","ElementRef","FocusMonitor","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","viewQuery","MatButtonToggle_Query","ɵɵviewQuery","first","MatButtonToggle_HostBindings","ɵɵlistener","MatButtonToggle_focus_HostBindingHandler","disableRipple","ariaLabel","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","ɵɵprojectionDef","ɵɵelementStart","MatButtonToggle_Template_button_click_0_listener","ɵɵprojection","ɵɵelementEnd","ɵɵelement","_r0","ɵɵreference","ɵɵproperty","ɵɵadvance","directives","MatRipple","styles","encapsulation","changeDetection","None","OnPush","MatButtonToggleModule","MatButtonToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["D:/MY FILES/Projects/angular-13/node_modules/@angular/material/fesm2020/button-toggle.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true,\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() {\n        return this._vertical;\n    }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => (toggle.checked = false));\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonToggleGroup, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatButtonToggleGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatButtonToggleGroup, selector: \"mat-button-toggle-group\", inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"attr.aria-disabled\": \"disabled\", \"class.mat-button-toggle-vertical\": \"vertical\", \"class.mat-button-toggle-group-appearance-standard\": \"appearance === \\\"standard\\\"\" }, classAttribute: \"mat-button-toggle-group\" }, providers: [\n        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n    ], queries: [{ propertyName: \"_buttonToggles\", predicate: i0.forwardRef(function () { return MatButtonToggle; }), descendants: true }], exportAs: [\"matButtonToggleGroup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonToggleGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-button-toggle-group',\n                    providers: [\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                    ],\n                    host: {\n                        'role': 'group',\n                        'class': 'mat-button-toggle-group',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[class.mat-button-toggle-vertical]': 'vertical',\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                    },\n                    exportAs: 'matButtonToggleGroup',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { _buttonToggles: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatButtonToggle), {\n                        // Note that this would technically pick up toggles\n                        // from nested groups, but that's not a case that we support.\n                        descendants: true,\n                    }]\n            }], appearance: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], multiple: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() {\n        return `${this.id}-button`;\n    }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonToggle, deps: [{ token: MAT_BUTTON_TOGGLE_GROUP, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: 'tabindex', attribute: true }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatButtonToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatButtonToggle, selector: \"mat-button-toggle\", inputs: { disableRipple: \"disableRipple\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", name: \"name\", value: \"value\", tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\" }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"presentation\" }, listeners: { \"focus\": \"focus()\" }, properties: { \"class.mat-button-toggle-standalone\": \"!buttonToggleGroup\", \"class.mat-button-toggle-checked\": \"checked\", \"class.mat-button-toggle-disabled\": \"disabled\", \"class.mat-button-toggle-appearance-standard\": \"appearance === \\\"standard\\\"\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.id\": \"id\", \"attr.name\": \"null\" }, classAttribute: \"mat-button-toggle\" }, viewQueries: [{ propertyName: \"_buttonElement\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matButtonToggle\"], usesInheritance: true, ngImport: i0, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .cdk-high-contrast-active .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-button-toggle', encapsulation: ViewEncapsulation.None, exportAs: 'matButtonToggle', changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disableRipple'], host: {\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                        '[class.mat-button-toggle-checked]': 'checked',\n                        '[class.mat-button-toggle-disabled]': 'disabled',\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                        'class': 'mat-button-toggle',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.id]': 'id',\n                        '[attr.name]': 'null',\n                        '(focus)': 'focus()',\n                        'role': 'presentation',\n                    }, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .cdk-high-contrast-active .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_GROUP]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], _buttonElement: [{\n                type: ViewChild,\n                args: ['button']\n            }], id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatButtonToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonToggleModule, declarations: [MatButtonToggleGroup, MatButtonToggle], imports: [MatCommonModule, MatRippleModule], exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle] });\nMatButtonToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonToggleModule, imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatButtonToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule],\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}