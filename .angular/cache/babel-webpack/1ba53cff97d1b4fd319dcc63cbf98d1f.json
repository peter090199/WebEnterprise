{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n  constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    this._renderer = _renderer;\n    this._animationMode = _animationMode;\n    this._color = 'primary';\n    this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    this.position = 'above after';\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    this.size = 'medium';\n    /** Unique id for the badge */\n    this._id = nextId++;\n    /** Whether the OnInit lifecycle hook has run yet */\n    this._isInitialized = false;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const nativeElement = _elementRef.nativeElement;\n      if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n        throw Error('matBadge must be attached to an element node.');\n      }\n    }\n  }\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  get color() {\n    return this._color;\n  }\n  set color(value) {\n    this._setColor(value);\n    this._color = value;\n  }\n  /** Whether the badge should overlap its contents or not */\n  get overlap() {\n    return this._overlap;\n  }\n  set overlap(val) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  /** The content for the badge */\n  get content() {\n    return this._content;\n  }\n  set content(newContent) {\n    this._updateRenderedContent(newContent);\n  }\n  /** Message used to describe the decorated element via aria-describedby */\n  get description() {\n    return this._description;\n  }\n  set description(newDescription) {\n    this._updateHostAriaDescription(newDescription);\n  }\n  /** Whether the badge is hidden. */\n  get hidden() {\n    return this._hidden;\n  }\n  set hidden(val) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  /** Whether the badge is above the host or not */\n  isAbove() {\n    return this.position.indexOf('below') === -1;\n  }\n  /** Whether the badge is after the host or not */\n  isAfter() {\n    return this.position.indexOf('before') === -1;\n  }\n  /**\n   * Gets the element into which the badge's content is being rendered. Undefined if the element\n   * hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement() {\n    return this._badgeElement;\n  }\n  ngOnInit() {\n    // We may have server-side rendered badge that we need to clear.\n    // We need to do this in ngOnInit because the full content of the component\n    // on which the badge is attached won't necessarily be in the DOM until this point.\n    this._clearExistingBadges();\n    if (this.content && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n      this._updateRenderedContent(this.content);\n    }\n    this._isInitialized = true;\n  }\n  ngOnDestroy() {\n    // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n    // We have to destroy it ourselves, otherwise it'll be retained in memory.\n    if (this._renderer.destroyNode) {\n      this._renderer.destroyNode(this._badgeElement);\n    }\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n  }\n  /** Creates the badge element */\n  _createBadgeElement() {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    // The badge is aria-hidden because we don't want it to appear in the page's navigation\n    // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n    badgeElement.setAttribute('aria-hidden', 'true');\n    badgeElement.classList.add(BADGE_CONTENT_CLASS);\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n    this._elementRef.nativeElement.appendChild(badgeElement);\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n    return badgeElement;\n  }\n  /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n  _updateRenderedContent(newContent) {\n    const newContentNormalized = `${newContent ?? ''}`.trim();\n    // Don't create the badge element if the directive isn't initialized because we want to\n    // append the badge element to the *end* of the host element's content for backwards\n    // compatibility.\n    if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    }\n    if (this._badgeElement) {\n      this._badgeElement.textContent = newContentNormalized;\n    }\n    this._content = newContentNormalized;\n  }\n  /** Updates the host element's aria description via AriaDescriber. */\n  _updateHostAriaDescription(newDescription) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    if (newDescription) {\n      this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n    }\n    this._description = newDescription;\n  }\n  /** Adds css theme class given the color to the component host */\n  _setColor(colorPalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-badge-${this._color}`);\n    if (colorPalette) {\n      classList.add(`mat-badge-${colorPalette}`);\n    }\n  }\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  _clearExistingBadges() {\n    // Only check direct children of this host element in order to avoid deleting\n    // any badges that might exist in descendant elements.\n    const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n    for (const badgeElement of Array.from(badges)) {\n      if (badgeElement !== this._badgeElement) {\n        badgeElement.remove();\n      }\n    }\n  }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.AriaDescriber), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\nMatBadge.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [\"matBadgeDisabled\", \"disabled\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    position: [\"matBadgePosition\", \"position\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    size: [\"matBadgeSize\", \"size\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !content',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.AriaDescriber\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n  return new (t || MatBadgeModule)();\n};\nMatBadgeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[A11yModule, MatCommonModule], MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge, MatCommonModule],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };","map":{"version":3,"names":["i0","Directive","Optional","Inject","Input","NgModule","mixinDisabled","MatCommonModule","i1","A11yModule","coerceBooleanProperty","ANIMATION_MODULE_TYPE","nextId","_MatBadgeBase","BADGE_CONTENT_CLASS","MatBadge","constructor","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_color","_overlap","position","size","_id","_isInitialized","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","color","value","_setColor","overlap","val","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateHostAriaDescription","hidden","_hidden","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","removeDescription","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","describe","colorPalette","remove","badges","querySelectorAll","Array","from","ɵfac","MatBadge_Factory","t","ɵɵdirectiveInject","NgZone","ElementRef","AriaDescriber","Renderer2","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","ɵɵclassProp","disabled","inputs","features","ɵɵInheritDefinitionFeature","ɵsetClassMetadata","args","selector","host","undefined","decorators","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["D:/MY FILES/CLIENT/Enterprise/Frontend-angular.v13/node_modules/@angular/material/fesm2020/badge.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        if (newDescription) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n}\nMatBadge.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatBadge.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatBadgeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] });\nMatBadgeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, imports: [[A11yModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAC5E,SAASC,aAAa,EAAEC,eAAe,QAAQ,wBAAwB;AACvE,OAAO,KAAKC,EAAE,MAAM,mBAAmB;AACvC,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,qBAAqB,QAAQ,sCAAsC;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAG,CAAC;AACd;AACA;AACA,MAAMC,aAAa,GAAGP,aAAa,CAAC,MAAM,EACzC,CAAC;AACF,MAAMQ,mBAAmB,GAAG,mBAAmB;AAC/C;AACA,MAAMC,QAAQ,SAASF,aAAa,CAAC;EACjCG,WAAWA,CAACC,OAAO,EAAEC,WAAW,EAAEC,cAAc,EAAEC,SAAS,EAAEC,cAAc,EAAE;IACzE,KAAK,CAAC,CAAC;IACP,IAAI,CAACJ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,MAAM,GAAG,SAAS;IACvB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB;AACR;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,aAAa;IAC7B;IACA,IAAI,CAACC,IAAI,GAAG,QAAQ;IACpB;IACA,IAAI,CAACC,GAAG,GAAGd,MAAM,EAAE;IACnB;IACA,IAAI,CAACe,cAAc,GAAG,KAAK;IAC3B,IAAI,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;MAC/C,MAAMC,aAAa,GAAGX,WAAW,CAACW,aAAa;MAC/C,IAAIA,aAAa,CAACC,QAAQ,KAAKD,aAAa,CAACE,YAAY,EAAE;QACvD,MAAMC,KAAK,CAAC,+CAA+C,CAAC;MAChE;IACJ;EACJ;EACA;EACA,IAAIC,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACX,MAAM;EACtB;EACA,IAAIW,KAAKA,CAACC,KAAK,EAAE;IACb,IAAI,CAACC,SAAS,CAACD,KAAK,CAAC;IACrB,IAAI,CAACZ,MAAM,GAAGY,KAAK;EACvB;EACA;EACA,IAAIE,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACb,QAAQ;EACxB;EACA,IAAIa,OAAOA,CAACC,GAAG,EAAE;IACb,IAAI,CAACd,QAAQ,GAAGb,qBAAqB,CAAC2B,GAAG,CAAC;EAC9C;EACA;EACA,IAAIC,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,QAAQ;EACxB;EACA,IAAID,OAAOA,CAACE,UAAU,EAAE;IACpB,IAAI,CAACC,sBAAsB,CAACD,UAAU,CAAC;EAC3C;EACA;EACA,IAAIE,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAACC,YAAY;EAC5B;EACA,IAAID,WAAWA,CAACE,cAAc,EAAE;IAC5B,IAAI,CAACC,0BAA0B,CAACD,cAAc,CAAC;EACnD;EACA;EACA,IAAIE,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACC,OAAO;EACvB;EACA,IAAID,MAAMA,CAACT,GAAG,EAAE;IACZ,IAAI,CAACU,OAAO,GAAGrC,qBAAqB,CAAC2B,GAAG,CAAC;EAC7C;EACA;EACAW,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACxB,QAAQ,CAACyB,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;EAChD;EACA;EACAC,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAAC1B,QAAQ,CAACyB,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;EACjD;EACA;AACJ;AACA;AACA;EACIE,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACC,aAAa;EAC7B;EACAC,QAAQA,CAAA,EAAG;IACP;IACA;IACA;IACA,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC3B,IAAI,IAAI,CAAChB,OAAO,IAAI,CAAC,IAAI,CAACc,aAAa,EAAE;MACrC,IAAI,CAACA,aAAa,GAAG,IAAI,CAACG,mBAAmB,CAAC,CAAC;MAC/C,IAAI,CAACd,sBAAsB,CAAC,IAAI,CAACH,OAAO,CAAC;IAC7C;IACA,IAAI,CAACX,cAAc,GAAG,IAAI;EAC9B;EACA6B,WAAWA,CAAA,EAAG;IACV;IACA;IACA,IAAI,IAAI,CAACpC,SAAS,CAACqC,WAAW,EAAE;MAC5B,IAAI,CAACrC,SAAS,CAACqC,WAAW,CAAC,IAAI,CAACL,aAAa,CAAC;IAClD;IACA,IAAI,CAACjC,cAAc,CAACuC,iBAAiB,CAAC,IAAI,CAACxC,WAAW,CAACW,aAAa,EAAE,IAAI,CAACa,WAAW,CAAC;EAC3F;EACA;EACAa,mBAAmBA,CAAA,EAAG;IAClB,MAAMI,YAAY,GAAG,IAAI,CAACvC,SAAS,CAACwC,aAAa,CAAC,MAAM,CAAC;IACzD,MAAMC,WAAW,GAAG,kBAAkB;IACtCF,YAAY,CAACG,YAAY,CAAC,IAAI,EAAE,qBAAqB,IAAI,CAACpC,GAAG,EAAE,CAAC;IAChE;IACA;IACAiC,YAAY,CAACG,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;IAChDH,YAAY,CAACI,SAAS,CAACC,GAAG,CAAClD,mBAAmB,CAAC;IAC/C,IAAI,IAAI,CAACO,cAAc,KAAK,gBAAgB,EAAE;MAC1CsC,YAAY,CAACI,SAAS,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACzD;IACA,IAAI,CAAC9C,WAAW,CAACW,aAAa,CAACoC,WAAW,CAACN,YAAY,CAAC;IACxD;IACA,IAAI,OAAOO,qBAAqB,KAAK,UAAU,IAAI,IAAI,CAAC7C,cAAc,KAAK,gBAAgB,EAAE;MACzF,IAAI,CAACJ,OAAO,CAACkD,iBAAiB,CAAC,MAAM;QACjCD,qBAAqB,CAAC,MAAM;UACxBP,YAAY,CAACI,SAAS,CAACC,GAAG,CAACH,WAAW,CAAC;QAC3C,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,MACI;MACDF,YAAY,CAACI,SAAS,CAACC,GAAG,CAACH,WAAW,CAAC;IAC3C;IACA,OAAOF,YAAY;EACvB;EACA;EACAlB,sBAAsBA,CAACD,UAAU,EAAE;IAC/B,MAAM4B,oBAAoB,GAAG,GAAG5B,UAAU,IAAI,EAAE,EAAE,CAAC6B,IAAI,CAAC,CAAC;IACzD;IACA;IACA;IACA,IAAI,IAAI,CAAC1C,cAAc,IAAIyC,oBAAoB,IAAI,CAAC,IAAI,CAAChB,aAAa,EAAE;MACpE,IAAI,CAACA,aAAa,GAAG,IAAI,CAACG,mBAAmB,CAAC,CAAC;IACnD;IACA,IAAI,IAAI,CAACH,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,CAACkB,WAAW,GAAGF,oBAAoB;IACzD;IACA,IAAI,CAAC7B,QAAQ,GAAG6B,oBAAoB;EACxC;EACA;EACAvB,0BAA0BA,CAACD,cAAc,EAAE;IACvC,IAAI,CAACzB,cAAc,CAACuC,iBAAiB,CAAC,IAAI,CAACxC,WAAW,CAACW,aAAa,EAAE,IAAI,CAACa,WAAW,CAAC;IACvF,IAAIE,cAAc,EAAE;MAChB,IAAI,CAACzB,cAAc,CAACoD,QAAQ,CAAC,IAAI,CAACrD,WAAW,CAACW,aAAa,EAAEe,cAAc,CAAC;IAChF;IACA,IAAI,CAACD,YAAY,GAAGC,cAAc;EACtC;EACA;EACAT,SAASA,CAACqC,YAAY,EAAE;IACpB,MAAMT,SAAS,GAAG,IAAI,CAAC7C,WAAW,CAACW,aAAa,CAACkC,SAAS;IAC1DA,SAAS,CAACU,MAAM,CAAC,aAAa,IAAI,CAACnD,MAAM,EAAE,CAAC;IAC5C,IAAIkD,YAAY,EAAE;MACdT,SAAS,CAACC,GAAG,CAAC,aAAaQ,YAAY,EAAE,CAAC;IAC9C;EACJ;EACA;EACAlB,oBAAoBA,CAAA,EAAG;IACnB;IACA;IACA,MAAMoB,MAAM,GAAG,IAAI,CAACxD,WAAW,CAACW,aAAa,CAAC8C,gBAAgB,CAAC,aAAa7D,mBAAmB,EAAE,CAAC;IAClG,KAAK,MAAM6C,YAAY,IAAIiB,KAAK,CAACC,IAAI,CAACH,MAAM,CAAC,EAAE;MAC3C,IAAIf,YAAY,KAAK,IAAI,CAACP,aAAa,EAAE;QACrCO,YAAY,CAACc,MAAM,CAAC,CAAC;MACzB;IACJ;EACJ;AACJ;AACA1D,QAAQ,CAAC+D,IAAI,YAAAC,iBAAAC,CAAA;EAAA,YAAAA,CAAA,IAAwFjE,QAAQ,EAAlBf,EAAE,CAAAiF,iBAAA,CAAkCjF,EAAE,CAACkF,MAAM,GAA7ClF,EAAE,CAAAiF,iBAAA,CAAwDjF,EAAE,CAACmF,UAAU,GAAvEnF,EAAE,CAAAiF,iBAAA,CAAkFzE,EAAE,CAAC4E,aAAa,GAApGpF,EAAE,CAAAiF,iBAAA,CAA+GjF,EAAE,CAACqF,SAAS,GAA7HrF,EAAE,CAAAiF,iBAAA,CAAwItE,qBAAqB;AAAA,CAA4D;AACtTI,QAAQ,CAACuE,IAAI,kBAD8EtF,EAAE,CAAAuF,iBAAA;EAAAC,IAAA,EACJzE,QAAQ;EAAA0E,SAAA;EAAAC,SAAA;EAAAC,QAAA;EAAAC,YAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MADN9F,EAAE,CAAAgG,WAAA,sBAAAD,GAAA,CAAA3D,OAAA,qBAAA2D,GAAA,CAAA/C,OAAA,wBAAA+C,GAAA,CAAA/C,OAAA,yBAAA+C,GAAA,CAAA7C,OAAA,uBAAA6C,GAAA,CAAA7C,OAAA,uBAAA6C,GAAA,CAAAtE,IAAA,kCAAAsE,GAAA,CAAAtE,IAAA,kCAAAsE,GAAA,CAAAtE,IAAA,kCAAAsE,GAAA,CAAAjD,MAAA,KAAAiD,GAAA,CAAAzD,OAAA,wBAAAyD,GAAA,CAAAE,QAAA;IAAA;EAAA;EAAAC,MAAA;IAAAD,QAAA;IAAAhE,KAAA;IAAAG,OAAA;IAAAZ,QAAA;IAAAc,OAAA;IAAAI,WAAA;IAAAjB,IAAA;IAAAqB,MAAA;EAAA;EAAAqD,QAAA,GAAFnG,EAAE,CAAAoG,0BAAA;AAAA,EACg3B;AAC78B;EAAA,QAAAxE,SAAA,oBAAAA,SAAA,KAF2F5B,EAAE,CAAAqG,iBAAA,CAEFtF,QAAQ,EAAc,CAAC;IACtGyE,IAAI,EAAEvF,SAAS;IACfqG,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,YAAY;MACtBL,MAAM,EAAE,CAAC,4BAA4B,CAAC;MACtCM,IAAI,EAAE;QACF,OAAO,EAAE,WAAW;QACpB,2BAA2B,EAAE,SAAS;QACtC,yBAAyB,EAAE,WAAW;QACtC,yBAAyB,EAAE,YAAY;QACvC,0BAA0B,EAAE,YAAY;QACxC,yBAAyB,EAAE,WAAW;QACtC,yBAAyB,EAAE,kBAAkB;QAC7C,0BAA0B,EAAE,mBAAmB;QAC/C,yBAAyB,EAAE,kBAAkB;QAC7C,0BAA0B,EAAE,oBAAoB;QAChD,4BAA4B,EAAE;MAClC;IACJ,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEhB,IAAI,EAAExF,EAAE,CAACkF;IAAO,CAAC,EAAE;MAAEM,IAAI,EAAExF,EAAE,CAACmF;IAAW,CAAC,EAAE;MAAEK,IAAI,EAAEhF,EAAE,CAAC4E;IAAc,CAAC,EAAE;MAAEI,IAAI,EAAExF,EAAE,CAACqF;IAAU,CAAC,EAAE;MAAEG,IAAI,EAAEiB,SAAS;MAAEC,UAAU,EAAE,CAAC;QAChKlB,IAAI,EAAEtF;MACV,CAAC,EAAE;QACCsF,IAAI,EAAErF,MAAM;QACZmG,IAAI,EAAE,CAAC3F,qBAAqB;MAChC,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAEsB,KAAK,EAAE,CAAC;MACpCuD,IAAI,EAAEpF,KAAK;MACXkG,IAAI,EAAE,CAAC,eAAe;IAC1B,CAAC,CAAC;IAAElE,OAAO,EAAE,CAAC;MACVoD,IAAI,EAAEpF,KAAK;MACXkG,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAE9E,QAAQ,EAAE,CAAC;MACXgE,IAAI,EAAEpF,KAAK;MACXkG,IAAI,EAAE,CAAC,kBAAkB;IAC7B,CAAC,CAAC;IAAEhE,OAAO,EAAE,CAAC;MACVkD,IAAI,EAAEpF,KAAK;MACXkG,IAAI,EAAE,CAAC,UAAU;IACrB,CAAC,CAAC;IAAE5D,WAAW,EAAE,CAAC;MACd8C,IAAI,EAAEpF,KAAK;MACXkG,IAAI,EAAE,CAAC,qBAAqB;IAChC,CAAC,CAAC;IAAE7E,IAAI,EAAE,CAAC;MACP+D,IAAI,EAAEpF,KAAK;MACXkG,IAAI,EAAE,CAAC,cAAc;IACzB,CAAC,CAAC;IAAExD,MAAM,EAAE,CAAC;MACT0C,IAAI,EAAEpF,KAAK;MACXkG,IAAI,EAAE,CAAC,gBAAgB;IAC3B,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,cAAc,CAAC;AAErBA,cAAc,CAAC7B,IAAI,YAAA8B,uBAAA5B,CAAA;EAAA,YAAAA,CAAA,IAAwF2B,cAAc;AAAA,CAAkD;AAC3KA,cAAc,CAACE,IAAI,kBA3DwE7G,EAAE,CAAA8G,gBAAA;EAAAtB,IAAA,EA2DemB;AAAc,EAA2G;AACrOA,cAAc,CAACI,IAAI,kBA5DwE/G,EAAE,CAAAgH,gBAAA;EAAAC,OAAA,GA4DyC,CAACxG,UAAU,EAAEF,eAAe,CAAC,EAAEA,eAAe;AAAA,EAAI;AACxL;EAAA,QAAAqB,SAAA,oBAAAA,SAAA,KA7D2F5B,EAAE,CAAAqG,iBAAA,CA6DFM,cAAc,EAAc,CAAC;IAC5GnB,IAAI,EAAEnF,QAAQ;IACdiG,IAAI,EAAE,CAAC;MACCW,OAAO,EAAE,CAACxG,UAAU,EAAEF,eAAe,CAAC;MACtC2G,OAAO,EAAE,CAACnG,QAAQ,EAAER,eAAe,CAAC;MACpC4G,YAAY,EAAE,CAACpG,QAAQ;IAC3B,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAE4F,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}