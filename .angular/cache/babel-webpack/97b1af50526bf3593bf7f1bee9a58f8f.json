{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject, tap, of } from 'rxjs';\nimport { _url } from 'src/global-variables';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SigInService = /*#__PURE__*/(() => {\n  class SigInService {\n    constructor(http) {\n      this.http = http;\n      this.tokenKey = 'token';\n      this._refreshrequired = new Subject();\n    }\n    get RequiredRefresh() {\n      return this._refreshrequired;\n    }\n    // Get token from local storage\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    // Save token to local storage\n    saveToken(token) {\n      localStorage.setItem(this.tokenKey, token);\n      // localStorage.setItem(this.role_code, token);\n    }\n    // Login method\n    signin(username, password) {\n      return this.http.post(_url + 'loginUsername', {\n        username,\n        password\n      }).pipe(tap(res => {\n        if (res && res.token) {\n          this.saveToken(res.token);\n          this._refreshrequired.next();\n          //this.startTokenExpirationCheck(); // Restart token expiration check on login\n        }\n      }), catchError(this.handleError()));\n    }\n    setActiveSignIn(email) {\n      return this.http.post(_url + 'accountactivation', {\n        email\n      }).pipe(tap(res => {\n        if (res && res.token) {\n          this.saveToken(res.token);\n          this._refreshrequired.next();\n          //this.startTokenExpirationCheck(); // Restart token expiration check on login\n        }\n      }), catchError(this.handleError()));\n    }\n    getUserRole() {\n      const token = this.getToken();\n      if (token) {\n        try {\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          return payload.role;\n        } catch (error) {\n          console.error('Failed to decode token:', error);\n          return null;\n        }\n      }\n      return null;\n    }\n    createHeaders() {\n      const token = this.getToken();\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error);\n        return of(result);\n      };\n    }\n  }\n  SigInService.ɵfac = function SigInService_Factory(t) {\n    return new (t || SigInService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SigInService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SigInService,\n    factory: SigInService.ɵfac,\n    providedIn: 'root'\n  });\n  return SigInService;\n})();","map":null,"metadata":{},"sourceType":"module"}