{"ast":null,"code":"import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nclass BaseTreeControl {\n  constructor() {\n    /** A selection model with multi-selection to track expansion status. */\n    this.expansionModel = new SelectionModel(true);\n  }\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode) {\n    this.expansionModel.toggle(this._trackByValue(dataNode));\n  }\n  /** Expands one single data node. */\n  expand(dataNode) {\n    this.expansionModel.select(this._trackByValue(dataNode));\n  }\n  /** Collapses one single data node. */\n  collapse(dataNode) {\n    this.expansionModel.deselect(this._trackByValue(dataNode));\n  }\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode) {\n    return this.expansionModel.isSelected(this._trackByValue(dataNode));\n  }\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode) {\n    this.expansionModel.isSelected(this._trackByValue(dataNode)) ? this.collapseDescendants(dataNode) : this.expandDescendants(dataNode);\n  }\n  /** Collapse all dataNodes in the tree. */\n  collapseAll() {\n    this.expansionModel.clear();\n  }\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode) {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n  }\n  _trackByValue(value) {\n    return this.trackBy ? this.trackBy(value) : value;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(getLevel, isExpandable, options) {\n    super();\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.options = options;\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n  getDescendants(dataNode) {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results = [];\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n  expandAll() {\n    this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n  /** Construct with nested tree function getChildren. */\n  constructor(getChildren, options) {\n    super();\n    this.getChildren = getChildren;\n    this.options = options;\n    if (this.options) {\n      this.trackBy = this.options.trackBy;\n    }\n  }\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n  expandAll() {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n  }\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n  getDescendants(dataNode) {\n    const descendants = [];\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n  /** A helper function to get descendants recursively. */\n  _getDescendants(descendants, dataNode) {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach(child => this._getDescendants(descendants, child));\n    } else if (isObservable(childrenNodes)) {\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n      childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n        for (const child of children) {\n          this._getDescendants(descendants, child);\n        }\n      });\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) {\n  return new (t || CdkTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\nCdkTreeNodeOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNodeOutlet,\n  selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n  constructor(data) {\n    this.$implicit = data;\n  }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n  /** @docs-private */\n  constructor(template) {\n    this.template = template;\n  }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) {\n  return new (t || CdkTreeNodeDef)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\nCdkTreeNodeDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNodeDef,\n  selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"cdkTreeNodeDefWhen\", \"when\"]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeDef]',\n      inputs: ['when: cdkTreeNodeDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n  constructor(_differs, _changeDetectorRef) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Subject that emits when the component has been destroyed. */\n    this._onDestroy = new Subject();\n    /** Level of nodes */\n    this._levels = new Map();\n    // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n    //     Remove the MAX_VALUE in viewChange\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n  }\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n  get dataSource() {\n    return this._dataSource;\n  }\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlMissingError();\n    }\n  }\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n    this.viewChange.complete();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n      this.dataSource.disconnect(this);\n    }\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n  }\n  ngAfterContentChecked() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n  //     and nested trees.\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  _switchDataSource(dataSource) {\n    if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n      this.dataSource.disconnect(this);\n    }\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n  /** Set up a subscription for the data provided by the data source. */\n  _observeRenderChanges() {\n    let dataStream;\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (isObservable(this._dataSource)) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = of(this._dataSource);\n    }\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => this.renderNodeChanges(data));\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n  renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n    const changes = dataDiffer.diff(data);\n    if (!changes) {\n      return;\n    }\n    changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n      if (item.previousIndex == null) {\n        this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n      } else if (currentIndex == null) {\n        viewContainer.remove(adjustedPreviousIndex);\n        this._levels.delete(item.item);\n      } else {\n        const view = viewContainer.get(adjustedPreviousIndex);\n        viewContainer.move(view, currentIndex);\n      }\n    });\n    this._changeDetectorRef.detectChanges();\n  }\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n  _getNodeDef(data, i) {\n    if (this._nodeDefs.length === 1) {\n      return this._nodeDefs.first;\n    }\n    const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n    if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeMissingMatchingNodeDefError();\n    }\n    return nodeDef;\n  }\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n  insertNode(nodeData, index, viewContainer, parentData) {\n    const node = this._getNodeDef(nodeData, index);\n    // Node context that will be provided to created embedded view\n    const context = new CdkTreeNodeOutletContext(nodeData);\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = this._levels.get(parentData) + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(nodeData, context.level);\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) {\n  return new (t || CdkTree)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nCdkTree.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdkTree,\n  selectors: [[\"cdk-tree\"]],\n  contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    }\n  },\n  viewQuery: function CdkTree_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkTreeNodeOutlet, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"],\n  inputs: {\n    dataSource: \"dataSource\",\n    treeControl: \"treeControl\",\n    trackBy: \"trackBy\"\n  },\n  exportAs: [\"cdkTree\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkTreeNodeOutlet\", \"\"]],\n  template: function CdkTree_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [CdkTreeNodeOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTree, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-tree',\n      exportAs: 'cdkTree',\n      template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n      // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n      // declared elsewhere, they are checked when their declaration points are checked.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: i0.IterableDiffers\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    dataSource: [{\n      type: Input\n    }],\n    treeControl: [{\n      type: Input\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [CdkTreeNodeOutlet, {\n        static: true\n      }]\n    }],\n    _nodeDefs: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeDef, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n  constructor(_elementRef, _tree) {\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    /** Subject that emits when the component has been destroyed. */\n    this._destroyed = new Subject();\n    /** Emits when the node's data has changed. */\n    this._dataChanges = new Subject();\n    CdkTreeNode.mostRecentTreeNode = this;\n    this.role = 'treeitem';\n  }\n  /**\n   * The role of the tree node.\n   * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n   *   removed in a future version.\n   * @breaking-change 12.0.0 Remove this input\n   */\n  get role() {\n    return 'treeitem';\n  }\n  set role(_role) {\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.setAttribute('role', _role);\n  }\n  /** The tree node's data. */\n  get data() {\n    return this._data;\n  }\n  set data(value) {\n    if (value !== this._data) {\n      this._data = value;\n      this._setRoleFromData();\n      this._dataChanges.next();\n    }\n  }\n  get isExpanded() {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n  get level() {\n    // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n    // aria-level off the parent node and use it as the level for this node (note aria-level is\n    // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : this._parentNodeAriaLevel;\n  }\n  ngOnInit() {\n    this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n    this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n  }\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n    this._dataChanges.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** Focuses the menu item. Implements for FocusableOption. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n  // TODO: role should eventually just be set in the component host\n  _setRoleFromData() {\n    if (!this._tree.treeControl.isExpandable && !this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    this.role = 'treeitem';\n  }\n}\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) {\n  return new (t || CdkTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CdkTree));\n};\nCdkTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNode,\n  selectors: [[\"cdk-tree-node\"]],\n  hostAttrs: [1, \"cdk-tree-node\"],\n  hostVars: 1,\n  hostBindings: function CdkTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded);\n    }\n  },\n  inputs: {\n    role: \"role\"\n  },\n  exportAs: [\"cdkTreeNode\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-tree-node',\n      exportAs: 'cdkTreeNode',\n      host: {\n        'class': 'cdk-tree-node',\n        '[attr.aria-expanded]': 'isExpanded'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: CdkTree\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\nfunction getParentNodeAriaLevel(nodeElement) {\n  let parent = nodeElement.parentElement;\n  while (parent && !isNodeElement(parent)) {\n    parent = parent.parentElement;\n  }\n  if (!parent) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Incorrect tree structure containing detached node.');\n    } else {\n      return -1;\n    }\n  } else if (parent.classList.contains('cdk-nested-tree-node')) {\n    return coerceNumberProperty(parent.getAttribute('aria-level'));\n  } else {\n    // The ancestor element is the cdk-tree itself\n    return 0;\n  }\n}\nfunction isNodeElement(element) {\n  const classList = element.classList;\n  return !!(classList?.contains('cdk-nested-tree-node') || classList?.contains('cdk-tree'));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n  constructor(elementRef, tree, _differs) {\n    super(elementRef, tree);\n    this._differs = _differs;\n  }\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(childrenNodes);\n    } else if (isObservable(childrenNodes)) {\n      childrenNodes.pipe(takeUntil(this._destroyed)).subscribe(result => this.updateChildrenNodes(result));\n    }\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateChildrenNodes());\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n  /** Add children dataNodes to the NodeOutlet */\n  updateChildrenNodes(children) {\n    const outlet = this._getNodeOutlet();\n    if (children) {\n      this._children = children;\n    }\n    if (outlet && this._children) {\n      const viewContainer = outlet.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n  /** Clear the children dataNodes. */\n  _clear() {\n    const outlet = this._getNodeOutlet();\n    if (outlet) {\n      outlet.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n  /** Gets the outlet for the current node. */\n  _getNodeOutlet() {\n    const outlets = this.nodeOutlet;\n    // Note that since we use `descendants: true` on the query, we have to ensure\n    // that we don't pick up the outlet of a child node by accident.\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n  }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) {\n  return new (t || CdkNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers));\n};\nCdkNestedTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkNestedTreeNode,\n  selectors: [[\"cdk-nested-tree-node\"]],\n  contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-nested-tree-node\"],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"cdkNestedTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: CdkNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: CdkNestedTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-nested-tree-node',\n      exportAs: 'cdkNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: CdkNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: CdkNestedTreeNode\n      }],\n      host: {\n        'class': 'cdk-nested-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: CdkTree\n    }, {\n      type: i0.IterableDiffers\n    }];\n  }, {\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [CdkTreeNodeOutlet, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n  constructor(_treeNode, _tree, _element, _dir) {\n    this._treeNode = _treeNode;\n    this._tree = _tree;\n    this._element = _element;\n    this._dir = _dir;\n    /** Subject that emits when the component has been destroyed. */\n    this._destroyed = new Subject();\n    /** CSS units used for the indentation value. */\n    this.indentUnits = 'px';\n    this._indent = 40;\n    this._setPadding();\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n    }\n    // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n    _treeNode._dataChanges.subscribe(() => this._setPadding());\n  }\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n  get indent() {\n    return this._indent;\n  }\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent() {\n    const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._treeNode.data) : null;\n    const level = this._level == null ? nodeLevel : this._level;\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n  _setPadding(forceChange = false) {\n    const padding = this._paddingIndent();\n    if (padding !== this._currentPadding || forceChange) {\n      const element = this._element.nativeElement;\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n      element.style[paddingProp] = padding || '';\n      element.style[resetProp] = '';\n      this._currentPadding = padding;\n    }\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  _setLevelInput(value) {\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n    // they set 0 explicitly.\n    this._level = coerceNumberProperty(value, null);\n    this._setPadding();\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  _setIndentInput(indent) {\n    let value = indent;\n    let units = 'px';\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n    this._setPadding();\n  }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) {\n  return new (t || CdkTreeNodePadding)(i0.ɵɵdirectiveInject(CdkTreeNode), i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n};\nCdkTreeNodePadding.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNodePadding,\n  selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"cdkTreeNodePadding\", \"level\"],\n    indent: [\"cdkTreeNodePaddingIndent\", \"indent\"]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodePadding]'\n    }]\n  }], function () {\n    return [{\n      type: CdkTreeNode\n    }, {\n      type: CdkTree\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    level: [{\n      type: Input,\n      args: ['cdkTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['cdkTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n  constructor(_tree, _treeNode) {\n    this._tree = _tree;\n    this._treeNode = _treeNode;\n    this._recursive = false;\n  }\n  /** Whether expand/collapse the node recursively. */\n  get recursive() {\n    return this._recursive;\n  }\n  set recursive(value) {\n    this._recursive = coerceBooleanProperty(value);\n  }\n  _toggle(event) {\n    this.recursive ? this._tree.treeControl.toggleDescendants(this._treeNode.data) : this._tree.treeControl.toggle(this._treeNode.data);\n    event.stopPropagation();\n  }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) {\n  return new (t || CdkTreeNodeToggle)(i0.ɵɵdirectiveInject(CdkTree), i0.ɵɵdirectiveInject(CdkTreeNode));\n};\nCdkTreeNodeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTreeNodeToggle,\n  selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]],\n  hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) {\n        return ctx._toggle($event);\n      });\n    }\n  },\n  inputs: {\n    recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTreeNodeToggle]',\n      host: {\n        '(click)': '_toggle($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkTree\n    }, {\n      type: CdkTreeNode\n    }];\n  }, {\n    recursive: [{\n      type: Input,\n      args: ['cdkTreeNodeToggleRecursive']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet];\nclass CdkTreeModule {}\nCdkTreeModule.ɵfac = function CdkTreeModule_Factory(t) {\n  return new (t || CdkTreeModule)();\n};\nCdkTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdkTreeModule\n});\nCdkTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTreeModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };","map":{"version":3,"names":["SelectionModel","isDataSource","isObservable","Subject","BehaviorSubject","of","take","filter","takeUntil","i0","InjectionToken","Directive","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","ViewChild","ContentChildren","NgModule","coerceNumberProperty","coerceBooleanProperty","i2","BaseTreeControl","constructor","expansionModel","toggle","dataNode","_trackByValue","expand","select","collapse","deselect","isExpanded","isSelected","toggleDescendants","collapseDescendants","expandDescendants","collapseAll","clear","toBeProcessed","push","getDescendants","map","value","trackBy","FlatTreeControl","getLevel","isExpandable","options","startIndex","dataNodes","indexOf","results","i","length","expandAll","node","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","Boolean","subscribe","children","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","viewContainer","_node","ɵfac","CdkTreeNodeOutlet_Factory","t","ɵɵdirectiveInject","ViewContainerRef","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","ɵsetClassMetadata","args","selector","undefined","decorators","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","CdkTreeNodeDef_Factory","TemplateRef","inputs","when","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","dataSource","_dataSource","_switchDataSource","ngOnInit","_dataDiffer","find","create","treeControl","ngOnDestroy","_nodeOutlet","complete","next","disconnect","_dataSubscription","unsubscribe","ngAfterContentChecked","defaultNodeDefs","_nodeDefs","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","delete","view","get","move","detectChanges","_getNodeDef","first","nodeDef","nodeData","index","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","CdkTree_Factory","IterableDiffers","ChangeDetectorRef","ɵcmp","ɵɵdefineComponent","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","CdkTree_Query","ɵɵviewQuery","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","ɵɵelementContainer","directives","encapsulation","host","None","changeDetection","Default","static","_elementRef","_tree","_destroyed","_dataChanges","role","_role","nativeElement","setAttribute","_data","_setRoleFromData","_parentNodeAriaLevel","getParentNodeAriaLevel","focus","CdkTreeNode_Factory","ElementRef","hostVars","hostBindings","CdkTreeNode_HostBindings","ɵɵattribute","nodeElement","parent","parentElement","isNodeElement","classList","contains","getAttribute","element","CdkNestedTreeNode","elementRef","tree","ngAfterContentInit","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","disabled","tabIndex","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_element","_dir","indentUnits","_indent","_setPadding","change","_level","_setLevelInput","indent","_setIndentInput","_paddingIndent","nodeLevel","forceChange","padding","_currentPadding","paddingProp","resetProp","style","units","parts","split","CdkTreeNodePadding_Factory","Directionality","CdkTreeNodeToggle","_recursive","recursive","_toggle","event","stopPropagation","CdkTreeNodeToggle_Factory","CdkTreeNodeToggle_HostBindings","ɵɵlistener","CdkTreeNodeToggle_click_HostBindingHandler","$event","EXPORTED_DECLARATIONS","CdkTreeModule","CdkTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations"],"sources":["D:/MY FILES/CLIENT/Enterprise/Frontend-angular.v13/node_modules/@angular/cdk/fesm2020/tree.mjs"],"sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode))\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren, options) {\n        super();\n        this.getChildren = getChildren;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes.map(node => this._trackByValue(node)));\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean)).subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNodeOutlet, selector: \"[cdkTreeNodeOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodeOutlet]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\n                }, {\n                    type: Optional\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass CdkTreeNodeDef {\n    /** @docs-private */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNodeDef, selector: \"[cdkTreeNodeDef]\", inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodeDef]',\n                    inputs: ['when: cdkTreeNodeDefWhen'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nclass CdkTree {\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /** Level of nodes */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlMissingError();\n        }\n    }\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this.viewChange.complete();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    ngAfterContentChecked() {\n        const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n        if (defaultNodeDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n            this.dataSource.disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(data => this.renderNodeChanges(data));\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(adjustedPreviousIndex);\n                this._levels.delete(item.item);\n            }\n            else {\n                const view = viewContainer.get(adjustedPreviousIndex);\n                viewContainer.move(view, currentIndex);\n            }\n        });\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n        if (!nodeDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = this._levels.get(parentData) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTree, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nCdkTree.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTree, selector: \"cdk-tree\", inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, host: { attributes: { \"role\": \"tree\" }, classAttribute: \"cdk-tree\" }, queries: [{ propertyName: \"_nodeDefs\", predicate: CdkTreeNodeDef, descendants: true }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: CdkTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"cdkTree\"], ngImport: i0, template: `<ng-container cdkTreeNodeOutlet></ng-container>`, isInline: true, directives: [{ type: CdkTreeNodeOutlet, selector: \"[cdkTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTree, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-tree',\n                    exportAs: 'cdkTree',\n                    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                    host: {\n                        'class': 'cdk-tree',\n                        'role': 'tree',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                    // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                    // declared elsewhere, they are checked when their declaration points are checked.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { dataSource: [{\n                type: Input\n            }], treeControl: [{\n                type: Input\n            }], trackBy: [{\n                type: Input\n            }], _nodeOutlet: [{\n                type: ViewChild,\n                args: [CdkTreeNodeOutlet, { static: true }]\n            }], _nodeDefs: [{\n                type: ContentChildren,\n                args: [CdkTreeNodeDef, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nclass CdkTreeNode {\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Emits when the node's data has changed. */\n        this._dataChanges = new Subject();\n        CdkTreeNode.mostRecentTreeNode = this;\n        this.role = 'treeitem';\n    }\n    /**\n     * The role of the tree node.\n     * @deprecated The correct role is 'treeitem', 'group' should not be used. This input will be\n     *   removed in a future version.\n     * @breaking-change 12.0.0 Remove this input\n     */\n    get role() {\n        return 'treeitem';\n    }\n    set role(_role) {\n        // TODO: move to host after View Engine deprecation\n        this._elementRef.nativeElement.setAttribute('role', _role);\n    }\n    /** The tree node's data. */\n    get data() {\n        return this._data;\n    }\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    get level() {\n        // If the treeControl has a getLevel method, use it to get the level. Otherwise read the\n        // aria-level off the parent node and use it as the level for this node (note aria-level is\n        // 1-indexed, while this property is 0-indexed, so we don't need to increment).\n        return this._tree.treeControl.getLevel\n            ? this._tree.treeControl.getLevel(this._data)\n            : this._parentNodeAriaLevel;\n    }\n    ngOnInit() {\n        this._parentNodeAriaLevel = getParentNodeAriaLevel(this._elementRef.nativeElement);\n        this._elementRef.nativeElement.setAttribute('aria-level', `${this.level + 1}`);\n    }\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Focuses the menu item. Implements for FocusableOption. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    // TODO: role should eventually just be set in the component host\n    _setRoleFromData() {\n        if (!this._tree.treeControl.isExpandable &&\n            !this._tree.treeControl.getChildren &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        this.role = 'treeitem';\n    }\n}\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNode, deps: [{ token: i0.ElementRef }, { token: CdkTree }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNode, selector: \"cdk-tree-node\", inputs: { role: \"role\" }, host: { properties: { \"attr.aria-expanded\": \"isExpanded\" }, classAttribute: \"cdk-tree-node\" }, exportAs: [\"cdkTreeNode\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-tree-node',\n                    exportAs: 'cdkTreeNode',\n                    host: {\n                        'class': 'cdk-tree-node',\n                        '[attr.aria-expanded]': 'isExpanded',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: CdkTree }]; }, propDecorators: { role: [{\n                type: Input\n            }] } });\nfunction getParentNodeAriaLevel(nodeElement) {\n    let parent = nodeElement.parentElement;\n    while (parent && !isNodeElement(parent)) {\n        parent = parent.parentElement;\n    }\n    if (!parent) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw Error('Incorrect tree structure containing detached node.');\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (parent.classList.contains('cdk-nested-tree-node')) {\n        return coerceNumberProperty(parent.getAttribute('aria-level'));\n    }\n    else {\n        // The ancestor element is the cdk-tree itself\n        return 0;\n    }\n}\nfunction isNodeElement(element) {\n    const classList = element.classList;\n    return !!(classList?.contains('cdk-nested-tree-node') || classList?.contains('cdk-tree'));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, _differs) {\n        super(elementRef, tree);\n        this._differs = _differs;\n    }\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes(childrenNodes);\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(result => this.updateChildrenNodes(result));\n        }\n        this.nodeOutlet.changes\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateChildrenNodes());\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /** Add children dataNodes to the NodeOutlet */\n    updateChildrenNodes(children) {\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Clear the children dataNodes. */\n    _clear() {\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /** Gets the outlet for the current node. */\n    _getNodeOutlet() {\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n    }\n}\nCdkNestedTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: CdkTree }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nCdkNestedTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkNestedTreeNode, selector: \"cdk-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, host: { classAttribute: \"cdk-nested-tree-node\" }, providers: [\n        { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode },\n    ], queries: [{ propertyName: \"nodeOutlet\", predicate: CdkTreeNodeOutlet, descendants: true }], exportAs: [\"cdkNestedTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-nested-tree-node',\n                    exportAs: 'cdkNestedTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [\n                        { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'cdk-nested-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: CdkTree }, { type: i0.IterableDiffers }]; }, propDecorators: { nodeOutlet: [{\n                type: ContentChildren,\n                args: [CdkTreeNodeOutlet, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nclass CdkTreeNodePadding {\n    constructor(_treeNode, _tree, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._element = _element;\n        this._dir = _dir;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** CSS units used for the indentation value. */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe(() => this._setPadding());\n    }\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    _paddingIndent() {\n        const nodeLevel = this._treeNode.data && this._tree.treeControl.getLevel\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    _setPadding(forceChange = false) {\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            const element = this._element.nativeElement;\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            element.style[paddingProp] = padding || '';\n            element.style[resetProp] = '';\n            this._currentPadding = padding;\n        }\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setLevelInput(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = coerceNumberProperty(value, null);\n        this._setPadding();\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setIndentInput(indent) {\n        let value = indent;\n        let units = 'px';\n        if (typeof indent === 'string') {\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n}\nCdkTreeNodePadding.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodePadding, deps: [{ token: CdkTreeNode }, { token: CdkTree }, { token: i0.ElementRef }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodePadding.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNodePadding, selector: \"[cdkTreeNodePadding]\", inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodePadding]',\n                }]\n        }], ctorParameters: function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: i0.ElementRef }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { level: [{\n                type: Input,\n                args: ['cdkTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['cdkTreeNodePaddingIndent']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nclass CdkTreeNodeToggle {\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /** Whether expand/collapse the node recursively. */\n    get recursive() {\n        return this._recursive;\n    }\n    set recursive(value) {\n        this._recursive = coerceBooleanProperty(value);\n    }\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeToggle, deps: [{ token: CdkTree }, { token: CdkTreeNode }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTreeNodeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkTreeNodeToggle, selector: \"[cdkTreeNodeToggle]\", inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] }, host: { listeners: { \"click\": \"_toggle($event)\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTreeNodeToggle]',\n                    host: {\n                        '(click)': '_toggle($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, propDecorators: { recursive: [{\n                type: Input,\n                args: ['cdkTreeNodeToggleRecursive']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeModule, declarations: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet], exports: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet] });\nCdkTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}