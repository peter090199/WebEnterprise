{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MAT_DIALOG_DATA, MatDialogConfig } from '@angular/material/dialog';\nimport { firstValueFrom } from 'rxjs';\nimport { AddSubMenuComponent } from '../add-sub-menu/add-sub-menu.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/Global/notifications.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"src/app/Services/SubMenu/sub-menu.service\";\nexport let SubMenuUIComponent = /*#__PURE__*/(() => {\n  class SubMenuUIComponent {\n    constructor(notificationsService, dialogRef, submenuServices, data, dialog) {\n      this.notificationsService = notificationsService;\n      this.dialogRef = dialogRef;\n      this.submenuServices = submenuServices;\n      this.data = data;\n      this.dialog = dialog;\n      this.searchKey = '';\n      this.placeHolder = 'Search';\n      this.isLoading = false;\n      this.displayedColumns = ['transNo', 'description', 'route', 'status'];\n      this.dataSource = new MatTableDataSource([]);\n      this.roles = [];\n      this.pageSizeOptions = [5, 10, 25, 100];\n      this.success = false;\n      this.selectedRow = data.selectedRow; // Initialize selectedRow from dialog data\n    }\n    ngOnInit() {\n      if (this.selectedRow) {\n        this.getSubMenus(); // Fetch submenus when component is initialized\n      }\n    }\n    onClose() {\n      this.dialogRef.close(); // Close the dialog on cancel\n    }\n    applyFilter() {\n      this.dataSource.filter = this.searchKey.trim().toLocaleLowerCase();\n    }\n    clearSearch() {\n      this.searchKey = '';\n      this.applyFilter();\n    }\n    getSubMenus() {\n      var _a;\n      return __awaiter(this, void 0, void 0, function* () {\n        this.isLoading = true;\n        try {\n          if ((_a = this.selectedRow) === null || _a === void 0 ? void 0 : _a.transNo) {\n            const res = yield firstValueFrom(this.submenuServices.getSubMenu(this.selectedRow.transNo));\n            if (res.success === true) {\n              this.dataSource.data = res.submenus; // Update dataSource with the submenus array\n              this.roles = res.submenus; // Optionally use roles or other purposes\n            } else {\n              this.notificationsService.toastrError('Failed to load submenus.');\n            }\n          } else {\n            this.notificationsService.toastrError('No transaction number available.');\n          }\n        } catch (error) {\n          console.error('Error fetching submenus:', error);\n          this.notificationsService.toastrError('Failed to load submenus.');\n        } finally {\n          this.isLoading = false;\n          this.dataSource.paginator = this.paginator; // Add paginator to the table\n          this.dataSource.sort = this.sort; // Add sorting to the table\n        }\n      });\n    }\n    delete(role) {\n      this.notificationsService.popupWarning(role.description, 'Are you sure to delete this menu?').then(result => {\n        if (result.value) {\n          this.submenuServices.deleteMenu(role.transNo).subscribe({\n            next: res => {\n              if (res.success === true) {\n                this.notificationsService.toastrSuccess(res.message);\n              } else {\n                this.notificationsService.toastrError(res.message);\n              }\n              this.getSubMenus(); // Refresh the table data\n            },\n            error: error => {\n              this.notificationsService.toastrError(error.error || 'Error occurred');\n              this.isLoading = false;\n            }\n          });\n        }\n      });\n    }\n    onTransNoClick(transNo) {\n      console.log('Selected TransNo:', transNo);\n      // Fetch submenu data based on transNo if needed\n      // this.getSubMenuData(transNo);\n    }\n    edit(element) {\n      // Open edit dialog with the selected element\n      // const dialogRef = this.dialog.open(EditDialogComponent, { data: element });\n      // dialogRef.afterClosed().subscribe(result => {\n      //   if (result) {\n      //     this.getSubMenus(); // Refresh the table data after edit\n      //   }\n      // });\n    }\n    onRowClick(row) {\n      this.selectedRow = row; // Set the selected row when clicked\n      console.log('Selected Row:', row);\n    }\n    deletex(row) {\n      console.log('Deleting row:', row);\n      // Implement additional delete functionality if necessary\n    }\n    newSubmodule() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.width = '600px';\n      dialogConfig.data = this.selectedRow;\n      console.log(this.selectedRow);\n      const dialogRef = this.dialog.open(AddSubMenuComponent, dialogConfig);\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.getSubMenus(); // Refresh the table after dialog closure\n        }\n      });\n    }\n  }\n  SubMenuUIComponent.ɵfac = function SubMenuUIComponent_Factory(t) {\n    return new (t || SubMenuUIComponent)(i0.ɵɵdirectiveInject(i1.NotificationsService), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i3.SubMenuService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.MatDialog));\n  };\n  SubMenuUIComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SubMenuUIComponent,\n    selectors: [[\"app-sub-menu-ui\"]],\n    viewQuery: function SubMenuUIComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 5);\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    decls: 0,\n    vars: 0,\n    template: function SubMenuUIComponent_Template(rf, ctx) {},\n    styles: [\"\"]\n  });\n  return SubMenuUIComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}