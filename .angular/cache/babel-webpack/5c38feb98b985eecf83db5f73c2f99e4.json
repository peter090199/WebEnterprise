{"ast":null,"code":"import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst _c0 = [\"body\"];\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) {}\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 2);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n  }\n}\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed, void', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed, void', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n  constructor(_template) {\n    this._template = _template;\n  }\n}\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) {\n  return new (t || MatExpansionPanelContent)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\nMatExpansionPanelContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelContent,\n  selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matExpansionPanelContent]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n  constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this._viewContainerRef = _viewContainerRef;\n    this._animationMode = _animationMode;\n    this._hideToggle = false;\n    /** An event emitted after the body's expansion animation happens. */\n    this.afterExpand = new EventEmitter();\n    /** An event emitted after the body's collapse animation happens. */\n    this.afterCollapse = new EventEmitter();\n    /** Stream that emits for changes in `@Input` properties. */\n    this._inputChanges = new Subject();\n    /** ID for the associated header element. Used for a11y labelling. */\n    this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n    /** Stream of body animation done events. */\n    this._bodyAnimationDone = new Subject();\n    this.accordion = accordion;\n    this._document = _document;\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n  /** Whether the toggle indicator should be hidden. */\n  get hideToggle() {\n    return this._hideToggle || this.accordion && this.accordion.hideToggle;\n  }\n  set hideToggle(value) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  /** The position of the expansion indicator. */\n  get togglePosition() {\n    return this._togglePosition || this.accordion && this.accordion.togglePosition;\n  }\n  set togglePosition(value) {\n    this._togglePosition = value;\n  }\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing() {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n  /** Gets the expanded state string. */\n  _getExpandedState() {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n  /** Toggles the expanded state of the expansion panel. */\n  toggle() {\n    this.expanded = !this.expanded;\n  }\n  /** Sets the expanded state of the expansion panel to false. */\n  close() {\n    this.expanded = false;\n  }\n  /** Sets the expanded state of the expansion panel to true. */\n  open() {\n    this.expanded = true;\n  }\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n  ngOnChanges(changes) {\n    this._inputChanges.next(changes);\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus() {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n    return false;\n  }\n}\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) {\n  return new (t || MatExpansionPanel)(i0.ɵɵdirectiveInject(MAT_ACCORDION, 12), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.UniqueSelectionDispatcher), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8));\n};\nMatExpansionPanel.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatExpansionPanel,\n  selectors: [[\"mat-expansion-panel\"]],\n  contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    }\n  },\n  viewQuery: function MatExpansionPanel_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-expansion-panel\"],\n  hostVars: 6,\n  hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    expanded: \"expanded\",\n    hideToggle: \"hideToggle\",\n    togglePosition: \"togglePosition\"\n  },\n  outputs: {\n    opened: \"opened\",\n    closed: \"closed\",\n    expandedChange: \"expandedChange\",\n    afterExpand: \"afterExpand\",\n    afterCollapse: \"afterCollapse\"\n  },\n  exportAs: [\"matExpansionPanel\"],\n  features: [i0.ɵɵProvidersFeature([\n  // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n  // to the same accordion.\n  {\n    provide: MAT_ACCORDION,\n    useValue: undefined\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]],\n  template: function MatExpansionPanel_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c1);\n      i0.ɵɵprojection(0);\n      i0.ɵɵelementStart(1, \"div\", 0, 1);\n      i0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) {\n        return ctx._bodyAnimationDone.next($event);\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵprojection(4, 1);\n      i0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(6, 2);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n      i0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    }\n  },\n  directives: [i2.CdkPortalOutlet],\n  styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.bodyExpansion]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanel, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel',\n      exportAs: 'matExpansionPanel',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled', 'expanded'],\n      outputs: ['opened', 'closed', 'expandedChange'],\n      animations: [matExpansionAnimations.bodyExpansion],\n      providers: [\n      // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n      // to the same accordion.\n      {\n        provide: MAT_ACCORDION,\n        useValue: undefined\n      }],\n      host: {\n        'class': 'mat-expansion-panel',\n        '[class.mat-expanded]': 'expanded',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n      },\n      template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n      styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [MAT_ACCORDION]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.UniqueSelectionDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    hideToggle: [{\n      type: Input\n    }],\n    togglePosition: [{\n      type: Input\n    }],\n    afterExpand: [{\n      type: Output\n    }],\n    afterCollapse: [{\n      type: Output\n    }],\n    _lazyContent: [{\n      type: ContentChild,\n      args: [MatExpansionPanelContent]\n    }],\n    _body: [{\n      type: ViewChild,\n      args: ['body']\n    }]\n  });\n})();\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {}\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) {\n  return new (t || MatExpansionPanelActionRow)();\n};\nMatExpansionPanelActionRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelActionRow,\n  selectors: [[\"mat-action-row\"]],\n  hostAttrs: [1, \"mat-action-row\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-action-row',\n      host: {\n        class: 'mat-action-row'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nclass MatExpansionPanelHeaderBase {}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n  constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n    super();\n    this.panel = panel;\n    this._element = _element;\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    this._parentChangeSubscription = Subscription.EMPTY;\n    const accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0;\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n      return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n    }))).subscribe(() => this._changeDetectorRef.markForCheck());\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed.pipe(filter(() => panel._containsFocus())).subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n  /** Toggles the expanded state of the panel. */\n  _toggle() {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n  /** Gets whether the panel is expanded. */\n  _isExpanded() {\n    return this.panel.expanded;\n  }\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState() {\n    return this.panel._getExpandedState();\n  }\n  /** Gets the panel id. */\n  _getPanelId() {\n    return this.panel.id;\n  }\n  /** Gets the toggle position for the header. */\n  _getTogglePosition() {\n    return this.panel.togglePosition;\n  }\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle() {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight() {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n        return;\n    }\n  }\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin, options) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) {\n  return new (t || MatExpansionPanelHeader)(i0.ɵɵdirectiveInject(MatExpansionPanel, 1), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2$1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵinjectAttribute('tabindex'));\n};\nMatExpansionPanelHeader.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatExpansionPanelHeader,\n  selectors: [[\"mat-expansion-panel-header\"]],\n  hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"],\n  hostVars: 15,\n  hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() {\n        return ctx._toggle();\n      })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n      i0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\n      i0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    tabIndex: \"tabIndex\",\n    expandedHeight: \"expandedHeight\",\n    collapsedHeight: \"collapsedHeight\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 5,\n  vars: 1,\n  consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]],\n  template: function MatExpansionPanelHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c3);\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵprojection(3, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    }\n  },\n  directives: [i3.NgIf],\n  styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.indicatorRotate]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel-header',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['tabIndex'],\n      animations: [matExpansionAnimations.indicatorRotate],\n      host: {\n        'class': 'mat-expansion-panel-header mat-focus-indicator',\n        'role': 'button',\n        '[attr.id]': 'panel._headerId',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': '_getPanelId()',\n        '[attr.aria-expanded]': '_isExpanded()',\n        '[attr.aria-disabled]': 'panel.disabled',\n        '[class.mat-expanded]': '_isExpanded()',\n        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[style.height]': '_getHeaderHeight()',\n        '(click)': '_toggle()',\n        '(keydown)': '_keydown($event)'\n      },\n      template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n      styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatExpansionPanel,\n      decorators: [{\n        type: Host\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2$1.FocusMonitor\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    expandedHeight: [{\n      type: Input\n    }],\n    collapsedHeight: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {}\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) {\n  return new (t || MatExpansionPanelDescription)();\n};\nMatExpansionPanelDescription.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelDescription,\n  selectors: [[\"mat-panel-description\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-description\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-description',\n      host: {\n        class: 'mat-expansion-panel-header-description'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {}\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) {\n  return new (t || MatExpansionPanelTitle)();\n};\nMatExpansionPanelTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelTitle,\n  selectors: [[\"mat-panel-title\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-title\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-title',\n      host: {\n        class: 'mat-expansion-panel-header-title'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n  constructor() {\n    super(...arguments);\n    /** Headers belonging to this accordion. */\n    this._ownHeaders = new QueryList();\n    this._hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n    this.displayMode = 'default';\n    /** The position of the expansion indicator. */\n    this.togglePosition = 'after';\n  }\n  /** Whether the expansion indicator should be hidden. */\n  get hideToggle() {\n    return this._hideToggle;\n  }\n  set hideToggle(show) {\n    this._hideToggle = coerceBooleanProperty(show);\n  }\n  ngAfterContentInit() {\n    this._headers.changes.pipe(startWith(this._headers)).subscribe(headers => {\n      this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n      this._ownHeaders.notifyOnChanges();\n    });\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event) {\n    this._keyManager.onKeydown(event);\n  }\n  _handleHeaderFocus(header) {\n    this._keyManager.updateActiveItem(header);\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._ownHeaders.destroy();\n  }\n}\nMatAccordion.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAccordion_BaseFactory;\n  return function MatAccordion_Factory(t) {\n    return (ɵMatAccordion_BaseFactory || (ɵMatAccordion_BaseFactory = i0.ɵɵgetInheritedFactory(MatAccordion)))(t || MatAccordion);\n  };\n}();\nMatAccordion.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAccordion,\n  selectors: [[\"mat-accordion\"]],\n  contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-accordion\"],\n  hostVars: 2,\n  hostBindings: function MatAccordion_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    }\n  },\n  inputs: {\n    multi: \"multi\",\n    hideToggle: \"hideToggle\",\n    displayMode: \"displayMode\",\n    togglePosition: \"togglePosition\"\n  },\n  exportAs: [\"matAccordion\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-accordion',\n      exportAs: 'matAccordion',\n      inputs: ['multi'],\n      providers: [{\n        provide: MAT_ACCORDION,\n        useExisting: MatAccordion\n      }],\n      host: {\n        class: 'mat-accordion',\n        // Class binding which is only used by the test harness as there is no other\n        // way for the harness to detect if multiple panel support is enabled.\n        '[class.mat-accordion-multi]': 'this.multi'\n      }\n    }]\n  }], null, {\n    _headers: [{\n      type: ContentChildren,\n      args: [MatExpansionPanelHeader, {\n        descendants: true\n      }]\n    }],\n    hideToggle: [{\n      type: Input\n    }],\n    displayMode: [{\n      type: Input\n    }],\n    togglePosition: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {}\nMatExpansionModule.ɵfac = function MatExpansionModule_Factory(t) {\n  return new (t || MatExpansionModule)();\n};\nMatExpansionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatExpansionModule\n});\nMatExpansionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n      exports: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent],\n      declarations: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };","map":{"version":3,"names":["CdkAccordionItem","CdkAccordion","CdkAccordionModule","i2","TemplatePortal","PortalModule","i3","DOCUMENT","CommonModule","i0","InjectionToken","Directive","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","SkipSelf","Inject","Input","Output","ContentChild","ViewChild","Host","Attribute","QueryList","ContentChildren","NgModule","mixinTabIndex","MatCommonModule","coerceBooleanProperty","i2$1","FocusKeyManager","distinctUntilChanged","startWith","filter","take","ENTER","hasModifierKey","SPACE","ANIMATION_MODULE_TYPE","Subject","Subscription","EMPTY","merge","trigger","state","style","transition","animate","i1","_c0","MatExpansionPanel_ng_template_5_Template","rf","ctx","_c1","_c2","MatExpansionPanelHeader_span_4_Template","ɵɵelement","ctx_r0","ɵɵnextContext","ɵɵproperty","_getExpandedState","_c3","_c4","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","transform","bodyExpansion","height","visibility","MatExpansionPanelContent","constructor","_template","ɵfac","MatExpansionPanelContent_Factory","t","ɵɵdirectiveInject","TemplateRef","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","ɵsetClassMetadata","args","selector","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","accordion","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","x","y","fromState","toState","subscribe","event","emit","hideToggle","value","togglePosition","_togglePosition","_hasSpacing","expanded","displayMode","toggle","close","open","ngAfterContentInit","_lazyContent","opened","_portal","ngOnChanges","changes","next","ngOnDestroy","complete","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","MatExpansionPanel_Factory","ChangeDetectorRef","UniqueSelectionDispatcher","ViewContainerRef","ɵcmp","ɵɵdefineComponent","contentQueries","MatExpansionPanel_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatExpansionPanel_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatExpansionPanel_HostBindings","ɵɵclassProp","inputs","disabled","outputs","closed","expandedChange","exportAs","features","ɵɵProvidersFeature","provide","useValue","undefined","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatExpansionPanel_Template","ɵɵprojectionDef","ɵɵprojection","ɵɵelementStart","ɵɵlistener","MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener","$event","ɵɵtemplate","ɵɵelementEnd","ɵɵadvance","id","ɵɵattribute","directives","CdkPortalOutlet","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","providers","host","decorators","MatExpansionPanelActionRow","MatExpansionPanelActionRow_Factory","class","MatExpansionPanelHeaderBase","_MatExpansionPanelHeaderMixinBase","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","parseInt","markForCheck","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","unsubscribe","stopMonitoring","MatExpansionPanelHeader_Factory","ElementRef","FocusMonitor","ɵɵinjectAttribute","MatExpansionPanelHeader_HostBindings","MatExpansionPanelHeader_click_HostBindingHandler","MatExpansionPanelHeader_keydown_HostBindingHandler","ɵɵstyleProp","MatExpansionPanelHeader_Template","NgIf","MatExpansionPanelDescription","MatExpansionPanelDescription_Factory","MatExpansionPanelTitle","MatExpansionPanelTitle_Factory","MatAccordion","arguments","_ownHeaders","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","ɵMatAccordion_BaseFactory","MatAccordion_Factory","ɵɵgetInheritedFactory","MatAccordion_ContentQueries","MatAccordion_HostBindings","multi","useExisting","descendants","MatExpansionModule","MatExpansionModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["C:/Users/Mariosoft/Desktop/New folder/material-pro-angular-lite-master/material-pro-angular-lite-master/angular-13/node_modules/@angular/material/fesm2020/expansion.mjs"],"sourcesContent":["import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelContent, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelContent, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanel, deps: [{ token: MAT_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatExpansionPanel.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n        // to the same accordion.\n        { provide: MAT_ACCORDION, useValue: undefined },\n    ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], directives: [{ type: i2.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled', 'expanded'], outputs: ['opened', 'closed', 'expandedChange'], animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [MAT_ACCORDION]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { hideToggle: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelActionRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelActionRow, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nclass MatExpansionPanelHeaderBase {\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        super();\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelHeader, deps: [{ token: MatExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i2$1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });\nMatExpansionPanelHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: { tabIndex: \"tabIndex\", expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['tabIndex'], animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: MatExpansionPanel, decorators: [{\n                    type: Host\n                }] }, { type: i0.ElementRef }, { type: i2$1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelDescription.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelDescription, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelTitle, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    set hideToggle(show) {\n        this._hideToggle = coerceBooleanProperty(show);\n    }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._ownHeaders.destroy();\n    }\n}\nMatAccordion.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatAccordion.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAccordion, selector: \"mat-accordion\", inputs: { multi: \"multi\", hideToggle: \"hideToggle\", displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n        {\n            provide: MAT_ACCORDION,\n            useExisting: MatAccordion,\n        },\n    ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    inputs: ['multi'],\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatExpansionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, declarations: [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent], imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule], exports: [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent] });\nMatExpansionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    declarations: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}