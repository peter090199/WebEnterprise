{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/Services/Global/notifications.service\";\nexport let UsersComponent = /*#__PURE__*/(() => {\n  class UsersComponent {\n    constructor(dialog, notificationsService) {\n      this.dialog = dialog;\n      this.notificationsService = notificationsService;\n      this.searchKey = '';\n      this.placeHolder = 'Search';\n      this.isLoading = false;\n      this.displayedColumns = ['id', 'rolecode', 'description', 'created_by', 'updated_by', 'actions'];\n      this.dataSource = new MatTableDataSource([]);\n      this.roles = [];\n      this.pageSizeOptions = [5, 10, 25, 100];\n      this.success = false;\n    }\n    ngOnInit() {\n      this.getRoles();\n    }\n    applyFilter() {\n      this.dataSource.filter = this.searchKey.trim().toLocaleLowerCase();\n    }\n    clearSearch() {\n      this.searchKey = \"\";\n      this.applyFilter();\n    }\n    onClickNew() {\n      // const dialogConfig = new MatDialogConfig();\n      // dialogConfig.disableClose = true;\n      // dialogConfig.autoFocus = true;\n      // dialogConfig.width = '400px';\n      // const dialogRef = this.dialog.open(RoleUIComponent, dialogConfig);\n      // dialogRef.afterClosed().subscribe(result => {\n      //   if (result) {\n      //     this.getRoles(); // Refresh the table after dialog closure\n      //   }\n      // });\n    }\n    getRoles() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // try {\n        //   this.isLoading = true;\n        //     const response = await firstValueFrom(this.role.getRoles());\n        //     if (response.success)\n        //     {\n        //       this.isLoading = true;\n        //       this.success = true;\n        //       this.roles = response.message;\n        //        // Assign the fetched data\n        //       this.dataSource.data = this.roles;\n        //     } \n        //     else\n        //     {\n        //       console.error('Data roles unsuccessful');\n        //       this.success = false;\n        //       this.getRoles();\n        //     }\n        //     this.dataSource.paginator = this.paginator;\n        //     this.dataSource.sort = this.sort;\n        // } catch (error) {\n        //   console.error('Error fetching roles data:', error);\n        // } finally {\n        //   this.isLoading = false;\n        // }\n      });\n    }\n    delete(role) {\n      // this.notificationsService.popupWarning(role.rolecode,\" \"+\"Are you sure to delete this role?\").then((result) => {\n      //   if (result.value) \n      //   {\n      //     this.role.deleteData(role.id).subscribe({\n      //         next:(res)=>{\n      //           if(res.success === true)\n      //             {\n      //               this.notificationsService.toastrSuccess(res.message);\n      //               this.isLoading = false;\n      //             }\n      //             else{\n      //               this.notificationsService.toastrError(res.message);\n      //               this.isLoading = false;\n      //             }\n      //             this.getRoles();\n      //         },\n      //         error:(error)=>{\n      //           this.notificationsService.toastrError(error.error);\n      //           this.isLoading = false;\n      //         }\n      //     });\n      //   }\n      // });\n    }\n    edit(element) {\n      // const dialogRef = this.dialog.open(RoleUIComponent, {\n      //   width: '400px',\n      //   data: element || null\n      // });\n      // dialogRef.afterClosed().subscribe(result => {\n      //   if (result) {\n      //     this.getRoles();\n      //   }\n      // });\n    }\n  }\n  UsersComponent.ɵfac = function UsersComponent_Factory(t) {\n    return new (t || UsersComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.NotificationsService));\n  };\n  UsersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UsersComponent,\n    selectors: [[\"app-users\"]],\n    viewQuery: function UsersComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 5);\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    decls: 0,\n    vars: 0,\n    template: function UsersComponent_Template(rf, ctx) {},\n    styles: [\".container[_ngcontent-%COMP%]{width:100%;padding:26px;box-sizing:border-box}.mat-column-id[_ngcontent-%COMP%]{width:80px}.id-cell-container[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center}.id-text[_ngcontent-%COMP%]{flex:1;text-align:left}.search-div[_ngcontent-%COMP%]{display:flex;align-items:center;grid-gap:12px;gap:12px;flex-wrap:wrap;margin-top:0}.product-image[_ngcontent-%COMP%]{width:100px;height:40px;-o-object-fit:cover;object-fit:cover;border-radius:7px}.content-scrollable[_ngcontent-%COMP%]{overflow:auto;max-height:calc(100vh - 100px)}mat-progress-spinner[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}@media (max-width: 600px){.mat-column-id[_ngcontent-%COMP%]{width:60px}.mat-table[_ngcontent-%COMP%]{display:block;overflow-x:auto;white-space:nowrap}.id-cell-container[_ngcontent-%COMP%]{display:block}.id-text[_ngcontent-%COMP%]{margin-bottom:5px}}.container[_ngcontent-%COMP%]{width:100%;padding:16px;box-sizing:border-box;position:relative}.mat-table[_ngcontent-%COMP%]{width:100%}mat-footer-row[_ngcontent-%COMP%]{display:block}mat-table[_ngcontent-%COMP%]{display:block}.mat-footer-cell[_ngcontent-%COMP%]{text-align:center;padding:16px;color:#0000008a}.hide[_ngcontent-%COMP%]{display:none}.mat-paginator[_ngcontent-%COMP%]{display:block}.mat-footer-row.noData[_ngcontent-%COMP%]{display:table-row}\"]\n  });\n  return UsersComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}