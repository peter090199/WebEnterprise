{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"src/app/Services/Global/notifications.service\";\nimport * as i4 from \"src/app/Services/Menu/menu.service\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/divider\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/button\";\nfunction MenuUIComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 2);\n    i0.ɵɵelementStart(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Submenu Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-form-field\", 2);\n    i0.ɵɵelementStart(6, \"mat-label\");\n    i0.ɵɵtext(7, \"Submenu Icon\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"mat-form-field\", 2);\n    i0.ɵɵelementStart(10, \"mat-label\");\n    i0.ɵɵtext(11, \"Submenu Class\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-form-field\", 2);\n    i0.ɵɵelementStart(14, \"mat-label\");\n    i0.ɵɵtext(15, \"Submenu Routes\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"input\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"mat-form-field\", 2);\n    i0.ɵɵelementStart(18, \"mat-label\");\n    i0.ɵɵtext(19, \"Submenu Sort Order\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(20, \"input\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"mat-form-field\", 2);\n    i0.ɵɵelementStart(22, \"mat-label\");\n    i0.ɵɵtext(23, \"Submenu Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"mat-select\", 23);\n    i0.ɵɵelementStart(25, \"mat-option\", 10);\n    i0.ɵɵtext(26, \"Active\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"mat-option\", 11);\n    i0.ɵɵtext(28, \"Inactive\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n  }\n}\nexport let MenuUIComponent = /*#__PURE__*/(() => {\n  class MenuUIComponent {\n    constructor(fb, dialogRef, data, notificationService, menuService) {\n      this.fb = fb;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.notificationService = notificationService;\n      this.menuService = menuService;\n      this.btnSave = 'Save';\n      this.menuForm = this.fb.group({\n        desc_code: ['top_navigation', [Validators.required]],\n        description: ['', [Validators.required]],\n        icon: ['-', [Validators.required]],\n        class: ['-', [Validators.required]],\n        routes: ['', [Validators.required]],\n        sort: ['', [Validators.required, Validators.min(1)]],\n        status: ['A', [Validators.required]],\n        lines: this.fb.array([])\n      });\n    }\n    ngOnInit() {\n      // const lines = this.menuForm.get('lines') as FormArray;\n      // lines.push(this.createSubmenu());\n      // If editing, change the button text\n      if (this.data) {\n        this.btnSave = 'Update';\n      }\n    }\n    get lines() {\n      return this.menuForm.get('lines');\n    }\n    createSubmenu() {\n      return this.fb.group({\n        description: [''],\n        icon: [''],\n        class: [''],\n        routes: [''],\n        sort: ['', [Validators.min(1)]],\n        status: [''] // Default to Active\n      });\n    }\n    addSubmenu() {\n      this.lines.push(this.createSubmenu());\n    }\n    removeSubmenu(index) {\n      if (this.lines.length > 1) {\n        this.lines.removeAt(index);\n      }\n    }\n    onSubmit() {\n      // if (this.menuForm.valid) {\n      const menuData = this.menuForm.value;\n      console.log(menuData);\n      // Call your service to send the form data to backend\n      this.menuService.postData(menuData).subscribe(response => {\n        if (response.success) {\n          this.dialogRef.close(); // Close dialog if saved successfully\n        }\n      }, error => {\n        console.error('Error saving menu:', error);\n      });\n      // }\n    }\n    onSubmitx() {\n      if (this.menuForm.valid) {\n        this.dialogRef.close(this.menuForm.value);\n      }\n    }\n    onSubmitxx() {\n      if (this.menuForm.valid) {\n        const menu = this.menuForm.getRawValue();\n        //   this.loading = true;\n        if (this.btnSave === \"Save\") {\n          this.menuService.postData(menu).subscribe({\n            next: res => {\n              if (res.success === true) {\n                this.notificationService.toastrSuccess(res.message);\n                // this.ResetForm();\n                //  this.loading = false;\n              } else {\n                this.notificationService.toastrError(res.message);\n                //  this.loading = false; \n              }\n            },\n            error: error => {\n              //   this.success = false;\n              this.notificationService.toastrError(error.error);\n              //    this.loading = false; \n              // Set loading to false in case of error\n            }\n          });\n        }\n        // else if (this.btnSave === 'Update') {\n        //   this.roleService.putData(this.data.id, role).subscribe({\n        //     next: (res) => {\n        //       if(res.success === true)\n        //         {\n        //           this.notificationService.toastrSuccess(res.message);\n        //           this.ResetForm();\n        //           this.loading = true;\n        //         }\n        //         else{\n        //           this.notificationService.toastrWarning(res.message);\n        //           this.loading = false; \n        //         }\n        //     },\n        //     error: (err) => {\n        //       this.notificationService.toastrWarning(err.error);\n        //       this.loading = false;  // Set loading to false in case of error\n        //     },\n        //   });\n        // }\n      } else {\n        this.notificationService.toastrError(\"Please fill in the required fields.\");\n      }\n    }\n  }\n  MenuUIComponent.ɵfac = function MenuUIComponent_Factory(t) {\n    return new (t || MenuUIComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.NotificationsService), i0.ɵɵdirectiveInject(i4.MenuService));\n  };\n  MenuUIComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MenuUIComponent,\n    selectors: [[\"app-menu-ui\"]],\n    decls: 45,\n    vars: 5,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"form-container\", 3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"standard\", 1, \"full-width\"], [\"matInput\", \"\", \"placeholder\", \"Enter desc_code\", \"autocomplete\", \"off\", \"required\", \"\", \"formControlName\", \"desc_code\"], [\"matInput\", \"\", \"placeholder\", \"Enter Menu\", \"autocomplete\", \"off\", \"required\", \"\", \"formControlName\", \"description\"], [\"matInput\", \"\", \"placeholder\", \"Enter Icon\", \"autocomplete\", \"off\", \"required\", \"\", \"formControlName\", \"icon\"], [\"matInput\", \"\", \"placeholder\", \"Enter Class\", \"autocomplete\", \"off\", \"required\", \"\", \"formControlName\", \"class\"], [\"matInput\", \"\", \"placeholder\", \"Enter Routes\", \"autocomplete\", \"off\", \"required\", \"\", \"formControlName\", \"routes\"], [\"matInput\", \"\", \"type\", \"number\", \"placeholder\", \"Enter Sort Order\", \"required\", \"\", \"formControlName\", \"sort\"], [\"formControlName\", \"status\", \"required\", \"\"], [\"value\", \"A\"], [\"value\", \"I\"], [\"formArrayName\", \"lines\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"button-end\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"mat-dialog-close\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\"], [3, \"formGroupName\"], [\"matInput\", \"\", \"placeholder\", \"Enter Submenu Description\", \"formControlName\", \"description\"], [\"matInput\", \"\", \"placeholder\", \"Enter Submenu Icon\", \"formControlName\", \"icon\"], [\"matInput\", \"\", \"placeholder\", \"Enter Submenu Class\", \"formControlName\", \"class\"], [\"matInput\", \"\", \"placeholder\", \"Enter Submenu Routes\", \"formControlName\", \"routes\"], [\"matInput\", \"\", \"type\", \"number\", \"placeholder\", \"Enter Sort Order\", \"formControlName\", \"sort\"], [\"formControlName\", \"status\"]],\n    template: function MenuUIComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card-header\");\n        i0.ɵɵelementStart(1, \"h2\", 0);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"mat-divider\");\n        i0.ɵɵelementStart(4, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function MenuUIComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵelementStart(6, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(7, \"mat-label\");\n        i0.ɵɵtext(8, \"Desc Code\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(11, \"mat-label\");\n        i0.ɵɵtext(12, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(15, \"mat-label\");\n        i0.ɵɵtext(16, \"Icon\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(19, \"mat-label\");\n        i0.ɵɵtext(20, \"Class\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(23, \"mat-label\");\n        i0.ɵɵtext(24, \"Routes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(27, \"mat-label\");\n        i0.ɵɵtext(28, \"Sort Order\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(31, \"mat-label\");\n        i0.ɵɵtext(32, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"mat-select\", 9);\n        i0.ɵɵelementStart(34, \"mat-option\", 10);\n        i0.ɵɵtext(35, \"Active\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"mat-option\", 11);\n        i0.ɵɵtext(37, \"Inactive\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\", 12);\n        i0.ɵɵtemplate(39, MenuUIComponent_div_39_Template, 29, 1, \"div\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"mat-card-footer\", 14);\n        i0.ɵɵelementStart(41, \"button\", 15);\n        i0.ɵɵtext(42, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"button\", 16);\n        i0.ɵɵtext(44);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.btnSave, \" Menu and Submenu\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.menuForm);\n        i0.ɵɵadvance(35);\n        i0.ɵɵproperty(\"ngForOf\", ctx.lines.controls);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.btnSave);\n      }\n    },\n    directives: [i5.MatCardHeader, i2.MatDialogTitle, i6.MatDivider, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i5.MatCardContent, i7.MatFormField, i7.MatLabel, i8.MatInput, i1.DefaultValueAccessor, i1.RequiredValidator, i1.NgControlStatus, i1.FormControlName, i1.NumberValueAccessor, i9.MatSelect, i10.MatOption, i1.FormArrayName, i11.NgForOf, i5.MatCardFooter, i12.MatButton, i2.MatDialogClose, i1.FormGroupName],\n    styles: [\".form-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;height:490px}mat-card-content[_ngcontent-%COMP%]{margin-top:10px;flex-grow:1;overflow-y:auto;max-height:500px}\"]\n  });\n  return MenuUIComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}