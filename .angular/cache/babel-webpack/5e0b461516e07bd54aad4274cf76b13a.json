{"ast":null,"code":"/*!\n * ApexCharts v3.54.1\n * (c) 2018-2024 ApexCharts\n * Released under the MIT License.\n */\n\"use strict\";\n\nfunction t(t, e) {\n  (null == e || e > t.length) && (e = t.length);\n  for (var i = 0, a = Array(e); i < e; i++) a[i] = t[i];\n  return a;\n}\nfunction e(t) {\n  if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return t;\n}\nfunction i(t, e) {\n  if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction a(t, e) {\n  for (var i = 0; i < e.length; i++) {\n    var a = e[i];\n    a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(t, x(a.key), a);\n  }\n}\nfunction s(t, e, i) {\n  return e && a(t.prototype, e), i && a(t, i), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), t;\n}\nfunction r(t, e) {\n  var i = \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n  if (!i) {\n    if (Array.isArray(t) || (i = v(t)) || e && t && \"number\" == typeof t.length) {\n      i && (t = i);\n      var a = 0,\n        s = function () {};\n      return {\n        s: s,\n        n: function () {\n          return a >= t.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: t[a++]\n          };\n        },\n        e: function (t) {\n          throw t;\n        },\n        f: s\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var r,\n    o = !0,\n    n = !1;\n  return {\n    s: function () {\n      i = i.call(t);\n    },\n    n: function () {\n      var t = i.next();\n      return o = t.done, t;\n    },\n    e: function (t) {\n      n = !0, r = t;\n    },\n    f: function () {\n      try {\n        o || null == i.return || i.return();\n      } finally {\n        if (n) throw r;\n      }\n    }\n  };\n}\nfunction o(t) {\n  var i = c();\n  return function () {\n    var a,\n      s = l(t);\n    if (i) {\n      var r = l(this).constructor;\n      a = Reflect.construct(s, arguments, r);\n    } else a = s.apply(this, arguments);\n    return function (t, i) {\n      if (i && (\"object\" == typeof i || \"function\" == typeof i)) return i;\n      if (void 0 !== i) throw new TypeError(\"Derived constructors may only return object or undefined\");\n      return e(t);\n    }(this, a);\n  };\n}\nfunction n(t, e, i) {\n  return (e = x(e)) in t ? Object.defineProperty(t, e, {\n    value: i,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : t[e] = i, t;\n}\nfunction l(t) {\n  return l = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, l(t);\n}\nfunction h(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && u(t, e);\n}\nfunction c() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (c = function () {\n    return !!t;\n  })();\n}\nfunction d(t, e) {\n  var i = Object.keys(t);\n  if (Object.getOwnPropertySymbols) {\n    var a = Object.getOwnPropertySymbols(t);\n    e && (a = a.filter(function (e) {\n      return Object.getOwnPropertyDescriptor(t, e).enumerable;\n    })), i.push.apply(i, a);\n  }\n  return i;\n}\nfunction g(t) {\n  for (var e = 1; e < arguments.length; e++) {\n    var i = null != arguments[e] ? arguments[e] : {};\n    e % 2 ? d(Object(i), !0).forEach(function (e) {\n      n(t, e, i[e]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : d(Object(i)).forEach(function (e) {\n      Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e));\n    });\n  }\n  return t;\n}\nfunction u(t, e) {\n  return u = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, u(t, e);\n}\nfunction f(t, e) {\n  return function (t) {\n    if (Array.isArray(t)) return t;\n  }(t) || function (t, e) {\n    var i = null == t ? null : \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n    if (null != i) {\n      var a,\n        s,\n        r,\n        o,\n        n = [],\n        l = !0,\n        h = !1;\n      try {\n        if (r = (i = i.call(t)).next, 0 === e) {\n          if (Object(i) !== i) return;\n          l = !1;\n        } else for (; !(l = (a = r.call(i)).done) && (n.push(a.value), n.length !== e); l = !0);\n      } catch (t) {\n        h = !0, s = t;\n      } finally {\n        try {\n          if (!l && null != i.return && (o = i.return(), Object(o) !== o)) return;\n        } finally {\n          if (h) throw s;\n        }\n      }\n      return n;\n    }\n  }(t, e) || v(t, e) || function () {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }();\n}\nfunction p(e) {\n  return function (e) {\n    if (Array.isArray(e)) return t(e);\n  }(e) || function (t) {\n    if (\"undefined\" != typeof Symbol && null != t[Symbol.iterator] || null != t[\"@@iterator\"]) return Array.from(t);\n  }(e) || v(e) || function () {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }();\n}\nfunction x(t) {\n  var e = function (t, e) {\n    if (\"object\" != typeof t || !t) return t;\n    var i = t[Symbol.toPrimitive];\n    if (void 0 !== i) {\n      var a = i.call(t, e || \"default\");\n      if (\"object\" != typeof a) return a;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === e ? String : Number)(t);\n  }(t, \"string\");\n  return \"symbol\" == typeof e ? e : e + \"\";\n}\nfunction b(t) {\n  return b = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {\n    return typeof t;\n  } : function (t) {\n    return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n  }, b(t);\n}\nfunction v(e, i) {\n  if (e) {\n    if (\"string\" == typeof e) return t(e, i);\n    var a = {}.toString.call(e).slice(8, -1);\n    return \"Object\" === a && e.constructor && (a = e.constructor.name), \"Map\" === a || \"Set\" === a ? Array.from(e) : \"Arguments\" === a || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a) ? t(e, i) : void 0;\n  }\n}\nvar m = function () {\n    function t() {\n      i(this, t);\n    }\n    return s(t, [{\n      key: \"shadeRGBColor\",\n      value: function (t, e) {\n        var i = e.split(\",\"),\n          a = t < 0 ? 0 : 255,\n          s = t < 0 ? -1 * t : t,\n          r = parseInt(i[0].slice(4), 10),\n          o = parseInt(i[1], 10),\n          n = parseInt(i[2], 10);\n        return \"rgb(\" + (Math.round((a - r) * s) + r) + \",\" + (Math.round((a - o) * s) + o) + \",\" + (Math.round((a - n) * s) + n) + \")\";\n      }\n    }, {\n      key: \"shadeHexColor\",\n      value: function (t, e) {\n        var i = parseInt(e.slice(1), 16),\n          a = t < 0 ? 0 : 255,\n          s = t < 0 ? -1 * t : t,\n          r = i >> 16,\n          o = i >> 8 & 255,\n          n = 255 & i;\n        return \"#\" + (16777216 + 65536 * (Math.round((a - r) * s) + r) + 256 * (Math.round((a - o) * s) + o) + (Math.round((a - n) * s) + n)).toString(16).slice(1);\n      }\n    }, {\n      key: \"shadeColor\",\n      value: function (e, i) {\n        return t.isColorHex(i) ? this.shadeHexColor(e, i) : this.shadeRGBColor(e, i);\n      }\n    }], [{\n      key: \"bind\",\n      value: function (t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      }\n    }, {\n      key: \"isObject\",\n      value: function (t) {\n        return t && \"object\" === b(t) && !Array.isArray(t) && null != t;\n      }\n    }, {\n      key: \"is\",\n      value: function (t, e) {\n        return Object.prototype.toString.call(e) === \"[object \" + t + \"]\";\n      }\n    }, {\n      key: \"listToArray\",\n      value: function (t) {\n        var e,\n          i = [];\n        for (e = 0; e < t.length; e++) i[e] = t[e];\n        return i;\n      }\n    }, {\n      key: \"extend\",\n      value: function (t, e) {\n        var i = this;\n        \"function\" != typeof Object.assign && (Object.assign = function (t) {\n          if (null == t) throw new TypeError(\"Cannot convert undefined or null to object\");\n          for (var e = Object(t), i = 1; i < arguments.length; i++) {\n            var a = arguments[i];\n            if (null != a) for (var s in a) a.hasOwnProperty(s) && (e[s] = a[s]);\n          }\n          return e;\n        });\n        var a = Object.assign({}, t);\n        return this.isObject(t) && this.isObject(e) && Object.keys(e).forEach(function (s) {\n          i.isObject(e[s]) && s in t ? a[s] = i.extend(t[s], e[s]) : Object.assign(a, n({}, s, e[s]));\n        }), a;\n      }\n    }, {\n      key: \"extendArray\",\n      value: function (e, i) {\n        var a = [];\n        return e.map(function (e) {\n          a.push(t.extend(i, e));\n        }), e = a;\n      }\n    }, {\n      key: \"monthMod\",\n      value: function (t) {\n        return t % 12;\n      }\n    }, {\n      key: \"clone\",\n      value: function (e) {\n        if (t.is(\"Array\", e)) {\n          for (var i = [], a = 0; a < e.length; a++) i[a] = this.clone(e[a]);\n          return i;\n        }\n        if (t.is(\"Null\", e)) return null;\n        if (t.is(\"Date\", e)) return e;\n        if (\"object\" === b(e)) {\n          var s = {};\n          for (var r in e) e.hasOwnProperty(r) && (s[r] = this.clone(e[r]));\n          return s;\n        }\n        return e;\n      }\n    }, {\n      key: \"log10\",\n      value: function (t) {\n        return Math.log(t) / Math.LN10;\n      }\n    }, {\n      key: \"roundToBase10\",\n      value: function (t) {\n        return Math.pow(10, Math.floor(Math.log10(t)));\n      }\n    }, {\n      key: \"roundToBase\",\n      value: function (t, e) {\n        return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));\n      }\n    }, {\n      key: \"parseNumber\",\n      value: function (t) {\n        return null === t ? t : parseFloat(t);\n      }\n    }, {\n      key: \"stripNumber\",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;\n        return Number.isInteger(t) ? t : parseFloat(t.toPrecision(e));\n      }\n    }, {\n      key: \"randomId\",\n      value: function () {\n        return (Math.random() + 1).toString(36).substring(4);\n      }\n    }, {\n      key: \"noExponents\",\n      value: function (t) {\n        var e = String(t).split(/[eE]/);\n        if (1 === e.length) return e[0];\n        var i = \"\",\n          a = t < 0 ? \"-\" : \"\",\n          s = e[0].replace(\".\", \"\"),\n          r = Number(e[1]) + 1;\n        if (r < 0) {\n          for (i = a + \"0.\"; r++;) i += \"0\";\n          return i + s.replace(/^-/, \"\");\n        }\n        for (r -= s.length; r--;) i += \"0\";\n        return s + i;\n      }\n    }, {\n      key: \"getDimensions\",\n      value: function (t) {\n        var e = getComputedStyle(t, null),\n          i = t.clientHeight,\n          a = t.clientWidth;\n        return i -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom), [a -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight), i];\n      }\n    }, {\n      key: \"getBoundingClientRect\",\n      value: function (t) {\n        var e = t.getBoundingClientRect();\n        return {\n          top: e.top,\n          right: e.right,\n          bottom: e.bottom,\n          left: e.left,\n          width: t.clientWidth,\n          height: t.clientHeight,\n          x: e.left,\n          y: e.top\n        };\n      }\n    }, {\n      key: \"getLargestStringFromArr\",\n      value: function (t) {\n        return t.reduce(function (t, e) {\n          return Array.isArray(e) && (e = e.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          })), t.length > e.length ? t : e;\n        }, 0);\n      }\n    }, {\n      key: \"hexToRgba\",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"#999999\",\n          e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;\n        \"#\" !== t.substring(0, 1) && (t = \"#999999\");\n        var i = t.replace(\"#\", \"\");\n        i = i.match(new RegExp(\"(.{\" + i.length / 3 + \"})\", \"g\"));\n        for (var a = 0; a < i.length; a++) i[a] = parseInt(1 === i[a].length ? i[a] + i[a] : i[a], 16);\n        return void 0 !== e && i.push(e), \"rgba(\" + i.join(\",\") + \")\";\n      }\n    }, {\n      key: \"getOpacityFromRGBA\",\n      value: function (t) {\n        return parseFloat(t.replace(/^.*,(.+)\\)/, \"$1\"));\n      }\n    }, {\n      key: \"rgb2hex\",\n      value: function (t) {\n        return (t = t.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)) && 4 === t.length ? \"#\" + (\"0\" + parseInt(t[1], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[2], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[3], 10).toString(16)).slice(-2) : \"\";\n      }\n    }, {\n      key: \"isColorHex\",\n      value: function (t) {\n        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t);\n      }\n    }, {\n      key: \"getPolygonPos\",\n      value: function (t, e) {\n        for (var i = [], a = 2 * Math.PI / e, s = 0; s < e; s++) {\n          var r = {};\n          r.x = t * Math.sin(s * a), r.y = -t * Math.cos(s * a), i.push(r);\n        }\n        return i;\n      }\n    }, {\n      key: \"polarToCartesian\",\n      value: function (t, e, i, a) {\n        var s = (a - 90) * Math.PI / 180;\n        return {\n          x: t + i * Math.cos(s),\n          y: e + i * Math.sin(s)\n        };\n      }\n    }, {\n      key: \"escapeString\",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"x\",\n          i = t.toString().slice();\n        return i = i.replace(/[` ~!@#$%^&*()|+\\=?;:'\",.<>{}[\\]\\\\/]/gi, e);\n      }\n    }, {\n      key: \"negToZero\",\n      value: function (t) {\n        return t < 0 ? 0 : t;\n      }\n    }, {\n      key: \"moveIndexInArray\",\n      value: function (t, e, i) {\n        if (i >= t.length) for (var a = i - t.length + 1; a--;) t.push(void 0);\n        return t.splice(i, 0, t.splice(e, 1)[0]), t;\n      }\n    }, {\n      key: \"extractNumber\",\n      value: function (t) {\n        return parseFloat(t.replace(/[^\\d.]*/g, \"\"));\n      }\n    }, {\n      key: \"findAncestor\",\n      value: function (t, e) {\n        for (; (t = t.parentElement) && !t.classList.contains(e););\n        return t;\n      }\n    }, {\n      key: \"setELstyles\",\n      value: function (t, e) {\n        for (var i in e) e.hasOwnProperty(i) && (t.style.key = e[i]);\n      }\n    }, {\n      key: \"preciseAddition\",\n      value: function (t, e) {\n        var i = (String(t).split(\".\")[1] || \"\").length,\n          a = (String(e).split(\".\")[1] || \"\").length,\n          s = Math.pow(10, Math.max(i, a));\n        return (Math.round(t * s) + Math.round(e * s)) / s;\n      }\n    }, {\n      key: \"isNumber\",\n      value: function (t) {\n        return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10));\n      }\n    }, {\n      key: \"isFloat\",\n      value: function (t) {\n        return Number(t) === t && t % 1 != 0;\n      }\n    }, {\n      key: \"isSafari\",\n      value: function () {\n        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n      }\n    }, {\n      key: \"isFirefox\",\n      value: function () {\n        return navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n      }\n    }, {\n      key: \"isMsEdge\",\n      value: function () {\n        var t = window.navigator.userAgent,\n          e = t.indexOf(\"Edge/\");\n        return e > 0 && parseInt(t.substring(e + 5, t.indexOf(\".\", e)), 10);\n      }\n    }, {\n      key: \"getGCD\",\n      value: function (t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7,\n          a = Math.pow(10, i - Math.floor(Math.log10(Math.max(t, e))));\n        for (t = Math.round(Math.abs(t) * a), e = Math.round(Math.abs(e) * a); e;) {\n          var s = e;\n          e = t % e, t = s;\n        }\n        return t / a;\n      }\n    }, {\n      key: \"getPrimeFactors\",\n      value: function (t) {\n        for (var e = [], i = 2; t >= 2;) t % i == 0 ? (e.push(i), t /= i) : i++;\n        return e;\n      }\n    }, {\n      key: \"mod\",\n      value: function (t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 7,\n          a = Math.pow(10, i - Math.floor(Math.log10(Math.max(t, e))));\n        return (t = Math.round(Math.abs(t) * a)) % (e = Math.round(Math.abs(e) * a)) / a;\n      }\n    }]), t;\n  }(),\n  y = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.setEasingFunctions();\n    }\n    return s(t, [{\n      key: \"setEasingFunctions\",\n      value: function () {\n        var t;\n        if (!this.w.globals.easing) {\n          switch (this.w.config.chart.animations.easing) {\n            case \"linear\":\n              t = \"-\";\n              break;\n            case \"easein\":\n              t = \"<\";\n              break;\n            case \"easeout\":\n              t = \">\";\n              break;\n            case \"easeinout\":\n            default:\n              t = \"<>\";\n              break;\n            case \"swing\":\n              t = function (t) {\n                var e = 1.70158;\n                return (t -= 1) * t * ((e + 1) * t + e) + 1;\n              };\n              break;\n            case \"bounce\":\n              t = function (t) {\n                return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n              };\n              break;\n            case \"elastic\":\n              t = function (t) {\n                return t === !!t ? t : Math.pow(2, -10 * t) * Math.sin((t - .075) * (2 * Math.PI) / .3) + 1;\n              };\n          }\n          this.w.globals.easing = t;\n        }\n      }\n    }, {\n      key: \"animateLine\",\n      value: function (t, e, i, a) {\n        t.attr(e).animate(a).attr(i);\n      }\n    }, {\n      key: \"animateMarker\",\n      value: function (t, e, i, a) {\n        t.attr({\n          opacity: 0\n        }).animate(e, i).attr({\n          opacity: 1\n        }).afterAll(function () {\n          a();\n        });\n      }\n    }, {\n      key: \"animateRect\",\n      value: function (t, e, i, a, s) {\n        t.attr(e).animate(a).attr(i).afterAll(function () {\n          return s();\n        });\n      }\n    }, {\n      key: \"animatePathsGradually\",\n      value: function (t) {\n        var e = t.el,\n          i = t.realIndex,\n          a = t.j,\n          s = t.fill,\n          r = t.pathFrom,\n          o = t.pathTo,\n          n = t.speed,\n          l = t.delay,\n          h = this.w,\n          c = 0;\n        h.config.chart.animations.animateGradually.enabled && (c = h.config.chart.animations.animateGradually.delay), h.config.chart.animations.dynamicAnimation.enabled && h.globals.dataChanged && \"bar\" !== h.config.chart.type && (c = 0), this.morphSVG(e, i, a, \"line\" !== h.config.chart.type || h.globals.comboCharts ? s : \"stroke\", r, o, n, l * c);\n      }\n    }, {\n      key: \"showDelayedElements\",\n      value: function () {\n        this.w.globals.delayedElements.forEach(function (t) {\n          var e = t.el;\n          e.classList.remove(\"apexcharts-element-hidden\"), e.classList.add(\"apexcharts-hidden-element-shown\");\n        });\n      }\n    }, {\n      key: \"animationCompleted\",\n      value: function (t) {\n        var e = this.w;\n        e.globals.animationEnded || (e.globals.animationEnded = !0, this.showDelayedElements(), \"function\" == typeof e.config.chart.events.animationEnd && e.config.chart.events.animationEnd(this.ctx, {\n          el: t,\n          w: e\n        }));\n      }\n    }, {\n      key: \"morphSVG\",\n      value: function (t, e, i, a, s, r, o, n) {\n        var l = this,\n          h = this.w;\n        s || (s = t.attr(\"pathFrom\")), r || (r = t.attr(\"pathTo\"));\n        var c = function (t) {\n          return \"radar\" === h.config.chart.type && (o = 1), \"M 0 \".concat(h.globals.gridHeight);\n        };\n        (!s || s.indexOf(\"undefined\") > -1 || s.indexOf(\"NaN\") > -1) && (s = c()), (!r || r.indexOf(\"undefined\") > -1 || r.indexOf(\"NaN\") > -1) && (r = c()), h.globals.shouldAnimate || (o = 1), t.plot(s).animate(1, h.globals.easing, n).plot(s).animate(o, h.globals.easing, n).plot(r).afterAll(function () {\n          m.isNumber(i) ? i === h.globals.series[h.globals.maxValsInArrayIndex].length - 2 && h.globals.shouldAnimate && l.animationCompleted(t) : \"none\" !== a && h.globals.shouldAnimate && (!h.globals.comboCharts && e === h.globals.series.length - 1 || h.globals.comboCharts) && l.animationCompleted(t), l.showDelayedElements();\n        });\n      }\n    }]), t;\n  }(),\n  w = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"getDefaultFilter\",\n      value: function (t, e) {\n        var i = this.w;\n        t.unfilter(!0), new window.SVG.Filter().size(\"120%\", \"180%\", \"-5%\", \"-40%\"), \"none\" !== i.config.states.normal.filter ? this.applyFilter(t, e, i.config.states.normal.filter.type, i.config.states.normal.filter.value) : i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);\n      }\n    }, {\n      key: \"addNormalFilter\",\n      value: function (t, e) {\n        var i = this.w;\n        i.config.chart.dropShadow.enabled && !t.node.classList.contains(\"apexcharts-marker\") && this.dropShadow(t, i.config.chart.dropShadow, e);\n      }\n    }, {\n      key: \"addLightenFilter\",\n      value: function (t, e, i) {\n        var a = this,\n          s = this.w,\n          r = i.intensity;\n        t.unfilter(!0);\n        new window.SVG.Filter();\n        t.filter(function (t) {\n          var i = s.config.chart.dropShadow;\n          (i.enabled ? a.addShadow(t, e, i) : t).componentTransfer({\n            rgb: {\n              type: \"linear\",\n              slope: 1.5,\n              intercept: r\n            }\n          });\n        }), t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node);\n      }\n    }, {\n      key: \"addDarkenFilter\",\n      value: function (t, e, i) {\n        var a = this,\n          s = this.w,\n          r = i.intensity;\n        t.unfilter(!0);\n        new window.SVG.Filter();\n        t.filter(function (t) {\n          var i = s.config.chart.dropShadow;\n          (i.enabled ? a.addShadow(t, e, i) : t).componentTransfer({\n            rgb: {\n              type: \"linear\",\n              slope: r\n            }\n          });\n        }), t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node);\n      }\n    }, {\n      key: \"applyFilter\",\n      value: function (t, e, i) {\n        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5;\n        switch (i) {\n          case \"none\":\n            this.addNormalFilter(t, e);\n            break;\n          case \"lighten\":\n            this.addLightenFilter(t, e, {\n              intensity: a\n            });\n            break;\n          case \"darken\":\n            this.addDarkenFilter(t, e, {\n              intensity: a\n            });\n        }\n      }\n    }, {\n      key: \"addShadow\",\n      value: function (t, e, i) {\n        var a,\n          s = this.w,\n          r = i.blur,\n          o = i.top,\n          n = i.left,\n          l = i.color,\n          h = i.opacity;\n        if ((null === (a = s.config.chart.dropShadow.enabledOnSeries) || void 0 === a ? void 0 : a.length) > 0 && -1 === s.config.chart.dropShadow.enabledOnSeries.indexOf(e)) return t;\n        var c = t.flood(Array.isArray(l) ? l[e] : l, h).composite(t.sourceAlpha, \"in\").offset(n, o).gaussianBlur(r).merge(t.source);\n        return t.blend(t.source, c);\n      }\n    }, {\n      key: \"dropShadow\",\n      value: function (t, e) {\n        var i,\n          a,\n          s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n          r = e.top,\n          o = e.left,\n          n = e.blur,\n          l = e.color,\n          h = e.opacity,\n          c = e.noUserSpaceOnUse,\n          d = this.w;\n        if (t.unfilter(!0), m.isMsEdge() && \"radialBar\" === d.config.chart.type) return t;\n        if ((null === (i = d.config.chart.dropShadow.enabledOnSeries) || void 0 === i ? void 0 : i.length) > 0 && -1 === (null === (a = d.config.chart.dropShadow.enabledOnSeries) || void 0 === a ? void 0 : a.indexOf(s))) return t;\n        return l = Array.isArray(l) ? l[s] : l, t.filter(function (t) {\n          var e = null;\n          e = m.isSafari() || m.isFirefox() || m.isMsEdge() ? t.flood(l, h).composite(t.sourceAlpha, \"in\").offset(o, r).gaussianBlur(n) : t.flood(l, h).composite(t.sourceAlpha, \"in\").offset(o, r).gaussianBlur(n).merge(t.source), t.blend(t.source, e);\n        }), c || t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node), t;\n      }\n    }, {\n      key: \"setSelectionFilter\",\n      value: function (t, e, i) {\n        var a = this.w;\n        if (void 0 !== a.globals.selectedDataPoints[e] && a.globals.selectedDataPoints[e].indexOf(i) > -1) {\n          t.node.setAttribute(\"selected\", !0);\n          var s = a.config.states.active.filter;\n          \"none\" !== s && this.applyFilter(t, e, s.type, s.value);\n        }\n      }\n    }, {\n      key: \"_scaleFilterSize\",\n      value: function (t) {\n        !function (e) {\n          for (var i in e) e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n        }({\n          width: \"200%\",\n          height: \"200%\",\n          x: \"-50%\",\n          y: \"-50%\"\n        });\n      }\n    }]), t;\n  }(),\n  k = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"roundPathCorners\",\n      value: function (t, e) {\n        function i(t, e, i) {\n          var s = e.x - t.x,\n            r = e.y - t.y,\n            o = Math.sqrt(s * s + r * r);\n          return a(t, e, Math.min(1, i / o));\n        }\n        function a(t, e, i) {\n          return {\n            x: t.x + (e.x - t.x) * i,\n            y: t.y + (e.y - t.y) * i\n          };\n        }\n        function s(t, e) {\n          t.length > 2 && (t[t.length - 2] = e.x, t[t.length - 1] = e.y);\n        }\n        function r(t) {\n          return {\n            x: parseFloat(t[t.length - 2]),\n            y: parseFloat(t[t.length - 1])\n          };\n        }\n        t.indexOf(\"NaN\") > -1 && (t = \"\");\n        var o = t.split(/[,\\s]/).reduce(function (t, e) {\n            var i = e.match(\"([a-zA-Z])(.+)\");\n            return i ? (t.push(i[1]), t.push(i[2])) : t.push(e), t;\n          }, []).reduce(function (t, e) {\n            return parseFloat(e) == e && t.length ? t[t.length - 1].push(e) : t.push([e]), t;\n          }, []),\n          n = [];\n        if (o.length > 1) {\n          var l = r(o[0]),\n            h = null;\n          \"Z\" == o[o.length - 1][0] && o[0].length > 2 && (h = [\"L\", l.x, l.y], o[o.length - 1] = h), n.push(o[0]);\n          for (var c = 1; c < o.length; c++) {\n            var d = n[n.length - 1],\n              g = o[c],\n              u = g == h ? o[1] : o[c + 1];\n            if (u && d && d.length > 2 && \"L\" == g[0] && u.length > 2 && \"L\" == u[0]) {\n              var f,\n                p,\n                x = r(d),\n                b = r(g),\n                v = r(u);\n              f = i(b, x, e), p = i(b, v, e), s(g, f), g.origPoint = b, n.push(g);\n              var m = a(f, b, .5),\n                y = a(b, p, .5),\n                w = [\"C\", m.x, m.y, y.x, y.y, p.x, p.y];\n              w.origPoint = b, n.push(w);\n            } else n.push(g);\n          }\n          if (h) {\n            var k = r(n[n.length - 1]);\n            n.push([\"Z\"]), s(n[0], k);\n          }\n        } else n = o;\n        return n.reduce(function (t, e) {\n          return t + e.join(\" \") + \" \";\n        }, \"\");\n      }\n    }, {\n      key: \"drawLine\",\n      value: function (t, e, i, a) {\n        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : \"#a8a8a8\",\n          r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,\n          o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,\n          n = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : \"butt\";\n        return this.w.globals.dom.Paper.line().attr({\n          x1: t,\n          y1: e,\n          x2: i,\n          y2: a,\n          stroke: s,\n          \"stroke-dasharray\": r,\n          \"stroke-width\": o,\n          \"stroke-linecap\": n\n        });\n      }\n    }, {\n      key: \"drawRect\",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n          e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n          i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n          a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n          s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,\n          r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"#fefefe\",\n          o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1,\n          n = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,\n          l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,\n          h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,\n          c = this.w.globals.dom.Paper.rect();\n        return c.attr({\n          x: t,\n          y: e,\n          width: i > 0 ? i : 0,\n          height: a > 0 ? a : 0,\n          rx: s,\n          ry: s,\n          opacity: o,\n          \"stroke-width\": null !== n ? n : 0,\n          stroke: null !== l ? l : \"none\",\n          \"stroke-dasharray\": h\n        }), c.node.setAttribute(\"fill\", r), c;\n      }\n    }, {\n      key: \"drawPolygon\",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"#e1e1e1\",\n          i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,\n          a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"none\";\n        return this.w.globals.dom.Paper.polygon(t).attr({\n          fill: a,\n          stroke: e,\n          \"stroke-width\": i\n        });\n      }\n    }, {\n      key: \"drawCircle\",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n        t < 0 && (t = 0);\n        var i = this.w.globals.dom.Paper.circle(2 * t);\n        return null !== e && i.attr(e), i;\n      }\n    }, {\n      key: \"drawPath\",\n      value: function (t) {\n        var e = t.d,\n          i = void 0 === e ? \"\" : e,\n          a = t.stroke,\n          s = void 0 === a ? \"#a8a8a8\" : a,\n          r = t.strokeWidth,\n          o = void 0 === r ? 1 : r,\n          n = t.fill,\n          l = t.fillOpacity,\n          h = void 0 === l ? 1 : l,\n          c = t.strokeOpacity,\n          d = void 0 === c ? 1 : c,\n          g = t.classes,\n          u = t.strokeLinecap,\n          f = void 0 === u ? null : u,\n          p = t.strokeDashArray,\n          x = void 0 === p ? 0 : p,\n          b = this.w;\n        return null === f && (f = b.config.stroke.lineCap), (i.indexOf(\"undefined\") > -1 || i.indexOf(\"NaN\") > -1) && (i = \"M 0 \".concat(b.globals.gridHeight)), b.globals.dom.Paper.path(i).attr({\n          fill: n,\n          \"fill-opacity\": h,\n          stroke: s,\n          \"stroke-opacity\": d,\n          \"stroke-linecap\": f,\n          \"stroke-width\": o,\n          \"stroke-dasharray\": x,\n          class: g\n        });\n      }\n    }, {\n      key: \"group\",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n          e = this.w.globals.dom.Paper.group();\n        return null !== t && e.attr(t), e;\n      }\n    }, {\n      key: \"move\",\n      value: function (t, e) {\n        var i = [\"M\", t, e].join(\" \");\n        return i;\n      }\n    }, {\n      key: \"line\",\n      value: function (t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n          a = null;\n        return null === i ? a = [\" L\", t, e].join(\" \") : \"H\" === i ? a = [\" H\", t].join(\" \") : \"V\" === i && (a = [\" V\", e].join(\" \")), a;\n      }\n    }, {\n      key: \"curve\",\n      value: function (t, e, i, a, s, r) {\n        var o = [\"C\", t, e, i, a, s, r].join(\" \");\n        return o;\n      }\n    }, {\n      key: \"quadraticCurve\",\n      value: function (t, e, i, a) {\n        return [\"Q\", t, e, i, a].join(\" \");\n      }\n    }, {\n      key: \"arc\",\n      value: function (t, e, i, a, s, r, o) {\n        var n = \"A\";\n        arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (n = \"a\");\n        var l = [n, t, e, i, a, s, r, o].join(\" \");\n        return l;\n      }\n    }, {\n      key: \"renderPaths\",\n      value: function (t) {\n        var e,\n          i = t.j,\n          a = t.realIndex,\n          s = t.pathFrom,\n          r = t.pathTo,\n          o = t.stroke,\n          n = t.strokeWidth,\n          l = t.strokeLinecap,\n          h = t.fill,\n          c = t.animationDelay,\n          d = t.initialSpeed,\n          u = t.dataChangeSpeed,\n          f = t.className,\n          p = t.chartType,\n          x = t.shouldClipToGrid,\n          b = void 0 === x || x,\n          v = t.bindEventsOnPaths,\n          m = void 0 === v || v,\n          k = t.drawShadow,\n          A = void 0 === k || k,\n          S = this.w,\n          C = new w(this.ctx),\n          L = new y(this.ctx),\n          P = this.w.config.chart.animations.enabled,\n          M = P && this.w.config.chart.animations.dynamicAnimation.enabled,\n          I = !!(P && !S.globals.resized || M && S.globals.dataChanged && S.globals.shouldAnimate);\n        I ? e = s : (e = r, S.globals.animationEnded = !0);\n        var T = S.config.stroke.dashArray,\n          z = 0;\n        z = Array.isArray(T) ? T[a] : S.config.stroke.dashArray;\n        var X = this.drawPath({\n          d: e,\n          stroke: o,\n          strokeWidth: n,\n          fill: h,\n          fillOpacity: 1,\n          classes: f,\n          strokeLinecap: l,\n          strokeDashArray: z\n        });\n        if (X.attr(\"index\", a), b && (\"bar\" === p && !S.globals.isHorizontal || S.globals.comboCharts ? X.attr({\n          \"clip-path\": \"url(#gridRectBarMask\".concat(S.globals.cuid, \")\")\n        }) : X.attr({\n          \"clip-path\": \"url(#gridRectMask\".concat(S.globals.cuid, \")\")\n        })), \"none\" !== S.config.states.normal.filter.type) C.getDefaultFilter(X, a);else if (S.config.chart.dropShadow.enabled && A) {\n          var E = S.config.chart.dropShadow;\n          C.dropShadow(X, E, a);\n        }\n        m && (X.node.addEventListener(\"mouseenter\", this.pathMouseEnter.bind(this, X)), X.node.addEventListener(\"mouseleave\", this.pathMouseLeave.bind(this, X)), X.node.addEventListener(\"mousedown\", this.pathMouseDown.bind(this, X))), X.attr({\n          pathTo: r,\n          pathFrom: s\n        });\n        var Y = {\n          el: X,\n          j: i,\n          realIndex: a,\n          pathFrom: s,\n          pathTo: r,\n          fill: h,\n          strokeWidth: n,\n          delay: c\n        };\n        return !P || S.globals.resized || S.globals.dataChanged ? !S.globals.resized && S.globals.dataChanged || L.showDelayedElements() : L.animatePathsGradually(g(g({}, Y), {}, {\n          speed: d\n        })), S.globals.dataChanged && M && I && L.animatePathsGradually(g(g({}, Y), {}, {\n          speed: u\n        })), X;\n      }\n    }, {\n      key: \"drawPattern\",\n      value: function (t, e, i) {\n        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"#a8a8a8\",\n          s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;\n        return this.w.globals.dom.Paper.pattern(e, i, function (r) {\n          \"horizontalLines\" === t ? r.line(0, 0, i, 0).stroke({\n            color: a,\n            width: s + 1\n          }) : \"verticalLines\" === t ? r.line(0, 0, 0, e).stroke({\n            color: a,\n            width: s + 1\n          }) : \"slantedLines\" === t ? r.line(0, 0, e, i).stroke({\n            color: a,\n            width: s\n          }) : \"squares\" === t ? r.rect(e, i).fill(\"none\").stroke({\n            color: a,\n            width: s\n          }) : \"circles\" === t && r.circle(e).fill(\"none\").stroke({\n            color: a,\n            width: s\n          });\n        });\n      }\n    }, {\n      key: \"drawGradient\",\n      value: function (t, e, i, a, s) {\n        var r,\n          o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,\n          n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,\n          l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,\n          h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,\n          c = this.w;\n        e.length < 9 && 0 === e.indexOf(\"#\") && (e = m.hexToRgba(e, a)), i.length < 9 && 0 === i.indexOf(\"#\") && (i = m.hexToRgba(i, s));\n        var d = 0,\n          g = 1,\n          u = 1,\n          f = null;\n        null !== n && (d = void 0 !== n[0] ? n[0] / 100 : 0, g = void 0 !== n[1] ? n[1] / 100 : 1, u = void 0 !== n[2] ? n[2] / 100 : 1, f = void 0 !== n[3] ? n[3] / 100 : null);\n        var p = !(\"donut\" !== c.config.chart.type && \"pie\" !== c.config.chart.type && \"polarArea\" !== c.config.chart.type && \"bubble\" !== c.config.chart.type);\n        if (r = null === l || 0 === l.length ? c.globals.dom.Paper.gradient(p ? \"radial\" : \"linear\", function (t) {\n          t.at(d, e, a), t.at(g, i, s), t.at(u, i, s), null !== f && t.at(f, e, a);\n        }) : c.globals.dom.Paper.gradient(p ? \"radial\" : \"linear\", function (t) {\n          (Array.isArray(l[h]) ? l[h] : l).forEach(function (e) {\n            t.at(e.offset / 100, e.color, e.opacity);\n          });\n        }), p) {\n          var x = c.globals.gridWidth / 2,\n            b = c.globals.gridHeight / 2;\n          \"bubble\" !== c.config.chart.type ? r.attr({\n            gradientUnits: \"userSpaceOnUse\",\n            cx: x,\n            cy: b,\n            r: o\n          }) : r.attr({\n            cx: .5,\n            cy: .5,\n            r: .8,\n            fx: .2,\n            fy: .2\n          });\n        } else \"vertical\" === t ? r.from(0, 0).to(0, 1) : \"diagonal\" === t ? r.from(0, 0).to(1, 1) : \"horizontal\" === t ? r.from(0, 1).to(1, 1) : \"diagonal2\" === t && r.from(1, 0).to(0, 1);\n        return r;\n      }\n    }, {\n      key: \"getTextBasedOnMaxWidth\",\n      value: function (t) {\n        var e = t.text,\n          i = t.maxWidth,\n          a = t.fontSize,\n          s = t.fontFamily,\n          r = this.getTextRects(e, a, s),\n          o = r.width / e.length,\n          n = Math.floor(i / o);\n        return i < r.width ? e.slice(0, n - 3) + \"...\" : e;\n      }\n    }, {\n      key: \"drawText\",\n      value: function (t) {\n        var e = this,\n          i = t.x,\n          a = t.y,\n          s = t.text,\n          r = t.textAnchor,\n          o = t.fontSize,\n          n = t.fontFamily,\n          l = t.fontWeight,\n          h = t.foreColor,\n          c = t.opacity,\n          d = t.maxWidth,\n          u = t.cssClass,\n          f = void 0 === u ? \"\" : u,\n          p = t.isPlainText,\n          x = void 0 === p || p,\n          b = t.dominantBaseline,\n          v = void 0 === b ? \"auto\" : b,\n          m = this.w;\n        void 0 === s && (s = \"\");\n        var y = s;\n        r || (r = \"start\"), h && h.length || (h = m.config.chart.foreColor), n = n || m.config.chart.fontFamily, l = l || \"regular\";\n        var w,\n          k = {\n            maxWidth: d,\n            fontSize: o = o || \"11px\",\n            fontFamily: n\n          };\n        return Array.isArray(s) ? w = m.globals.dom.Paper.text(function (t) {\n          for (var i = 0; i < s.length; i++) y = s[i], d && (y = e.getTextBasedOnMaxWidth(g({\n            text: s[i]\n          }, k))), 0 === i ? t.tspan(y) : t.tspan(y).newLine();\n        }) : (d && (y = this.getTextBasedOnMaxWidth(g({\n          text: s\n        }, k))), w = x ? m.globals.dom.Paper.plain(s) : m.globals.dom.Paper.text(function (t) {\n          return t.tspan(y);\n        })), w.attr({\n          x: i,\n          y: a,\n          \"text-anchor\": r,\n          \"dominant-baseline\": v,\n          \"font-size\": o,\n          \"font-family\": n,\n          \"font-weight\": l,\n          fill: h,\n          class: \"apexcharts-text \" + f\n        }), w.node.style.fontFamily = n, w.node.style.opacity = c, w;\n      }\n    }, {\n      key: \"getMarkerPath\",\n      value: function (t, e, i, a) {\n        var s = \"\";\n        switch (i) {\n          case \"cross\":\n            s = \"M \".concat(t - (a /= 1.4), \" \").concat(e - a, \" L \").concat(t + a, \" \").concat(e + a, \"  M \").concat(t - a, \" \").concat(e + a, \" L \").concat(t + a, \" \").concat(e - a);\n            break;\n          case \"plus\":\n            s = \"M \".concat(t - (a /= 1.12), \" \").concat(e, \" L \").concat(t + a, \" \").concat(e, \"  M \").concat(t, \" \").concat(e - a, \" L \").concat(t, \" \").concat(e + a);\n            break;\n          case \"star\":\n          case \"sparkle\":\n            var r = 5;\n            a *= 1.15, \"sparkle\" === i && (a /= 1.1, r = 4);\n            for (var o = Math.PI / r, n = 0; n <= 2 * r; n++) {\n              var l = n * o,\n                h = n % 2 == 0 ? a : a / 2;\n              s += (0 === n ? \"M\" : \"L\") + (t + h * Math.sin(l)) + \",\" + (e - h * Math.cos(l));\n            }\n            s += \"Z\";\n            break;\n          case \"triangle\":\n            s = \"M \".concat(t, \" \").concat(e - a, \" \\n             L \").concat(t + a, \" \").concat(e + a, \" \\n             L \").concat(t - a, \" \").concat(e + a, \" \\n             Z\");\n            break;\n          case \"square\":\n          case \"rect\":\n            s = \"M \".concat(t - (a /= 1.125), \" \").concat(e - a, \" \\n           L \").concat(t + a, \" \").concat(e - a, \" \\n           L \").concat(t + a, \" \").concat(e + a, \" \\n           L \").concat(t - a, \" \").concat(e + a, \" \\n           Z\");\n            break;\n          case \"diamond\":\n            a *= 1.05, s = \"M \".concat(t, \" \").concat(e - a, \" \\n             L \").concat(t + a, \" \").concat(e, \" \\n             L \").concat(t, \" \").concat(e + a, \" \\n             L \").concat(t - a, \" \").concat(e, \" \\n            Z\");\n            break;\n          case \"line\":\n            s = \"M \".concat(t - (a /= 1.1), \" \").concat(e, \" \\n           L \").concat(t + a, \" \").concat(e);\n            break;\n          default:\n            a *= 2, s = \"M \".concat(t, \", \").concat(e, \" \\n           m -\").concat(a / 2, \", 0 \\n           a \").concat(a / 2, \",\").concat(a / 2, \" 0 1,0 \").concat(a, \",0 \\n           a \").concat(a / 2, \",\").concat(a / 2, \" 0 1,0 -\").concat(a, \",0\");\n        }\n        return s;\n      }\n    }, {\n      key: \"drawMarkerShape\",\n      value: function (t, e, i, a, s) {\n        var r = this.drawPath({\n          d: this.getMarkerPath(t, e, i, a, s),\n          stroke: s.pointStrokeColor,\n          strokeDashArray: s.pointStrokeDashArray,\n          strokeWidth: s.pointStrokeWidth,\n          fill: s.pointFillColor,\n          fillOpacity: s.pointFillOpacity,\n          strokeOpacity: s.pointStrokeOpacity\n        });\n        return r.attr({\n          cx: t,\n          cy: e,\n          shape: s.shape,\n          class: s.class ? s.class : \"\"\n        }), r;\n      }\n    }, {\n      key: \"drawMarker\",\n      value: function (t, e, i) {\n        t = t || 0;\n        var a = i.pSize || 0;\n        return m.isNumber(e) || (a = 0, e = 0), this.drawMarkerShape(t, e, null == i ? void 0 : i.shape, a, g(g({}, i), \"line\" === i.shape || \"plus\" === i.shape || \"cross\" === i.shape ? {\n          pointStrokeColor: i.pointFillColor,\n          pointStrokeOpacity: i.pointFillOpacity\n        } : {}));\n      }\n    }, {\n      key: \"pathMouseEnter\",\n      value: function (t, e) {\n        var i = this.w,\n          a = new w(this.ctx),\n          s = parseInt(t.node.getAttribute(\"index\"), 10),\n          r = parseInt(t.node.getAttribute(\"j\"), 10);\n        if (\"function\" == typeof i.config.chart.events.dataPointMouseEnter && i.config.chart.events.dataPointMouseEnter(e, this.ctx, {\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }), this.ctx.events.fireEvent(\"dataPointMouseEnter\", [e, this.ctx, {\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }]), (\"none\" === i.config.states.active.filter.type || \"true\" !== t.node.getAttribute(\"selected\")) && \"none\" !== i.config.states.hover.filter.type && !i.globals.isTouchDevice) {\n          var o = i.config.states.hover.filter;\n          a.applyFilter(t, s, o.type, o.value);\n        }\n      }\n    }, {\n      key: \"pathMouseLeave\",\n      value: function (t, e) {\n        var i = this.w,\n          a = new w(this.ctx),\n          s = parseInt(t.node.getAttribute(\"index\"), 10),\n          r = parseInt(t.node.getAttribute(\"j\"), 10);\n        \"function\" == typeof i.config.chart.events.dataPointMouseLeave && i.config.chart.events.dataPointMouseLeave(e, this.ctx, {\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }), this.ctx.events.fireEvent(\"dataPointMouseLeave\", [e, this.ctx, {\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }]), \"none\" !== i.config.states.active.filter.type && \"true\" === t.node.getAttribute(\"selected\") || \"none\" !== i.config.states.hover.filter.type && a.getDefaultFilter(t, s);\n      }\n    }, {\n      key: \"pathMouseDown\",\n      value: function (t, e) {\n        var i = this.w,\n          a = new w(this.ctx),\n          s = parseInt(t.node.getAttribute(\"index\"), 10),\n          r = parseInt(t.node.getAttribute(\"j\"), 10),\n          o = \"false\";\n        if (\"true\" === t.node.getAttribute(\"selected\")) {\n          if (t.node.setAttribute(\"selected\", \"false\"), i.globals.selectedDataPoints[s].indexOf(r) > -1) {\n            var n = i.globals.selectedDataPoints[s].indexOf(r);\n            i.globals.selectedDataPoints[s].splice(n, 1);\n          }\n        } else {\n          if (!i.config.states.active.allowMultipleDataPointsSelection && i.globals.selectedDataPoints.length > 0) {\n            i.globals.selectedDataPoints = [];\n            var l = i.globals.dom.Paper.select(\".apexcharts-series path\").members,\n              h = i.globals.dom.Paper.select(\".apexcharts-series circle, .apexcharts-series rect\").members,\n              c = function (t) {\n                Array.prototype.forEach.call(t, function (t) {\n                  t.node.setAttribute(\"selected\", \"false\"), a.getDefaultFilter(t, s);\n                });\n              };\n            c(l), c(h);\n          }\n          t.node.setAttribute(\"selected\", \"true\"), o = \"true\", void 0 === i.globals.selectedDataPoints[s] && (i.globals.selectedDataPoints[s] = []), i.globals.selectedDataPoints[s].push(r);\n        }\n        if (\"true\" === o) {\n          var d = i.config.states.active.filter;\n          if (\"none\" !== d) a.applyFilter(t, s, d.type, d.value);else if (\"none\" !== i.config.states.hover.filter && !i.globals.isTouchDevice) {\n            var g = i.config.states.hover.filter;\n            a.applyFilter(t, s, g.type, g.value);\n          }\n        } else if (\"none\" !== i.config.states.active.filter.type) if (\"none\" === i.config.states.hover.filter.type || i.globals.isTouchDevice) a.getDefaultFilter(t, s);else {\n          g = i.config.states.hover.filter;\n          a.applyFilter(t, s, g.type, g.value);\n        }\n        \"function\" == typeof i.config.chart.events.dataPointSelection && i.config.chart.events.dataPointSelection(e, this.ctx, {\n          selectedDataPoints: i.globals.selectedDataPoints,\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }), e && this.ctx.events.fireEvent(\"dataPointSelection\", [e, this.ctx, {\n          selectedDataPoints: i.globals.selectedDataPoints,\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }]);\n      }\n    }, {\n      key: \"rotateAroundCenter\",\n      value: function (t) {\n        var e = {};\n        return t && \"function\" == typeof t.getBBox && (e = t.getBBox()), {\n          x: e.x + e.width / 2,\n          y: e.y + e.height / 2\n        };\n      }\n    }, {\n      key: \"getTextRects\",\n      value: function (t, e, i, a) {\n        var s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],\n          r = this.w,\n          o = this.drawText({\n            x: -200,\n            y: -200,\n            text: t,\n            textAnchor: \"start\",\n            fontSize: e,\n            fontFamily: i,\n            foreColor: \"#fff\",\n            opacity: 0\n          });\n        a && o.attr(\"transform\", a), r.globals.dom.Paper.add(o);\n        var n = o.bbox();\n        return s || (n = o.node.getBoundingClientRect()), o.remove(), {\n          width: n.width,\n          height: n.height\n        };\n      }\n    }, {\n      key: \"placeTextWithEllipsis\",\n      value: function (t, e, i) {\n        if (\"function\" == typeof t.getComputedTextLength && (t.textContent = e, e.length > 0 && t.getComputedTextLength() >= i / 1.1)) {\n          for (var a = e.length - 3; a > 0; a -= 3) if (t.getSubStringLength(0, a) <= i / 1.1) return void (t.textContent = e.substring(0, a) + \"...\");\n          t.textContent = \".\";\n        }\n      }\n    }], [{\n      key: \"setAttrs\",\n      value: function (t, e) {\n        for (var i in e) e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n      }\n    }]), t;\n  }(),\n  A = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"getStackedSeriesTotals\",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n          e = this.w,\n          i = [];\n        if (0 === e.globals.series.length) return i;\n        for (var a = 0; a < e.globals.series[e.globals.maxValsInArrayIndex].length; a++) {\n          for (var s = 0, r = 0; r < e.globals.series.length; r++) void 0 !== e.globals.series[r][a] && -1 === t.indexOf(r) && (s += e.globals.series[r][a]);\n          i.push(s);\n        }\n        return i;\n      }\n    }, {\n      key: \"getSeriesTotalByIndex\",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n        return null === t ? this.w.config.series.reduce(function (t, e) {\n          return t + e;\n        }, 0) : this.w.globals.series[t].reduce(function (t, e) {\n          return t + e;\n        }, 0);\n      }\n    }, {\n      key: \"getStackedSeriesTotalsByGroups\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = [];\n        return e.globals.seriesGroups.forEach(function (a) {\n          var s = [];\n          e.config.series.forEach(function (t, i) {\n            a.indexOf(e.globals.seriesNames[i]) > -1 && s.push(i);\n          });\n          var r = e.globals.series.map(function (t, e) {\n            return -1 === s.indexOf(e) ? e : -1;\n          }).filter(function (t) {\n            return -1 !== t;\n          });\n          i.push(t.getStackedSeriesTotals(r));\n        }), i;\n      }\n    }, {\n      key: \"setSeriesYAxisMappings\",\n      value: function () {\n        var t = this.w.globals,\n          e = this.w.config,\n          i = [],\n          a = [],\n          s = [],\n          r = t.series.length > e.yaxis.length || e.yaxis.some(function (t) {\n            return Array.isArray(t.seriesName);\n          });\n        e.series.forEach(function (t, e) {\n          s.push(e), a.push(null);\n        }), e.yaxis.forEach(function (t, e) {\n          i[e] = [];\n        });\n        var o = [];\n        e.yaxis.forEach(function (t, a) {\n          var n = !1;\n          if (t.seriesName) {\n            var l = [];\n            Array.isArray(t.seriesName) ? l = t.seriesName : l.push(t.seriesName), l.forEach(function (t) {\n              e.series.forEach(function (e, o) {\n                if (e.name === t) {\n                  var l = o;\n                  a === o || r ? !r || s.indexOf(o) > -1 ? i[a].push([a, o]) : console.warn(\"Series '\" + e.name + \"' referenced more than once in what looks like the new style. That is, when using either seriesName: [], or when there are more series than yaxes.\") : (i[o].push([o, a]), l = a), n = !0, -1 !== (l = s.indexOf(l)) && s.splice(l, 1);\n                }\n              });\n            });\n          }\n          n || o.push(a);\n        }), i = i.map(function (t, e) {\n          var i = [];\n          return t.forEach(function (t) {\n            a[t[1]] = t[0], i.push(t[1]);\n          }), i;\n        });\n        for (var n = e.yaxis.length - 1, l = 0; l < o.length && (n = o[l], i[n] = [], s); l++) {\n          var h = s[0];\n          s.shift(), i[n].push(h), a[h] = n;\n        }\n        s.forEach(function (t) {\n          i[n].push(t), a[t] = n;\n        }), t.seriesYAxisMap = i.map(function (t) {\n          return t;\n        }), t.seriesYAxisReverseMap = a.map(function (t) {\n          return t;\n        }), t.seriesYAxisMap.forEach(function (t, i) {\n          t.forEach(function (t) {\n            e.series[t] && void 0 === e.series[t].group && (e.series[t].group = \"apexcharts-axis-\".concat(i.toString()));\n          });\n        });\n      }\n    }, {\n      key: \"isSeriesNull\",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n        return 0 === (null === t ? this.w.config.series.filter(function (t) {\n          return null !== t;\n        }) : this.w.config.series[t].data.filter(function (t) {\n          return null !== t;\n        })).length;\n      }\n    }, {\n      key: \"seriesHaveSameValues\",\n      value: function (t) {\n        return this.w.globals.series[t].every(function (t, e, i) {\n          return t === i[0];\n        });\n      }\n    }, {\n      key: \"getCategoryLabels\",\n      value: function (t) {\n        var e = this.w,\n          i = t.slice();\n        return e.config.xaxis.convertedCatToNumeric && (i = t.map(function (t, i) {\n          return e.config.xaxis.labels.formatter(t - e.globals.minX + 1);\n        })), i;\n      }\n    }, {\n      key: \"getLargestSeries\",\n      value: function () {\n        var t = this.w;\n        t.globals.maxValsInArrayIndex = t.globals.series.map(function (t) {\n          return t.length;\n        }).indexOf(Math.max.apply(Math, t.globals.series.map(function (t) {\n          return t.length;\n        })));\n      }\n    }, {\n      key: \"getLargestMarkerSize\",\n      value: function () {\n        var t = this.w,\n          e = 0;\n        return t.globals.markers.size.forEach(function (t) {\n          e = Math.max(e, t);\n        }), t.config.markers.discrete && t.config.markers.discrete.length && t.config.markers.discrete.forEach(function (t) {\n          e = Math.max(e, t.size);\n        }), e > 0 && (t.config.markers.hover.size > 0 ? e = t.config.markers.hover.size : e += t.config.markers.hover.sizeOffset), t.globals.markers.largestSize = e, e;\n      }\n    }, {\n      key: \"getSeriesTotals\",\n      value: function () {\n        var t = this.w;\n        t.globals.seriesTotals = t.globals.series.map(function (t, e) {\n          var i = 0;\n          if (Array.isArray(t)) for (var a = 0; a < t.length; a++) i += t[a];else i += t;\n          return i;\n        });\n      }\n    }, {\n      key: \"getSeriesTotalsXRange\",\n      value: function (t, e) {\n        var i = this.w;\n        return i.globals.series.map(function (a, s) {\n          for (var r = 0, o = 0; o < a.length; o++) i.globals.seriesX[s][o] > t && i.globals.seriesX[s][o] < e && (r += a[o]);\n          return r;\n        });\n      }\n    }, {\n      key: \"getPercentSeries\",\n      value: function () {\n        var t = this.w;\n        t.globals.seriesPercent = t.globals.series.map(function (e, i) {\n          var a = [];\n          if (Array.isArray(e)) for (var s = 0; s < e.length; s++) {\n            var r = t.globals.stackedSeriesTotals[s],\n              o = 0;\n            r && (o = 100 * e[s] / r), a.push(o);\n          } else {\n            var n = 100 * e / t.globals.seriesTotals.reduce(function (t, e) {\n              return t + e;\n            }, 0);\n            a.push(n);\n          }\n          return a;\n        });\n      }\n    }, {\n      key: \"getCalculatedRatios\",\n      value: function () {\n        var t,\n          e,\n          i,\n          a = this,\n          s = this.w,\n          r = s.globals,\n          o = [],\n          n = 0,\n          l = [],\n          h = .1,\n          c = 0;\n        if (r.yRange = [], r.isMultipleYAxis) for (var d = 0; d < r.minYArr.length; d++) r.yRange.push(Math.abs(r.minYArr[d] - r.maxYArr[d])), l.push(0);else r.yRange.push(Math.abs(r.minY - r.maxY));\n        r.xRange = Math.abs(r.maxX - r.minX), r.zRange = Math.abs(r.maxZ - r.minZ);\n        for (var g = 0; g < r.yRange.length; g++) o.push(r.yRange[g] / r.gridHeight);\n        if (e = r.xRange / r.gridWidth, t = r.yRange / r.gridWidth, i = r.xRange / r.gridHeight, (n = r.zRange / r.gridHeight * 16) || (n = 1), r.minY !== Number.MIN_VALUE && 0 !== Math.abs(r.minY) && (r.hasNegs = !0), s.globals.seriesYAxisReverseMap.length > 0) {\n          var u = function (t, e) {\n            var i = s.config.yaxis[s.globals.seriesYAxisReverseMap[e]],\n              r = t < 0 ? -1 : 1;\n            return t = Math.abs(t), i.logarithmic && (t = a.getBaseLog(i.logBase, t)), -r * t / o[e];\n          };\n          if (r.isMultipleYAxis) {\n            l = [];\n            for (var f = 0; f < o.length; f++) l.push(u(r.minYArr[f], f));\n          } else (l = []).push(u(r.minY, 0)), r.minY !== Number.MIN_VALUE && 0 !== Math.abs(r.minY) && (h = -r.minY / t, c = r.minX / e);\n        } else (l = []).push(0), h = 0, c = 0;\n        return {\n          yRatio: o,\n          invertedYRatio: t,\n          zRatio: n,\n          xRatio: e,\n          invertedXRatio: i,\n          baseLineInvertedY: h,\n          baseLineY: l,\n          baseLineX: c\n        };\n      }\n    }, {\n      key: \"getLogSeries\",\n      value: function (t) {\n        var e = this,\n          i = this.w;\n        return i.globals.seriesLog = t.map(function (t, a) {\n          var s = i.globals.seriesYAxisReverseMap[a];\n          return i.config.yaxis[s] && i.config.yaxis[s].logarithmic ? t.map(function (t) {\n            return null === t ? null : e.getLogVal(i.config.yaxis[s].logBase, t, a);\n          }) : t;\n        }), i.globals.invalidLogScale ? t : i.globals.seriesLog;\n      }\n    }, {\n      key: \"getBaseLog\",\n      value: function (t, e) {\n        return Math.log(e) / Math.log(t);\n      }\n    }, {\n      key: \"getLogVal\",\n      value: function (t, e, i) {\n        if (e <= 0) return 0;\n        var a = this.w,\n          s = 0 === a.globals.minYArr[i] ? -1 : this.getBaseLog(t, a.globals.minYArr[i]),\n          r = (0 === a.globals.maxYArr[i] ? 0 : this.getBaseLog(t, a.globals.maxYArr[i])) - s;\n        return e < 1 ? e / r : (this.getBaseLog(t, e) - s) / r;\n      }\n    }, {\n      key: \"getLogYRatios\",\n      value: function (t) {\n        var e = this,\n          i = this.w,\n          a = this.w.globals;\n        return a.yLogRatio = t.slice(), a.logYRange = a.yRange.map(function (t, s) {\n          var r = i.globals.seriesYAxisReverseMap[s];\n          if (i.config.yaxis[r] && e.w.config.yaxis[r].logarithmic) {\n            var o,\n              n = -Number.MAX_VALUE,\n              l = Number.MIN_VALUE;\n            return a.seriesLog.forEach(function (t, e) {\n              t.forEach(function (t) {\n                i.config.yaxis[e] && i.config.yaxis[e].logarithmic && (n = Math.max(t, n), l = Math.min(t, l));\n              });\n            }), o = Math.pow(a.yRange[s], Math.abs(l - n) / a.yRange[s]), a.yLogRatio[s] = o / a.gridHeight, o;\n          }\n        }), a.invalidLogScale ? t.slice() : a.yLogRatio;\n      }\n    }, {\n      key: \"drawSeriesByGroup\",\n      value: function (t, e, i, a) {\n        var s = this.w,\n          r = [];\n        return t.series.length > 0 && e.forEach(function (e) {\n          var o = [],\n            n = [];\n          t.i.forEach(function (i, a) {\n            s.config.series[i].group === e && (o.push(t.series[a]), n.push(i));\n          }), o.length > 0 && r.push(a.draw(o, i, n));\n        }), r;\n      }\n    }], [{\n      key: \"checkComboSeries\",\n      value: function (t, e) {\n        var i = !1,\n          a = 0,\n          s = 0;\n        return void 0 === e && (e = \"line\"), t.length && void 0 !== t[0].type && t.forEach(function (t) {\n          \"bar\" !== t.type && \"column\" !== t.type && \"candlestick\" !== t.type && \"boxPlot\" !== t.type || a++, void 0 !== t.type && t.type !== e && s++;\n        }), s > 0 && (i = !0), {\n          comboBarCount: a,\n          comboCharts: i\n        };\n      }\n    }, {\n      key: \"extendArrayProps\",\n      value: function (t, e, i) {\n        var a, s, r, o, n, l;\n        (null !== (a = e) && void 0 !== a && a.yaxis && (e = t.extendYAxis(e, i)), null !== (s = e) && void 0 !== s && s.annotations) && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), null !== (r = e) && void 0 !== r && null !== (o = r.annotations) && void 0 !== o && o.xaxis && (e = t.extendXAxisAnnotations(e)), null !== (n = e) && void 0 !== n && null !== (l = n.annotations) && void 0 !== l && l.points && (e = t.extendPointAnnotations(e)));\n        return e;\n      }\n    }]), t;\n  }(),\n  S = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.annoCtx = e;\n    }\n    return s(t, [{\n      key: \"setOrientations\",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n          i = this.w;\n        if (\"vertical\" === t.label.orientation) {\n          var a = null !== e ? e : 0,\n            s = i.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='\".concat(a, \"']\"));\n          if (null !== s) {\n            var r = s.getBoundingClientRect();\n            s.setAttribute(\"x\", parseFloat(s.getAttribute(\"x\")) - r.height + 4);\n            var o = \"top\" === t.label.position ? r.width : -r.width;\n            s.setAttribute(\"y\", parseFloat(s.getAttribute(\"y\")) + o);\n            var n = this.annoCtx.graphics.rotateAroundCenter(s),\n              l = n.x,\n              h = n.y;\n            s.setAttribute(\"transform\", \"rotate(-90 \".concat(l, \" \").concat(h, \")\"));\n          }\n        }\n      }\n    }, {\n      key: \"addBackgroundToAnno\",\n      value: function (t, e) {\n        var i = this.w;\n        if (!t || !e.label.text || !String(e.label.text).trim()) return null;\n        var a = i.globals.dom.baseEl.querySelector(\".apexcharts-grid\").getBoundingClientRect(),\n          s = t.getBoundingClientRect(),\n          r = e.label.style.padding,\n          o = r.left,\n          n = r.right,\n          l = r.top,\n          h = r.bottom;\n        if (\"vertical\" === e.label.orientation) {\n          var c = [o, n, l, h];\n          l = c[0], h = c[1], o = c[2], n = c[3];\n        }\n        var d = s.left - a.left - o,\n          g = s.top - a.top - l,\n          u = this.annoCtx.graphics.drawRect(d - i.globals.barPadForNumericAxis, g, s.width + o + n, s.height + l + h, e.label.borderRadius, e.label.style.background, 1, e.label.borderWidth, e.label.borderColor, 0);\n        return e.id && u.node.classList.add(e.id), u;\n      }\n    }, {\n      key: \"annotationsBackground\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = function (i, a, s) {\n            var r = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations .apexcharts-\").concat(s, \"-annotation-label[rel='\").concat(a, \"']\"));\n            if (r) {\n              var o = r.parentNode,\n                n = t.addBackgroundToAnno(r, i);\n              n && (o.insertBefore(n.node, r), i.label.mouseEnter && n.node.addEventListener(\"mouseenter\", i.label.mouseEnter.bind(t, i)), i.label.mouseLeave && n.node.addEventListener(\"mouseleave\", i.label.mouseLeave.bind(t, i)), i.label.click && n.node.addEventListener(\"click\", i.label.click.bind(t, i)));\n            }\n          };\n        e.config.annotations.xaxis.forEach(function (t, e) {\n          return i(t, e, \"xaxis\");\n        }), e.config.annotations.yaxis.forEach(function (t, e) {\n          return i(t, e, \"yaxis\");\n        }), e.config.annotations.points.forEach(function (t, e) {\n          return i(t, e, \"point\");\n        });\n      }\n    }, {\n      key: \"getY1Y2\",\n      value: function (t, e) {\n        var i,\n          a = this.w,\n          s = \"y1\" === t ? e.y : e.y2,\n          r = !1;\n        if (this.annoCtx.invertAxis) {\n          var o = a.config.xaxis.convertedCatToNumeric ? a.globals.categoryLabels : a.globals.labels,\n            n = o.indexOf(s),\n            l = a.globals.dom.baseEl.querySelector(\".apexcharts-yaxis-texts-g text:nth-child(\".concat(n + 1, \")\"));\n          i = l ? parseFloat(l.getAttribute(\"y\")) : (a.globals.gridHeight / o.length - 1) * (n + 1) - a.globals.barHeight, void 0 !== e.seriesIndex && a.globals.barHeight && (i -= a.globals.barHeight / 2 * (a.globals.series.length - 1) - a.globals.barHeight * e.seriesIndex);\n        } else {\n          var h,\n            c = a.globals.seriesYAxisMap[e.yAxisIndex][0],\n            d = a.config.yaxis[e.yAxisIndex].logarithmic ? new A(this.annoCtx.ctx).getLogVal(a.config.yaxis[e.yAxisIndex].logBase, s, c) / a.globals.yLogRatio[c] : (s - a.globals.minYArr[c]) / (a.globals.yRange[c] / a.globals.gridHeight);\n          i = a.globals.gridHeight - Math.min(Math.max(d, 0), a.globals.gridHeight), r = d > a.globals.gridHeight || d < 0, !e.marker || void 0 !== e.y && null !== e.y || (i = 0), null !== (h = a.config.yaxis[e.yAxisIndex]) && void 0 !== h && h.reversed && (i = d);\n        }\n        return \"string\" == typeof s && s.includes(\"px\") && (i = parseFloat(s)), {\n          yP: i,\n          clipped: r\n        };\n      }\n    }, {\n      key: \"getX1X2\",\n      value: function (t, e) {\n        var i = this.w,\n          a = \"x1\" === t ? e.x : e.x2,\n          s = this.annoCtx.invertAxis ? i.globals.minY : i.globals.minX,\n          r = this.annoCtx.invertAxis ? i.globals.maxY : i.globals.maxX,\n          o = this.annoCtx.invertAxis ? i.globals.yRange[0] : i.globals.xRange,\n          n = !1,\n          l = this.annoCtx.inversedReversedAxis ? (r - a) / (o / i.globals.gridWidth) : (a - s) / (o / i.globals.gridWidth);\n        return \"category\" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i.globals.dataFormatXNumeric || i.config.chart.sparkline.enabled || (l = this.getStringX(a)), \"string\" == typeof a && a.includes(\"px\") && (l = parseFloat(a)), null == a && e.marker && (l = i.globals.gridWidth), void 0 !== e.seriesIndex && i.globals.barWidth && !this.annoCtx.invertAxis && (l -= i.globals.barWidth / 2 * (i.globals.series.length - 1) - i.globals.barWidth * e.seriesIndex), l > i.globals.gridWidth ? (l = i.globals.gridWidth, n = !0) : l < 0 && (l = 0, n = !0), {\n          x: l,\n          clipped: n\n        };\n      }\n    }, {\n      key: \"getStringX\",\n      value: function (t) {\n        var e = this.w,\n          i = t;\n        e.config.xaxis.convertedCatToNumeric && e.globals.categoryLabels.length && (t = e.globals.categoryLabels.indexOf(t) + 1);\n        var a = e.globals.labels.map(function (t) {\n            return Array.isArray(t) ? t.join(\" \") : t;\n          }).indexOf(t),\n          s = e.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g text:nth-child(\".concat(a + 1, \")\"));\n        return s && (i = parseFloat(s.getAttribute(\"x\"))), i;\n      }\n    }]), t;\n  }(),\n  C = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.annoCtx = e, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new S(this.annoCtx);\n    }\n    return s(t, [{\n      key: \"addXaxisAnnotation\",\n      value: function (t, e, i) {\n        var a,\n          s = this.w,\n          r = this.helpers.getX1X2(\"x1\", t),\n          o = r.x,\n          n = r.clipped,\n          l = !0,\n          h = t.label.text,\n          c = t.strokeDashArray;\n        if (m.isNumber(o)) {\n          if (null === t.x2 || void 0 === t.x2) {\n            if (!n) {\n              var d = this.annoCtx.graphics.drawLine(o + t.offsetX, 0 + t.offsetY, o + t.offsetX, s.globals.gridHeight + t.offsetY, t.borderColor, c, t.borderWidth);\n              e.appendChild(d.node), t.id && d.node.classList.add(t.id);\n            }\n          } else {\n            var g = this.helpers.getX1X2(\"x2\", t);\n            if (a = g.x, l = g.clipped, !n || !l) {\n              if (a < o) {\n                var u = o;\n                o = a, a = u;\n              }\n              var f = this.annoCtx.graphics.drawRect(o + t.offsetX, 0 + t.offsetY, a - o, s.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, c);\n              f.node.classList.add(\"apexcharts-annotation-rect\"), f.attr(\"clip-path\", \"url(#gridRectMask\".concat(s.globals.cuid, \")\")), e.appendChild(f.node), t.id && f.node.classList.add(t.id);\n            }\n          }\n          if (!n || !l) {\n            var p = this.annoCtx.graphics.getTextRects(h, parseFloat(t.label.style.fontSize)),\n              x = \"top\" === t.label.position ? 4 : \"center\" === t.label.position ? s.globals.gridHeight / 2 + (\"vertical\" === t.label.orientation ? p.width / 2 : 0) : s.globals.gridHeight,\n              b = this.annoCtx.graphics.drawText({\n                x: o + t.label.offsetX,\n                y: x + t.label.offsetY - (\"vertical\" === t.label.orientation ? \"top\" === t.label.position ? p.width / 2 - 12 : -p.width / 2 : 0),\n                text: h,\n                textAnchor: t.label.textAnchor,\n                fontSize: t.label.style.fontSize,\n                fontFamily: t.label.style.fontFamily,\n                fontWeight: t.label.style.fontWeight,\n                foreColor: t.label.style.color,\n                cssClass: \"apexcharts-xaxis-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n              });\n            b.attr({\n              rel: i\n            }), e.appendChild(b.node), this.annoCtx.helpers.setOrientations(t, i);\n          }\n        }\n      }\n    }, {\n      key: \"drawXAxisAnnotations\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = this.annoCtx.graphics.group({\n            class: \"apexcharts-xaxis-annotations\"\n          });\n        return e.config.annotations.xaxis.map(function (e, a) {\n          t.addXaxisAnnotation(e, i.node, a);\n        }), i;\n      }\n    }]), t;\n  }(),\n  L = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n    }\n    return s(t, [{\n      key: \"isValidDate\",\n      value: function (t) {\n        return \"number\" != typeof t && !isNaN(this.parseDate(t));\n      }\n    }, {\n      key: \"getTimeStamp\",\n      value: function (t) {\n        return Date.parse(t) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : new Date(t).getTime() : t;\n      }\n    }, {\n      key: \"getDate\",\n      value: function (t) {\n        return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toUTCString()) : new Date(t);\n      }\n    }, {\n      key: \"parseDate\",\n      value: function (t) {\n        var e = Date.parse(t);\n        if (!isNaN(e)) return this.getTimeStamp(t);\n        var i = Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n        return i = this.getTimeStamp(i);\n      }\n    }, {\n      key: \"parseDateWithTimezone\",\n      value: function (t) {\n        return Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n      }\n    }, {\n      key: \"formatDate\",\n      value: function (t, e) {\n        var i = this.w.globals.locale,\n          a = this.w.config.xaxis.labels.datetimeUTC,\n          s = [\"\\0\"].concat(p(i.months)),\n          r = [\"\\x01\"].concat(p(i.shortMonths)),\n          o = [\"\\x02\"].concat(p(i.days)),\n          n = [\"\\x03\"].concat(p(i.shortDays));\n        function l(t, e) {\n          var i = t + \"\";\n          for (e = e || 2; i.length < e;) i = \"0\" + i;\n          return i;\n        }\n        var h = a ? t.getUTCFullYear() : t.getFullYear();\n        e = (e = (e = e.replace(/(^|[^\\\\])yyyy+/g, \"$1\" + h)).replace(/(^|[^\\\\])yy/g, \"$1\" + h.toString().substr(2, 2))).replace(/(^|[^\\\\])y/g, \"$1\" + h);\n        var c = (a ? t.getUTCMonth() : t.getMonth()) + 1;\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])MMMM+/g, \"$1\" + s[0])).replace(/(^|[^\\\\])MMM/g, \"$1\" + r[0])).replace(/(^|[^\\\\])MM/g, \"$1\" + l(c))).replace(/(^|[^\\\\])M/g, \"$1\" + c);\n        var d = a ? t.getUTCDate() : t.getDate();\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])dddd+/g, \"$1\" + o[0])).replace(/(^|[^\\\\])ddd/g, \"$1\" + n[0])).replace(/(^|[^\\\\])dd/g, \"$1\" + l(d))).replace(/(^|[^\\\\])d/g, \"$1\" + d);\n        var g = a ? t.getUTCHours() : t.getHours(),\n          u = g > 12 ? g - 12 : 0 === g ? 12 : g;\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])HH+/g, \"$1\" + l(g))).replace(/(^|[^\\\\])H/g, \"$1\" + g)).replace(/(^|[^\\\\])hh+/g, \"$1\" + l(u))).replace(/(^|[^\\\\])h/g, \"$1\" + u);\n        var f = a ? t.getUTCMinutes() : t.getMinutes();\n        e = (e = e.replace(/(^|[^\\\\])mm+/g, \"$1\" + l(f))).replace(/(^|[^\\\\])m/g, \"$1\" + f);\n        var x = a ? t.getUTCSeconds() : t.getSeconds();\n        e = (e = e.replace(/(^|[^\\\\])ss+/g, \"$1\" + l(x))).replace(/(^|[^\\\\])s/g, \"$1\" + x);\n        var b = a ? t.getUTCMilliseconds() : t.getMilliseconds();\n        e = e.replace(/(^|[^\\\\])fff+/g, \"$1\" + l(b, 3)), b = Math.round(b / 10), e = e.replace(/(^|[^\\\\])ff/g, \"$1\" + l(b)), b = Math.round(b / 10);\n        var v = g < 12 ? \"AM\" : \"PM\";\n        e = (e = (e = e.replace(/(^|[^\\\\])f/g, \"$1\" + b)).replace(/(^|[^\\\\])TT+/g, \"$1\" + v)).replace(/(^|[^\\\\])T/g, \"$1\" + v.charAt(0));\n        var m = v.toLowerCase();\n        e = (e = e.replace(/(^|[^\\\\])tt+/g, \"$1\" + m)).replace(/(^|[^\\\\])t/g, \"$1\" + m.charAt(0));\n        var y = -t.getTimezoneOffset(),\n          w = a || !y ? \"Z\" : y > 0 ? \"+\" : \"-\";\n        if (!a) {\n          var k = (y = Math.abs(y)) % 60;\n          w += l(Math.floor(y / 60)) + \":\" + l(k);\n        }\n        e = e.replace(/(^|[^\\\\])K/g, \"$1\" + w);\n        var A = (a ? t.getUTCDay() : t.getDay()) + 1;\n        return e = (e = (e = (e = (e = e.replace(new RegExp(o[0], \"g\"), o[A])).replace(new RegExp(n[0], \"g\"), n[A])).replace(new RegExp(s[0], \"g\"), s[c])).replace(new RegExp(r[0], \"g\"), r[c])).replace(/\\\\(.)/g, \"$1\");\n      }\n    }, {\n      key: \"getTimeUnitsfromTimestamp\",\n      value: function (t, e, i) {\n        var a = this.w;\n        void 0 !== a.config.xaxis.min && (t = a.config.xaxis.min), void 0 !== a.config.xaxis.max && (e = a.config.xaxis.max);\n        var s = this.getDate(t),\n          r = this.getDate(e),\n          o = this.formatDate(s, \"yyyy MM dd HH mm ss fff\").split(\" \"),\n          n = this.formatDate(r, \"yyyy MM dd HH mm ss fff\").split(\" \");\n        return {\n          minMillisecond: parseInt(o[6], 10),\n          maxMillisecond: parseInt(n[6], 10),\n          minSecond: parseInt(o[5], 10),\n          maxSecond: parseInt(n[5], 10),\n          minMinute: parseInt(o[4], 10),\n          maxMinute: parseInt(n[4], 10),\n          minHour: parseInt(o[3], 10),\n          maxHour: parseInt(n[3], 10),\n          minDate: parseInt(o[2], 10),\n          maxDate: parseInt(n[2], 10),\n          minMonth: parseInt(o[1], 10) - 1,\n          maxMonth: parseInt(n[1], 10) - 1,\n          minYear: parseInt(o[0], 10),\n          maxYear: parseInt(n[0], 10)\n        };\n      }\n    }, {\n      key: \"isLeapYear\",\n      value: function (t) {\n        return t % 4 == 0 && t % 100 != 0 || t % 400 == 0;\n      }\n    }, {\n      key: \"calculcateLastDaysOfMonth\",\n      value: function (t, e, i) {\n        return this.determineDaysOfMonths(t, e) - i;\n      }\n    }, {\n      key: \"determineDaysOfYear\",\n      value: function (t) {\n        var e = 365;\n        return this.isLeapYear(t) && (e = 366), e;\n      }\n    }, {\n      key: \"determineRemainingDaysOfYear\",\n      value: function (t, e, i) {\n        var a = this.daysCntOfYear[e] + i;\n        return e > 1 && this.isLeapYear() && a++, a;\n      }\n    }, {\n      key: \"determineDaysOfMonths\",\n      value: function (t, e) {\n        var i = 30;\n        switch (t = m.monthMod(t), !0) {\n          case this.months30.indexOf(t) > -1:\n            2 === t && (i = this.isLeapYear(e) ? 29 : 28);\n            break;\n          case this.months31.indexOf(t) > -1:\n          default:\n            i = 31;\n        }\n        return i;\n      }\n    }]), t;\n  }(),\n  P = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.tooltipKeyFormat = \"dd MMM\";\n    }\n    return s(t, [{\n      key: \"xLabelFormat\",\n      value: function (t, e, i, a) {\n        var s = this.w;\n        if (\"datetime\" === s.config.xaxis.type && void 0 === s.config.xaxis.labels.formatter && void 0 === s.config.tooltip.x.formatter) {\n          var r = new L(this.ctx);\n          return r.formatDate(r.getDate(e), s.config.tooltip.x.format);\n        }\n        return t(e, i, a);\n      }\n    }, {\n      key: \"defaultGeneralFormatter\",\n      value: function (t) {\n        return Array.isArray(t) ? t.map(function (t) {\n          return t;\n        }) : t;\n      }\n    }, {\n      key: \"defaultYFormatter\",\n      value: function (t, e, i) {\n        var a = this.w;\n        if (m.isNumber(t)) if (0 !== a.globals.yValueDecimal) t = t.toFixed(void 0 !== e.decimalsInFloat ? e.decimalsInFloat : a.globals.yValueDecimal);else {\n          var s = t.toFixed(0);\n          t = t == s ? s : t.toFixed(1);\n        }\n        return t;\n      }\n    }, {\n      key: \"setLabelFormatters\",\n      value: function () {\n        var t = this,\n          e = this.w;\n        return e.globals.xaxisTooltipFormatter = function (e) {\n          return t.defaultGeneralFormatter(e);\n        }, e.globals.ttKeyFormatter = function (e) {\n          return t.defaultGeneralFormatter(e);\n        }, e.globals.ttZFormatter = function (t) {\n          return t;\n        }, e.globals.legendFormatter = function (e) {\n          return t.defaultGeneralFormatter(e);\n        }, void 0 !== e.config.xaxis.labels.formatter ? e.globals.xLabelFormatter = e.config.xaxis.labels.formatter : e.globals.xLabelFormatter = function (t) {\n          if (m.isNumber(t)) {\n            if (!e.config.xaxis.convertedCatToNumeric && \"numeric\" === e.config.xaxis.type) {\n              if (m.isNumber(e.config.xaxis.decimalsInFloat)) return t.toFixed(e.config.xaxis.decimalsInFloat);\n              var i = e.globals.maxX - e.globals.minX;\n              return i > 0 && i < 100 ? t.toFixed(1) : t.toFixed(0);\n            }\n            if (e.globals.isBarHorizontal) if (e.globals.maxY - e.globals.minYArr < 4) return t.toFixed(1);\n            return t.toFixed(0);\n          }\n          return t;\n        }, \"function\" == typeof e.config.tooltip.x.formatter ? e.globals.ttKeyFormatter = e.config.tooltip.x.formatter : e.globals.ttKeyFormatter = e.globals.xLabelFormatter, \"function\" == typeof e.config.xaxis.tooltip.formatter && (e.globals.xaxisTooltipFormatter = e.config.xaxis.tooltip.formatter), (Array.isArray(e.config.tooltip.y) || void 0 !== e.config.tooltip.y.formatter) && (e.globals.ttVal = e.config.tooltip.y), void 0 !== e.config.tooltip.z.formatter && (e.globals.ttZFormatter = e.config.tooltip.z.formatter), void 0 !== e.config.legend.formatter && (e.globals.legendFormatter = e.config.legend.formatter), e.config.yaxis.forEach(function (i, a) {\n          void 0 !== i.labels.formatter ? e.globals.yLabelFormatters[a] = i.labels.formatter : e.globals.yLabelFormatters[a] = function (s) {\n            return e.globals.xyCharts ? Array.isArray(s) ? s.map(function (e) {\n              return t.defaultYFormatter(e, i, a);\n            }) : t.defaultYFormatter(s, i, a) : s;\n          };\n        }), e.globals;\n      }\n    }, {\n      key: \"heatmapLabelFormatters\",\n      value: function () {\n        var t = this.w;\n        if (\"heatmap\" === t.config.chart.type) {\n          t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();\n          var e = t.globals.seriesNames.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          }, 0);\n          t.globals.yAxisScale[0].niceMax = e, t.globals.yAxisScale[0].niceMin = e;\n        }\n      }\n    }]), t;\n  }(),\n  M = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"getLabel\",\n      value: function (t, e, i, a) {\n        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [],\n          r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"12px\",\n          o = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6],\n          n = this.w,\n          l = void 0 === t[a] ? \"\" : t[a],\n          h = l,\n          c = n.globals.xLabelFormatter,\n          d = n.config.xaxis.labels.formatter,\n          g = !1,\n          u = new P(this.ctx),\n          f = l;\n        o && (h = u.xLabelFormat(c, l, f, {\n          i: a,\n          dateFormatter: new L(this.ctx).formatDate,\n          w: n\n        }), void 0 !== d && (h = d(l, t[a], {\n          i: a,\n          dateFormatter: new L(this.ctx).formatDate,\n          w: n\n        })));\n        var p, x;\n        e.length > 0 ? (p = e[a].unit, x = null, e.forEach(function (t) {\n          \"month\" === t.unit ? x = \"year\" : \"day\" === t.unit ? x = \"month\" : \"hour\" === t.unit ? x = \"day\" : \"minute\" === t.unit && (x = \"hour\");\n        }), g = x === p, i = e[a].position, h = e[a].value) : \"datetime\" === n.config.xaxis.type && void 0 === d && (h = \"\"), void 0 === h && (h = \"\"), h = Array.isArray(h) ? h : h.toString();\n        var b = new k(this.ctx),\n          v = {};\n        v = n.globals.rotateXLabels && o ? b.getTextRects(h, parseInt(r, 10), null, \"rotate(\".concat(n.config.xaxis.labels.rotate, \" 0 0)\"), !1) : b.getTextRects(h, parseInt(r, 10));\n        var m = !n.config.xaxis.labels.showDuplicates && this.ctx.timeScale;\n        return !Array.isArray(h) && (\"NaN\" === String(h) || s.indexOf(h) >= 0 && m) && (h = \"\"), {\n          x: i,\n          text: h,\n          textRect: v,\n          isBold: g\n        };\n      }\n    }, {\n      key: \"checkLabelBasedOnTickamount\",\n      value: function (t, e, i) {\n        var a = this.w,\n          s = a.config.xaxis.tickAmount;\n        return \"dataPoints\" === s && (s = Math.round(a.globals.gridWidth / 120)), s > i || t % Math.round(i / (s + 1)) == 0 || (e.text = \"\"), e;\n      }\n    }, {\n      key: \"checkForOverflowingLabels\",\n      value: function (t, e, i, a, s) {\n        var r = this.w;\n        if (0 === t && r.globals.skipFirstTimelinelabel && (e.text = \"\"), t === i - 1 && r.globals.skipLastTimelinelabel && (e.text = \"\"), r.config.xaxis.labels.hideOverlappingLabels && a.length > 0) {\n          var o = s[s.length - 1];\n          e.x < o.textRect.width / (r.globals.rotateXLabels ? Math.abs(r.config.xaxis.labels.rotate) / 12 : 1.01) + o.x && (e.text = \"\");\n        }\n        return e;\n      }\n    }, {\n      key: \"checkForReversedLabels\",\n      value: function (t, e) {\n        var i = this.w;\n        return i.config.yaxis[t] && i.config.yaxis[t].reversed && e.reverse(), e;\n      }\n    }, {\n      key: \"yAxisAllSeriesCollapsed\",\n      value: function (t) {\n        var e = this.w.globals;\n        return !e.seriesYAxisMap[t].some(function (t) {\n          return -1 === e.collapsedSeriesIndices.indexOf(t);\n        });\n      }\n    }, {\n      key: \"translateYAxisIndex\",\n      value: function (t) {\n        var e = this.w,\n          i = e.globals,\n          a = e.config.yaxis;\n        return i.series.length > a.length || a.some(function (t) {\n          return Array.isArray(t.seriesName);\n        }) ? t : i.seriesYAxisReverseMap[t];\n      }\n    }, {\n      key: \"isYAxisHidden\",\n      value: function (t) {\n        var e = this.w,\n          i = e.config.yaxis[t];\n        if (!i.show || this.yAxisAllSeriesCollapsed(t)) return !0;\n        if (!i.showForNullSeries) {\n          var a = e.globals.seriesYAxisMap[t],\n            s = new A(this.ctx);\n          return a.every(function (t) {\n            return s.isSeriesNull(t);\n          });\n        }\n        return !1;\n      }\n    }, {\n      key: \"getYAxisForeColor\",\n      value: function (t, e) {\n        var i = this.w;\n        return Array.isArray(t) && i.globals.yAxisScale[e] && this.ctx.theme.pushExtraColors(t, i.globals.yAxisScale[e].result.length, !1), t;\n      }\n    }, {\n      key: \"drawYAxisTicks\",\n      value: function (t, e, i, a, s, r, o) {\n        var n = this.w,\n          l = new k(this.ctx),\n          h = n.globals.translateY + n.config.yaxis[s].labels.offsetY;\n        if (n.globals.isBarHorizontal ? h = 0 : \"heatmap\" === n.config.chart.type && (h += r / 2), a.show && e > 0) {\n          !0 === n.config.yaxis[s].opposite && (t += a.width);\n          for (var c = e; c >= 0; c--) {\n            var d = l.drawLine(t + i.offsetX - a.width + a.offsetX, h + a.offsetY, t + i.offsetX + a.offsetX, h + a.offsetY, a.color);\n            o.add(d), h += r;\n          }\n        }\n      }\n    }]), t;\n  }(),\n  I = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.annoCtx = e, this.helpers = new S(this.annoCtx), this.axesUtils = new M(this.annoCtx);\n    }\n    return s(t, [{\n      key: \"addYaxisAnnotation\",\n      value: function (t, e, i) {\n        var a,\n          s = this.w,\n          r = t.strokeDashArray,\n          o = this.helpers.getY1Y2(\"y1\", t),\n          n = o.yP,\n          l = o.clipped,\n          h = !0,\n          c = !1,\n          d = t.label.text;\n        if (null === t.y2 || void 0 === t.y2) {\n          if (!l) {\n            c = !0;\n            var g = this.annoCtx.graphics.drawLine(0 + t.offsetX, n + t.offsetY, this._getYAxisAnnotationWidth(t), n + t.offsetY, t.borderColor, r, t.borderWidth);\n            e.appendChild(g.node), t.id && g.node.classList.add(t.id);\n          }\n        } else {\n          if (a = (o = this.helpers.getY1Y2(\"y2\", t)).yP, h = o.clipped, a > n) {\n            var u = n;\n            n = a, a = u;\n          }\n          if (!l || !h) {\n            c = !0;\n            var f = this.annoCtx.graphics.drawRect(0 + t.offsetX, a + t.offsetY, this._getYAxisAnnotationWidth(t), n - a, 0, t.fillColor, t.opacity, 1, t.borderColor, r);\n            f.node.classList.add(\"apexcharts-annotation-rect\"), f.attr(\"clip-path\", \"url(#gridRectMask\".concat(s.globals.cuid, \")\")), e.appendChild(f.node), t.id && f.node.classList.add(t.id);\n          }\n        }\n        if (c) {\n          var p = \"right\" === t.label.position ? s.globals.gridWidth : \"center\" === t.label.position ? s.globals.gridWidth / 2 : 0,\n            x = this.annoCtx.graphics.drawText({\n              x: p + t.label.offsetX,\n              y: (null != a ? a : n) + t.label.offsetY - 3,\n              text: d,\n              textAnchor: t.label.textAnchor,\n              fontSize: t.label.style.fontSize,\n              fontFamily: t.label.style.fontFamily,\n              fontWeight: t.label.style.fontWeight,\n              foreColor: t.label.style.color,\n              cssClass: \"apexcharts-yaxis-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n            });\n          x.attr({\n            rel: i\n          }), e.appendChild(x.node);\n        }\n      }\n    }, {\n      key: \"_getYAxisAnnotationWidth\",\n      value: function (t) {\n        var e = this.w;\n        e.globals.gridWidth;\n        return (t.width.indexOf(\"%\") > -1 ? e.globals.gridWidth * parseInt(t.width, 10) / 100 : parseInt(t.width, 10)) + t.offsetX;\n      }\n    }, {\n      key: \"drawYAxisAnnotations\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = this.annoCtx.graphics.group({\n            class: \"apexcharts-yaxis-annotations\"\n          });\n        return e.config.annotations.yaxis.forEach(function (e, a) {\n          e.yAxisIndex = t.axesUtils.translateYAxisIndex(e.yAxisIndex), t.axesUtils.isYAxisHidden(e.yAxisIndex) && t.axesUtils.yAxisAllSeriesCollapsed(e.yAxisIndex) || t.addYaxisAnnotation(e, i.node, a);\n        }), i;\n      }\n    }]), t;\n  }(),\n  T = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.annoCtx = e, this.helpers = new S(this.annoCtx);\n    }\n    return s(t, [{\n      key: \"addPointAnnotation\",\n      value: function (t, e, i) {\n        if (!(this.w.globals.collapsedSeriesIndices.indexOf(t.seriesIndex) > -1)) {\n          var a = this.helpers.getX1X2(\"x1\", t),\n            s = a.x,\n            r = a.clipped,\n            o = (a = this.helpers.getY1Y2(\"y1\", t)).yP,\n            n = a.clipped;\n          if (m.isNumber(s) && !n && !r) {\n            var l = {\n                pSize: t.marker.size,\n                pointStrokeWidth: t.marker.strokeWidth,\n                pointFillColor: t.marker.fillColor,\n                pointStrokeColor: t.marker.strokeColor,\n                shape: t.marker.shape,\n                pRadius: t.marker.radius,\n                class: \"apexcharts-point-annotation-marker \".concat(t.marker.cssClass, \" \").concat(t.id ? t.id : \"\")\n              },\n              h = this.annoCtx.graphics.drawMarker(s + t.marker.offsetX, o + t.marker.offsetY, l);\n            e.appendChild(h.node);\n            var c = t.label.text ? t.label.text : \"\",\n              d = this.annoCtx.graphics.drawText({\n                x: s + t.label.offsetX,\n                y: o + t.label.offsetY - t.marker.size - parseFloat(t.label.style.fontSize) / 1.6,\n                text: c,\n                textAnchor: t.label.textAnchor,\n                fontSize: t.label.style.fontSize,\n                fontFamily: t.label.style.fontFamily,\n                fontWeight: t.label.style.fontWeight,\n                foreColor: t.label.style.color,\n                cssClass: \"apexcharts-point-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n              });\n            if (d.attr({\n              rel: i\n            }), e.appendChild(d.node), t.customSVG.SVG) {\n              var g = this.annoCtx.graphics.group({\n                class: \"apexcharts-point-annotations-custom-svg \" + t.customSVG.cssClass\n              });\n              g.attr({\n                transform: \"translate(\".concat(s + t.customSVG.offsetX, \", \").concat(o + t.customSVG.offsetY, \")\")\n              }), g.node.innerHTML = t.customSVG.SVG, e.appendChild(g.node);\n            }\n            if (t.image.path) {\n              var u = t.image.width ? t.image.width : 20,\n                f = t.image.height ? t.image.height : 20;\n              h = this.annoCtx.addImage({\n                x: s + t.image.offsetX - u / 2,\n                y: o + t.image.offsetY - f / 2,\n                width: u,\n                height: f,\n                path: t.image.path,\n                appendTo: \".apexcharts-point-annotations\"\n              });\n            }\n            t.mouseEnter && h.node.addEventListener(\"mouseenter\", t.mouseEnter.bind(this, t)), t.mouseLeave && h.node.addEventListener(\"mouseleave\", t.mouseLeave.bind(this, t)), t.click && h.node.addEventListener(\"click\", t.click.bind(this, t));\n          }\n        }\n      }\n    }, {\n      key: \"drawPointAnnotations\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = this.annoCtx.graphics.group({\n            class: \"apexcharts-point-annotations\"\n          });\n        return e.config.annotations.points.map(function (e, a) {\n          t.addPointAnnotation(e, i.node, a);\n        }), i;\n      }\n    }]), t;\n  }();\nvar z = {\n    name: \"en\",\n    options: {\n      months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n      shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      toolbar: {\n        exportToSVG: \"Download SVG\",\n        exportToPNG: \"Download PNG\",\n        exportToCSV: \"Download CSV\",\n        menu: \"Menu\",\n        selection: \"Selection\",\n        selectionZoom: \"Selection Zoom\",\n        zoomIn: \"Zoom In\",\n        zoomOut: \"Zoom Out\",\n        pan: \"Panning\",\n        reset: \"Reset Zoom\"\n      }\n    }\n  },\n  X = function () {\n    function t() {\n      i(this, t), this.yAxis = {\n        show: !0,\n        showAlways: !1,\n        showForNullSeries: !0,\n        seriesName: void 0,\n        opposite: !1,\n        reversed: !1,\n        logarithmic: !1,\n        logBase: 10,\n        tickAmount: void 0,\n        stepSize: void 0,\n        forceNiceScale: !1,\n        max: void 0,\n        min: void 0,\n        floating: !1,\n        decimalsInFloat: void 0,\n        labels: {\n          show: !0,\n          showDuplicates: !1,\n          minWidth: 0,\n          maxWidth: 160,\n          offsetX: 0,\n          offsetY: 0,\n          align: void 0,\n          rotate: 0,\n          padding: 20,\n          style: {\n            colors: [],\n            fontSize: \"11px\",\n            fontWeight: 400,\n            fontFamily: void 0,\n            cssClass: \"\"\n          },\n          formatter: void 0\n        },\n        axisBorder: {\n          show: !1,\n          color: \"#e0e0e0\",\n          width: 1,\n          offsetX: 0,\n          offsetY: 0\n        },\n        axisTicks: {\n          show: !1,\n          color: \"#e0e0e0\",\n          width: 6,\n          offsetX: 0,\n          offsetY: 0\n        },\n        title: {\n          text: void 0,\n          rotate: -90,\n          offsetY: 0,\n          offsetX: 0,\n          style: {\n            color: void 0,\n            fontSize: \"11px\",\n            fontWeight: 900,\n            fontFamily: void 0,\n            cssClass: \"\"\n          }\n        },\n        tooltip: {\n          enabled: !1,\n          offsetX: 0\n        },\n        crosshairs: {\n          show: !0,\n          position: \"front\",\n          stroke: {\n            color: \"#b6b6b6\",\n            width: 1,\n            dashArray: 0\n          }\n        }\n      }, this.pointAnnotation = {\n        id: void 0,\n        x: 0,\n        y: null,\n        yAxisIndex: 0,\n        seriesIndex: void 0,\n        mouseEnter: void 0,\n        mouseLeave: void 0,\n        click: void 0,\n        marker: {\n          size: 4,\n          fillColor: \"#fff\",\n          strokeWidth: 2,\n          strokeColor: \"#333\",\n          shape: \"circle\",\n          offsetX: 0,\n          offsetY: 0,\n          cssClass: \"\"\n        },\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          borderRadius: 2,\n          text: void 0,\n          textAnchor: \"middle\",\n          offsetX: 0,\n          offsetY: 0,\n          mouseEnter: void 0,\n          mouseLeave: void 0,\n          click: void 0,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 2,\n              bottom: 2\n            }\n          }\n        },\n        customSVG: {\n          SVG: void 0,\n          cssClass: void 0,\n          offsetX: 0,\n          offsetY: 0\n        },\n        image: {\n          path: void 0,\n          width: 20,\n          height: 20,\n          offsetX: 0,\n          offsetY: 0\n        }\n      }, this.yAxisAnnotation = {\n        id: void 0,\n        y: 0,\n        y2: null,\n        strokeDashArray: 1,\n        fillColor: \"#c2c2c2\",\n        borderColor: \"#c2c2c2\",\n        borderWidth: 1,\n        opacity: .3,\n        offsetX: 0,\n        offsetY: 0,\n        width: \"100%\",\n        yAxisIndex: 0,\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          borderRadius: 2,\n          text: void 0,\n          textAnchor: \"end\",\n          position: \"right\",\n          offsetX: 0,\n          offsetY: -3,\n          mouseEnter: void 0,\n          mouseLeave: void 0,\n          click: void 0,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 2,\n              bottom: 2\n            }\n          }\n        }\n      }, this.xAxisAnnotation = {\n        id: void 0,\n        x: 0,\n        x2: null,\n        strokeDashArray: 1,\n        fillColor: \"#c2c2c2\",\n        borderColor: \"#c2c2c2\",\n        borderWidth: 1,\n        opacity: .3,\n        offsetX: 0,\n        offsetY: 0,\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          borderRadius: 2,\n          text: void 0,\n          textAnchor: \"middle\",\n          orientation: \"vertical\",\n          position: \"top\",\n          offsetX: 0,\n          offsetY: 0,\n          mouseEnter: void 0,\n          mouseLeave: void 0,\n          click: void 0,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 2,\n              bottom: 2\n            }\n          }\n        }\n      }, this.text = {\n        x: 0,\n        y: 0,\n        text: \"\",\n        textAnchor: \"start\",\n        foreColor: void 0,\n        fontSize: \"13px\",\n        fontFamily: void 0,\n        fontWeight: 400,\n        appendTo: \".apexcharts-annotations\",\n        backgroundColor: \"transparent\",\n        borderColor: \"#c2c2c2\",\n        borderRadius: 0,\n        borderWidth: 0,\n        paddingLeft: 4,\n        paddingRight: 4,\n        paddingTop: 2,\n        paddingBottom: 2\n      };\n    }\n    return s(t, [{\n      key: \"init\",\n      value: function () {\n        return {\n          annotations: {\n            yaxis: [this.yAxisAnnotation],\n            xaxis: [this.xAxisAnnotation],\n            points: [this.pointAnnotation],\n            texts: [],\n            images: [],\n            shapes: []\n          },\n          chart: {\n            animations: {\n              enabled: !0,\n              easing: \"easeinout\",\n              speed: 800,\n              animateGradually: {\n                delay: 150,\n                enabled: !0\n              },\n              dynamicAnimation: {\n                enabled: !0,\n                speed: 350\n              }\n            },\n            background: \"\",\n            locales: [z],\n            defaultLocale: \"en\",\n            dropShadow: {\n              enabled: !1,\n              enabledOnSeries: void 0,\n              top: 2,\n              left: 2,\n              blur: 4,\n              color: \"#000\",\n              opacity: .35\n            },\n            events: {\n              animationEnd: void 0,\n              beforeMount: void 0,\n              mounted: void 0,\n              updated: void 0,\n              click: void 0,\n              mouseMove: void 0,\n              mouseLeave: void 0,\n              xAxisLabelClick: void 0,\n              legendClick: void 0,\n              markerClick: void 0,\n              selection: void 0,\n              dataPointSelection: void 0,\n              dataPointMouseEnter: void 0,\n              dataPointMouseLeave: void 0,\n              beforeZoom: void 0,\n              beforeResetZoom: void 0,\n              zoomed: void 0,\n              scrolled: void 0,\n              brushScrolled: void 0\n            },\n            foreColor: \"#373d3f\",\n            fontFamily: \"Helvetica, Arial, sans-serif\",\n            height: \"auto\",\n            parentHeightOffset: 15,\n            redrawOnParentResize: !0,\n            redrawOnWindowResize: !0,\n            id: void 0,\n            group: void 0,\n            nonce: void 0,\n            offsetX: 0,\n            offsetY: 0,\n            selection: {\n              enabled: !1,\n              type: \"x\",\n              fill: {\n                color: \"#24292e\",\n                opacity: .1\n              },\n              stroke: {\n                width: 1,\n                color: \"#24292e\",\n                opacity: .4,\n                dashArray: 3\n              },\n              xaxis: {\n                min: void 0,\n                max: void 0\n              },\n              yaxis: {\n                min: void 0,\n                max: void 0\n              }\n            },\n            sparkline: {\n              enabled: !1\n            },\n            brush: {\n              enabled: !1,\n              autoScaleYaxis: !0,\n              target: void 0,\n              targets: void 0\n            },\n            stacked: !1,\n            stackOnlyBar: !0,\n            stackType: \"normal\",\n            toolbar: {\n              show: !0,\n              offsetX: 0,\n              offsetY: 0,\n              tools: {\n                download: !0,\n                selection: !0,\n                zoom: !0,\n                zoomin: !0,\n                zoomout: !0,\n                pan: !0,\n                reset: !0,\n                customIcons: []\n              },\n              export: {\n                csv: {\n                  filename: void 0,\n                  columnDelimiter: \",\",\n                  headerCategory: \"category\",\n                  headerValue: \"value\",\n                  categoryFormatter: void 0,\n                  valueFormatter: void 0\n                },\n                png: {\n                  filename: void 0\n                },\n                svg: {\n                  filename: void 0\n                },\n                scale: void 0,\n                width: void 0\n              },\n              autoSelected: \"zoom\"\n            },\n            type: \"line\",\n            width: \"100%\",\n            zoom: {\n              enabled: !0,\n              type: \"x\",\n              autoScaleYaxis: !1,\n              allowMouseWheelZoom: !0,\n              zoomedArea: {\n                fill: {\n                  color: \"#90CAF9\",\n                  opacity: .4\n                },\n                stroke: {\n                  color: \"#0D47A1\",\n                  opacity: .4,\n                  width: 1\n                }\n              }\n            }\n          },\n          plotOptions: {\n            line: {\n              isSlopeChart: !1\n            },\n            area: {\n              fillTo: \"origin\"\n            },\n            bar: {\n              horizontal: !1,\n              columnWidth: \"70%\",\n              barHeight: \"70%\",\n              distributed: !1,\n              borderRadius: 0,\n              borderRadiusApplication: \"around\",\n              borderRadiusWhenStacked: \"last\",\n              rangeBarOverlap: !0,\n              rangeBarGroupRows: !1,\n              hideZeroBarsWhenGrouped: !1,\n              isDumbbell: !1,\n              dumbbellColors: void 0,\n              isFunnel: !1,\n              isFunnel3d: !0,\n              colors: {\n                ranges: [],\n                backgroundBarColors: [],\n                backgroundBarOpacity: 1,\n                backgroundBarRadius: 0\n              },\n              dataLabels: {\n                position: \"top\",\n                maxItems: 100,\n                hideOverflowingLabels: !0,\n                orientation: \"horizontal\",\n                total: {\n                  enabled: !1,\n                  formatter: void 0,\n                  offsetX: 0,\n                  offsetY: 0,\n                  style: {\n                    color: \"#373d3f\",\n                    fontSize: \"12px\",\n                    fontFamily: void 0,\n                    fontWeight: 600\n                  }\n                }\n              }\n            },\n            bubble: {\n              zScaling: !0,\n              minBubbleRadius: void 0,\n              maxBubbleRadius: void 0\n            },\n            candlestick: {\n              colors: {\n                upward: \"#00B746\",\n                downward: \"#EF403C\"\n              },\n              wick: {\n                useFillColor: !0\n              }\n            },\n            boxPlot: {\n              colors: {\n                upper: \"#00E396\",\n                lower: \"#008FFB\"\n              }\n            },\n            heatmap: {\n              radius: 2,\n              enableShades: !0,\n              shadeIntensity: .5,\n              reverseNegativeShade: !1,\n              distributed: !1,\n              useFillColorAsStroke: !1,\n              colorScale: {\n                inverse: !1,\n                ranges: [],\n                min: void 0,\n                max: void 0\n              }\n            },\n            treemap: {\n              enableShades: !0,\n              shadeIntensity: .5,\n              distributed: !1,\n              reverseNegativeShade: !1,\n              useFillColorAsStroke: !1,\n              borderRadius: 4,\n              dataLabels: {\n                format: \"scale\"\n              },\n              colorScale: {\n                inverse: !1,\n                ranges: [],\n                min: void 0,\n                max: void 0\n              }\n            },\n            radialBar: {\n              inverseOrder: !1,\n              startAngle: 0,\n              endAngle: 360,\n              offsetX: 0,\n              offsetY: 0,\n              hollow: {\n                margin: 5,\n                size: \"50%\",\n                background: \"transparent\",\n                image: void 0,\n                imageWidth: 150,\n                imageHeight: 150,\n                imageOffsetX: 0,\n                imageOffsetY: 0,\n                imageClipped: !0,\n                position: \"front\",\n                dropShadow: {\n                  enabled: !1,\n                  top: 0,\n                  left: 0,\n                  blur: 3,\n                  color: \"#000\",\n                  opacity: .5\n                }\n              },\n              track: {\n                show: !0,\n                startAngle: void 0,\n                endAngle: void 0,\n                background: \"#f2f2f2\",\n                strokeWidth: \"97%\",\n                opacity: 1,\n                margin: 5,\n                dropShadow: {\n                  enabled: !1,\n                  top: 0,\n                  left: 0,\n                  blur: 3,\n                  color: \"#000\",\n                  opacity: .5\n                }\n              },\n              dataLabels: {\n                show: !0,\n                name: {\n                  show: !0,\n                  fontSize: \"16px\",\n                  fontFamily: void 0,\n                  fontWeight: 600,\n                  color: void 0,\n                  offsetY: 0,\n                  formatter: function (t) {\n                    return t;\n                  }\n                },\n                value: {\n                  show: !0,\n                  fontSize: \"14px\",\n                  fontFamily: void 0,\n                  fontWeight: 400,\n                  color: void 0,\n                  offsetY: 16,\n                  formatter: function (t) {\n                    return t + \"%\";\n                  }\n                },\n                total: {\n                  show: !1,\n                  label: \"Total\",\n                  fontSize: \"16px\",\n                  fontWeight: 600,\n                  fontFamily: void 0,\n                  color: void 0,\n                  formatter: function (t) {\n                    return t.globals.seriesTotals.reduce(function (t, e) {\n                      return t + e;\n                    }, 0) / t.globals.series.length + \"%\";\n                  }\n                }\n              },\n              barLabels: {\n                enabled: !1,\n                offsetX: 0,\n                offsetY: 0,\n                useSeriesColors: !0,\n                fontFamily: void 0,\n                fontWeight: 600,\n                fontSize: \"16px\",\n                formatter: function (t) {\n                  return t;\n                },\n                onClick: void 0\n              }\n            },\n            pie: {\n              customScale: 1,\n              offsetX: 0,\n              offsetY: 0,\n              startAngle: 0,\n              endAngle: 360,\n              expandOnClick: !0,\n              dataLabels: {\n                offset: 0,\n                minAngleToShowLabel: 10\n              },\n              donut: {\n                size: \"65%\",\n                background: \"transparent\",\n                labels: {\n                  show: !1,\n                  name: {\n                    show: !0,\n                    fontSize: \"16px\",\n                    fontFamily: void 0,\n                    fontWeight: 600,\n                    color: void 0,\n                    offsetY: -10,\n                    formatter: function (t) {\n                      return t;\n                    }\n                  },\n                  value: {\n                    show: !0,\n                    fontSize: \"20px\",\n                    fontFamily: void 0,\n                    fontWeight: 400,\n                    color: void 0,\n                    offsetY: 10,\n                    formatter: function (t) {\n                      return t;\n                    }\n                  },\n                  total: {\n                    show: !1,\n                    showAlways: !1,\n                    label: \"Total\",\n                    fontSize: \"16px\",\n                    fontWeight: 400,\n                    fontFamily: void 0,\n                    color: void 0,\n                    formatter: function (t) {\n                      return t.globals.seriesTotals.reduce(function (t, e) {\n                        return t + e;\n                      }, 0);\n                    }\n                  }\n                }\n              }\n            },\n            polarArea: {\n              rings: {\n                strokeWidth: 1,\n                strokeColor: \"#e8e8e8\"\n              },\n              spokes: {\n                strokeWidth: 1,\n                connectorColors: \"#e8e8e8\"\n              }\n            },\n            radar: {\n              size: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              polygons: {\n                strokeWidth: 1,\n                strokeColors: \"#e8e8e8\",\n                connectorColors: \"#e8e8e8\",\n                fill: {\n                  colors: void 0\n                }\n              }\n            }\n          },\n          colors: void 0,\n          dataLabels: {\n            enabled: !0,\n            enabledOnSeries: void 0,\n            formatter: function (t) {\n              return null !== t ? t : \"\";\n            },\n            textAnchor: \"middle\",\n            distributed: !1,\n            offsetX: 0,\n            offsetY: 0,\n            style: {\n              fontSize: \"12px\",\n              fontFamily: void 0,\n              fontWeight: 600,\n              colors: void 0\n            },\n            background: {\n              enabled: !0,\n              foreColor: \"#fff\",\n              borderRadius: 2,\n              padding: 4,\n              opacity: .9,\n              borderWidth: 1,\n              borderColor: \"#fff\",\n              dropShadow: {\n                enabled: !1,\n                top: 1,\n                left: 1,\n                blur: 1,\n                color: \"#000\",\n                opacity: .45\n              }\n            },\n            dropShadow: {\n              enabled: !1,\n              top: 1,\n              left: 1,\n              blur: 1,\n              color: \"#000\",\n              opacity: .45\n            }\n          },\n          fill: {\n            type: \"solid\",\n            colors: void 0,\n            opacity: .85,\n            gradient: {\n              shade: \"dark\",\n              type: \"horizontal\",\n              shadeIntensity: .5,\n              gradientToColors: void 0,\n              inverseColors: !0,\n              opacityFrom: 1,\n              opacityTo: 1,\n              stops: [0, 50, 100],\n              colorStops: []\n            },\n            image: {\n              src: [],\n              width: void 0,\n              height: void 0\n            },\n            pattern: {\n              style: \"squares\",\n              width: 6,\n              height: 6,\n              strokeWidth: 2\n            }\n          },\n          forecastDataPoints: {\n            count: 0,\n            fillOpacity: .5,\n            strokeWidth: void 0,\n            dashArray: 4\n          },\n          grid: {\n            show: !0,\n            borderColor: \"#e0e0e0\",\n            strokeDashArray: 0,\n            position: \"back\",\n            xaxis: {\n              lines: {\n                show: !1\n              }\n            },\n            yaxis: {\n              lines: {\n                show: !0\n              }\n            },\n            row: {\n              colors: void 0,\n              opacity: .5\n            },\n            column: {\n              colors: void 0,\n              opacity: .5\n            },\n            padding: {\n              top: 0,\n              right: 10,\n              bottom: 0,\n              left: 12\n            }\n          },\n          labels: [],\n          legend: {\n            show: !0,\n            showForSingleSeries: !1,\n            showForNullSeries: !0,\n            showForZeroSeries: !0,\n            floating: !1,\n            position: \"bottom\",\n            horizontalAlign: \"center\",\n            inverseOrder: !1,\n            fontSize: \"12px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            width: void 0,\n            height: void 0,\n            formatter: void 0,\n            tooltipHoverFormatter: void 0,\n            offsetX: -20,\n            offsetY: 4,\n            customLegendItems: [],\n            labels: {\n              colors: void 0,\n              useSeriesColors: !1\n            },\n            markers: {\n              size: 7,\n              fillColors: void 0,\n              strokeWidth: 1,\n              shape: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              customHTML: void 0,\n              onClick: void 0\n            },\n            itemMargin: {\n              horizontal: 5,\n              vertical: 4\n            },\n            onItemClick: {\n              toggleDataSeries: !0\n            },\n            onItemHover: {\n              highlightDataSeries: !0\n            }\n          },\n          markers: {\n            discrete: [],\n            size: 0,\n            colors: void 0,\n            strokeColors: \"#fff\",\n            strokeWidth: 2,\n            strokeOpacity: .9,\n            strokeDashArray: 0,\n            fillOpacity: 1,\n            shape: \"circle\",\n            offsetX: 0,\n            offsetY: 0,\n            showNullDataPoints: !0,\n            onClick: void 0,\n            onDblClick: void 0,\n            hover: {\n              size: void 0,\n              sizeOffset: 3\n            }\n          },\n          noData: {\n            text: void 0,\n            align: \"center\",\n            verticalAlign: \"middle\",\n            offsetX: 0,\n            offsetY: 0,\n            style: {\n              color: void 0,\n              fontSize: \"14px\",\n              fontFamily: void 0\n            }\n          },\n          responsive: [],\n          series: void 0,\n          states: {\n            normal: {\n              filter: {\n                type: \"none\",\n                value: 0\n              }\n            },\n            hover: {\n              filter: {\n                type: \"lighten\",\n                value: .1\n              }\n            },\n            active: {\n              allowMultipleDataPointsSelection: !1,\n              filter: {\n                type: \"darken\",\n                value: .5\n              }\n            }\n          },\n          title: {\n            text: void 0,\n            align: \"left\",\n            margin: 5,\n            offsetX: 0,\n            offsetY: 0,\n            floating: !1,\n            style: {\n              fontSize: \"14px\",\n              fontWeight: 900,\n              fontFamily: void 0,\n              color: void 0\n            }\n          },\n          subtitle: {\n            text: void 0,\n            align: \"left\",\n            margin: 5,\n            offsetX: 0,\n            offsetY: 30,\n            floating: !1,\n            style: {\n              fontSize: \"12px\",\n              fontWeight: 400,\n              fontFamily: void 0,\n              color: void 0\n            }\n          },\n          stroke: {\n            show: !0,\n            curve: \"smooth\",\n            lineCap: \"butt\",\n            width: 2,\n            colors: void 0,\n            dashArray: 0,\n            fill: {\n              type: \"solid\",\n              colors: void 0,\n              opacity: .85,\n              gradient: {\n                shade: \"dark\",\n                type: \"horizontal\",\n                shadeIntensity: .5,\n                gradientToColors: void 0,\n                inverseColors: !0,\n                opacityFrom: 1,\n                opacityTo: 1,\n                stops: [0, 50, 100],\n                colorStops: []\n              }\n            }\n          },\n          tooltip: {\n            enabled: !0,\n            enabledOnSeries: void 0,\n            shared: !0,\n            hideEmptySeries: !1,\n            followCursor: !1,\n            intersect: !1,\n            inverseOrder: !1,\n            custom: void 0,\n            fillSeriesColor: !1,\n            theme: \"light\",\n            cssClass: \"\",\n            style: {\n              fontSize: \"12px\",\n              fontFamily: void 0\n            },\n            onDatasetHover: {\n              highlightDataSeries: !1\n            },\n            x: {\n              show: !0,\n              format: \"dd MMM\",\n              formatter: void 0\n            },\n            y: {\n              formatter: void 0,\n              title: {\n                formatter: function (t) {\n                  return t ? t + \": \" : \"\";\n                }\n              }\n            },\n            z: {\n              formatter: void 0,\n              title: \"Size: \"\n            },\n            marker: {\n              show: !0,\n              fillColors: void 0\n            },\n            items: {\n              display: \"flex\"\n            },\n            fixed: {\n              enabled: !1,\n              position: \"topRight\",\n              offsetX: 0,\n              offsetY: 0\n            }\n          },\n          xaxis: {\n            type: \"category\",\n            categories: [],\n            convertedCatToNumeric: !1,\n            offsetX: 0,\n            offsetY: 0,\n            overwriteCategories: void 0,\n            labels: {\n              show: !0,\n              rotate: -45,\n              rotateAlways: !1,\n              hideOverlappingLabels: !0,\n              trim: !1,\n              minHeight: void 0,\n              maxHeight: 120,\n              showDuplicates: !0,\n              style: {\n                colors: [],\n                fontSize: \"12px\",\n                fontWeight: 400,\n                fontFamily: void 0,\n                cssClass: \"\"\n              },\n              offsetX: 0,\n              offsetY: 0,\n              format: void 0,\n              formatter: void 0,\n              datetimeUTC: !0,\n              datetimeFormatter: {\n                year: \"yyyy\",\n                month: \"MMM 'yy\",\n                day: \"dd MMM\",\n                hour: \"HH:mm\",\n                minute: \"HH:mm:ss\",\n                second: \"HH:mm:ss\"\n              }\n            },\n            group: {\n              groups: [],\n              style: {\n                colors: [],\n                fontSize: \"12px\",\n                fontWeight: 400,\n                fontFamily: void 0,\n                cssClass: \"\"\n              }\n            },\n            axisBorder: {\n              show: !0,\n              color: \"#e0e0e0\",\n              width: \"100%\",\n              height: 1,\n              offsetX: 0,\n              offsetY: 0\n            },\n            axisTicks: {\n              show: !0,\n              color: \"#e0e0e0\",\n              height: 6,\n              offsetX: 0,\n              offsetY: 0\n            },\n            stepSize: void 0,\n            tickAmount: void 0,\n            tickPlacement: \"on\",\n            min: void 0,\n            max: void 0,\n            range: void 0,\n            floating: !1,\n            decimalsInFloat: void 0,\n            position: \"bottom\",\n            title: {\n              text: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              style: {\n                color: void 0,\n                fontSize: \"12px\",\n                fontWeight: 900,\n                fontFamily: void 0,\n                cssClass: \"\"\n              }\n            },\n            crosshairs: {\n              show: !0,\n              width: 1,\n              position: \"back\",\n              opacity: .9,\n              stroke: {\n                color: \"#b6b6b6\",\n                width: 1,\n                dashArray: 3\n              },\n              fill: {\n                type: \"solid\",\n                color: \"#B1B9C4\",\n                gradient: {\n                  colorFrom: \"#D8E3F0\",\n                  colorTo: \"#BED1E6\",\n                  stops: [0, 100],\n                  opacityFrom: .4,\n                  opacityTo: .5\n                }\n              },\n              dropShadow: {\n                enabled: !1,\n                left: 0,\n                top: 0,\n                blur: 1,\n                opacity: .4\n              }\n            },\n            tooltip: {\n              enabled: !0,\n              offsetY: 0,\n              formatter: void 0,\n              style: {\n                fontSize: \"12px\",\n                fontFamily: void 0\n              }\n            }\n          },\n          yaxis: this.yAxis,\n          theme: {\n            mode: \"\",\n            palette: \"palette1\",\n            monochrome: {\n              enabled: !1,\n              color: \"#008FFB\",\n              shadeTo: \"light\",\n              shadeIntensity: .65\n            }\n          }\n        };\n      }\n    }]), t;\n  }(),\n  E = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.graphics = new k(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.helpers = new S(this), this.xAxisAnnotations = new C(this), this.yAxisAnnotations = new I(this), this.pointsAnnotations = new T(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;\n    }\n    return s(t, [{\n      key: \"drawAxesAnnotations\",\n      value: function () {\n        var t = this.w;\n        if (t.globals.axisCharts && t.globals.dataPoints) {\n          for (var e = this.yAxisAnnotations.drawYAxisAnnotations(), i = this.xAxisAnnotations.drawXAxisAnnotations(), a = this.pointsAnnotations.drawPointAnnotations(), s = t.config.chart.animations.enabled, r = [e, i, a], o = [i.node, e.node, a.node], n = 0; n < 3; n++) t.globals.dom.elGraphical.add(r[n]), !s || t.globals.resized || t.globals.dataChanged || \"scatter\" !== t.config.chart.type && \"bubble\" !== t.config.chart.type && t.globals.dataPoints > 1 && o[n].classList.add(\"apexcharts-element-hidden\"), t.globals.delayedElements.push({\n            el: o[n],\n            index: 0\n          });\n          this.helpers.annotationsBackground();\n        }\n      }\n    }, {\n      key: \"drawImageAnnos\",\n      value: function () {\n        var t = this;\n        this.w.config.annotations.images.map(function (e, i) {\n          t.addImage(e, i);\n        });\n      }\n    }, {\n      key: \"drawTextAnnos\",\n      value: function () {\n        var t = this;\n        this.w.config.annotations.texts.map(function (e, i) {\n          t.addText(e, i);\n        });\n      }\n    }, {\n      key: \"addXaxisAnnotation\",\n      value: function (t, e, i) {\n        this.xAxisAnnotations.addXaxisAnnotation(t, e, i);\n      }\n    }, {\n      key: \"addYaxisAnnotation\",\n      value: function (t, e, i) {\n        this.yAxisAnnotations.addYaxisAnnotation(t, e, i);\n      }\n    }, {\n      key: \"addPointAnnotation\",\n      value: function (t, e, i) {\n        this.pointsAnnotations.addPointAnnotation(t, e, i);\n      }\n    }, {\n      key: \"addText\",\n      value: function (t, e) {\n        var i = t.x,\n          a = t.y,\n          s = t.text,\n          r = t.textAnchor,\n          o = t.foreColor,\n          n = t.fontSize,\n          l = t.fontFamily,\n          h = t.fontWeight,\n          c = t.cssClass,\n          d = t.backgroundColor,\n          g = t.borderWidth,\n          u = t.strokeDashArray,\n          f = t.borderRadius,\n          p = t.borderColor,\n          x = t.appendTo,\n          b = void 0 === x ? \".apexcharts-svg\" : x,\n          v = t.paddingLeft,\n          m = void 0 === v ? 4 : v,\n          y = t.paddingRight,\n          w = void 0 === y ? 4 : y,\n          k = t.paddingBottom,\n          A = void 0 === k ? 2 : k,\n          S = t.paddingTop,\n          C = void 0 === S ? 2 : S,\n          L = this.w,\n          P = this.graphics.drawText({\n            x: i,\n            y: a,\n            text: s,\n            textAnchor: r || \"start\",\n            fontSize: n || \"12px\",\n            fontWeight: h || \"regular\",\n            fontFamily: l || L.config.chart.fontFamily,\n            foreColor: o || L.config.chart.foreColor,\n            cssClass: c\n          }),\n          M = L.globals.dom.baseEl.querySelector(b);\n        M && M.appendChild(P.node);\n        var I = P.bbox();\n        if (s) {\n          var T = this.graphics.drawRect(I.x - m, I.y - C, I.width + m + w, I.height + A + C, f, d || \"transparent\", 1, g, p, u);\n          M.insertBefore(T.node, P.node);\n        }\n      }\n    }, {\n      key: \"addImage\",\n      value: function (t, e) {\n        var i = this.w,\n          a = t.path,\n          s = t.x,\n          r = void 0 === s ? 0 : s,\n          o = t.y,\n          n = void 0 === o ? 0 : o,\n          l = t.width,\n          h = void 0 === l ? 20 : l,\n          c = t.height,\n          d = void 0 === c ? 20 : c,\n          g = t.appendTo,\n          u = void 0 === g ? \".apexcharts-svg\" : g,\n          f = i.globals.dom.Paper.image(a);\n        f.size(h, d).move(r, n);\n        var p = i.globals.dom.baseEl.querySelector(u);\n        return p && p.appendChild(f.node), f;\n      }\n    }, {\n      key: \"addXaxisAnnotationExternal\",\n      value: function (t, e, i) {\n        return this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"xaxis\",\n          contextMethod: i.addXaxisAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addYaxisAnnotationExternal\",\n      value: function (t, e, i) {\n        return this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"yaxis\",\n          contextMethod: i.addYaxisAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addPointAnnotationExternal\",\n      value: function (t, e, i) {\n        return void 0 === this.invertAxis && (this.invertAxis = i.w.globals.isBarHorizontal), this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"point\",\n          contextMethod: i.addPointAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addAnnotationExternal\",\n      value: function (t) {\n        var e = t.params,\n          i = t.pushToMemory,\n          a = t.context,\n          s = t.type,\n          r = t.contextMethod,\n          o = a,\n          n = o.w,\n          l = n.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations\")),\n          h = l.childNodes.length + 1,\n          c = new X(),\n          d = Object.assign({}, \"xaxis\" === s ? c.xAxisAnnotation : \"yaxis\" === s ? c.yAxisAnnotation : c.pointAnnotation),\n          g = m.extend(d, e);\n        switch (s) {\n          case \"xaxis\":\n            this.addXaxisAnnotation(g, l, h);\n            break;\n          case \"yaxis\":\n            this.addYaxisAnnotation(g, l, h);\n            break;\n          case \"point\":\n            this.addPointAnnotation(g, l, h);\n        }\n        var u = n.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations .apexcharts-\").concat(s, \"-annotation-label[rel='\").concat(h, \"']\")),\n          f = this.helpers.addBackgroundToAnno(u, g);\n        return f && l.insertBefore(f.node, u), i && n.globals.memory.methodsToExec.push({\n          context: o,\n          id: g.id ? g.id : m.randomId(),\n          method: r,\n          label: \"addAnnotation\",\n          params: e\n        }), a;\n      }\n    }, {\n      key: \"clearAnnotations\",\n      value: function (t) {\n        for (var e = t.w, i = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations\"), a = e.globals.memory.methodsToExec.length - 1; a >= 0; a--) \"addText\" !== e.globals.memory.methodsToExec[a].label && \"addAnnotation\" !== e.globals.memory.methodsToExec[a].label || e.globals.memory.methodsToExec.splice(a, 1);\n        i = m.listToArray(i), Array.prototype.forEach.call(i, function (t) {\n          for (; t.firstChild;) t.removeChild(t.firstChild);\n        });\n      }\n    }, {\n      key: \"removeAnnotation\",\n      value: function (t, e) {\n        var i = t.w,\n          a = i.globals.dom.baseEl.querySelectorAll(\".\".concat(e));\n        a && (i.globals.memory.methodsToExec.map(function (t, a) {\n          t.id === e && i.globals.memory.methodsToExec.splice(a, 1);\n        }), Array.prototype.forEach.call(a, function (t) {\n          t.parentElement.removeChild(t);\n        }));\n      }\n    }]), t;\n  }(),\n  Y = function (t) {\n    var e,\n      i = t.isTimeline,\n      a = t.ctx,\n      s = t.seriesIndex,\n      r = t.dataPointIndex,\n      o = t.y1,\n      n = t.y2,\n      l = t.w,\n      h = l.globals.seriesRangeStart[s][r],\n      c = l.globals.seriesRangeEnd[s][r],\n      d = l.globals.labels[r],\n      g = l.config.series[s].name ? l.config.series[s].name : \"\",\n      u = l.globals.ttKeyFormatter,\n      f = l.config.tooltip.y.title.formatter,\n      p = {\n        w: l,\n        seriesIndex: s,\n        dataPointIndex: r,\n        start: h,\n        end: c\n      };\n    (\"function\" == typeof f && (g = f(g, p)), null !== (e = l.config.series[s].data[r]) && void 0 !== e && e.x && (d = l.config.series[s].data[r].x), i) || \"datetime\" === l.config.xaxis.type && (d = new P(a).xLabelFormat(l.globals.ttKeyFormatter, d, d, {\n      i: void 0,\n      dateFormatter: new L(a).formatDate,\n      w: l\n    }));\n    \"function\" == typeof u && (d = u(d, p)), Number.isFinite(o) && Number.isFinite(n) && (h = o, c = n);\n    var x = \"\",\n      b = \"\",\n      v = l.globals.colors[s];\n    if (void 0 === l.config.tooltip.x.formatter) {\n      if (\"datetime\" === l.config.xaxis.type) {\n        var m = new L(a);\n        x = m.formatDate(m.getDate(h), l.config.tooltip.x.format), b = m.formatDate(m.getDate(c), l.config.tooltip.x.format);\n      } else x = h, b = c;\n    } else x = l.config.tooltip.x.formatter(h), b = l.config.tooltip.x.formatter(c);\n    return {\n      start: h,\n      end: c,\n      startVal: x,\n      endVal: b,\n      ylabel: d,\n      color: v,\n      seriesName: g\n    };\n  },\n  R = function (t) {\n    var e = t.color,\n      i = t.seriesName,\n      a = t.ylabel,\n      s = t.start,\n      r = t.end,\n      o = t.seriesIndex,\n      n = t.dataPointIndex,\n      l = t.ctx.tooltip.tooltipLabels.getFormatters(o);\n    s = l.yLbFormatter(s), r = l.yLbFormatter(r);\n    var h = l.yLbFormatter(t.w.globals.series[o][n]),\n      c = '<span class=\"value start-value\">\\n  '.concat(s, '\\n  </span> <span class=\"separator\">-</span> <span class=\"value end-value\">\\n  ').concat(r, \"\\n  </span>\");\n    return '<div class=\"apexcharts-tooltip-rangebar\"><div> <span class=\"series-name\" style=\"color: ' + e + '\">' + (i || \"\") + '</span></div><div> <span class=\"category\">' + a + \": </span> \" + (t.w.globals.comboCharts ? \"rangeArea\" === t.w.config.series[o].type || \"rangeBar\" === t.w.config.series[o].type ? c : \"<span>\".concat(h, \"</span>\") : c) + \" </div></div>\";\n  },\n  F = function () {\n    function t(e) {\n      i(this, t), this.opts = e;\n    }\n    return s(t, [{\n      key: \"hideYAxis\",\n      value: function () {\n        this.opts.yaxis[0].show = !1, this.opts.yaxis[0].title.text = \"\", this.opts.yaxis[0].axisBorder.show = !1, this.opts.yaxis[0].axisTicks.show = !1, this.opts.yaxis[0].floating = !0;\n      }\n    }, {\n      key: \"line\",\n      value: function () {\n        return {\n          chart: {\n            animations: {\n              easing: \"swing\"\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          stroke: {\n            width: 5,\n            curve: \"straight\"\n          },\n          markers: {\n            size: 0,\n            hover: {\n              sizeOffset: 6\n            }\n          },\n          xaxis: {\n            crosshairs: {\n              width: 1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"sparkline\",\n      value: function (t) {\n        this.hideYAxis();\n        return m.extend(t, {\n          grid: {\n            show: !1,\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          },\n          legend: {\n            show: !1\n          },\n          xaxis: {\n            labels: {\n              show: !1\n            },\n            tooltip: {\n              enabled: !1\n            },\n            axisBorder: {\n              show: !1\n            },\n            axisTicks: {\n              show: !1\n            }\n          },\n          chart: {\n            toolbar: {\n              show: !1\n            },\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          }\n        });\n      }\n    }, {\n      key: \"slope\",\n      value: function () {\n        return this.hideYAxis(), {\n          chart: {\n            toolbar: {\n              show: !1\n            },\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            enabled: !0,\n            formatter: function (t, e) {\n              var i = e.w.config.series[e.seriesIndex].name;\n              return null !== t ? i + \": \" + t : \"\";\n            },\n            background: {\n              enabled: !1\n            },\n            offsetX: -5\n          },\n          grid: {\n            xaxis: {\n              lines: {\n                show: !0\n              }\n            },\n            yaxis: {\n              lines: {\n                show: !1\n              }\n            }\n          },\n          xaxis: {\n            position: \"top\",\n            labels: {\n              style: {\n                fontSize: 14,\n                fontWeight: 900\n              }\n            },\n            tooltip: {\n              enabled: !1\n            },\n            crosshairs: {\n              show: !1\n            }\n          },\n          markers: {\n            size: 8,\n            hover: {\n              sizeOffset: 1\n            }\n          },\n          legend: {\n            show: !1\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0,\n            followCursor: !0\n          },\n          stroke: {\n            width: 5,\n            curve: \"straight\"\n          }\n        };\n      }\n    }, {\n      key: \"bar\",\n      value: function () {\n        return {\n          chart: {\n            stacked: !1,\n            animations: {\n              easing: \"swing\"\n            }\n          },\n          plotOptions: {\n            bar: {\n              dataLabels: {\n                position: \"center\"\n              }\n            }\n          },\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            },\n            background: {\n              enabled: !1\n            }\n          },\n          stroke: {\n            width: 0,\n            lineCap: \"round\"\n          },\n          fill: {\n            opacity: .85\n          },\n          legend: {\n            markers: {\n              shape: \"square\"\n            }\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0\n          },\n          xaxis: {\n            tooltip: {\n              enabled: !1\n            },\n            tickPlacement: \"between\",\n            crosshairs: {\n              width: \"barWidth\",\n              position: \"back\",\n              fill: {\n                type: \"gradient\"\n              },\n              dropShadow: {\n                enabled: !1\n              },\n              stroke: {\n                width: 0\n              }\n            }\n          }\n        };\n      }\n    }, {\n      key: \"funnel\",\n      value: function () {\n        return this.hideYAxis(), g(g({}, this.bar()), {}, {\n          chart: {\n            animations: {\n              easing: \"linear\",\n              speed: 800,\n              animateGradually: {\n                enabled: !1\n              }\n            }\n          },\n          plotOptions: {\n            bar: {\n              horizontal: !0,\n              borderRadiusApplication: \"around\",\n              borderRadius: 0,\n              dataLabels: {\n                position: \"center\"\n              }\n            }\n          },\n          grid: {\n            show: !1,\n            padding: {\n              left: 0,\n              right: 0\n            }\n          },\n          xaxis: {\n            labels: {\n              show: !1\n            },\n            tooltip: {\n              enabled: !1\n            },\n            axisBorder: {\n              show: !1\n            },\n            axisTicks: {\n              show: !1\n            }\n          }\n        });\n      }\n    }, {\n      key: \"candlestick\",\n      value: function () {\n        var t = this;\n        return {\n          stroke: {\n            width: 1,\n            colors: [\"#333\"]\n          },\n          fill: {\n            opacity: 1\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          tooltip: {\n            shared: !0,\n            custom: function (e) {\n              var i = e.seriesIndex,\n                a = e.dataPointIndex,\n                s = e.w;\n              return t._getBoxTooltip(s, i, a, [\"Open\", \"High\", \"\", \"Low\", \"Close\"], \"candlestick\");\n            }\n          },\n          states: {\n            active: {\n              filter: {\n                type: \"none\"\n              }\n            }\n          },\n          xaxis: {\n            crosshairs: {\n              width: 1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"boxPlot\",\n      value: function () {\n        var t = this;\n        return {\n          chart: {\n            animations: {\n              dynamicAnimation: {\n                enabled: !1\n              }\n            }\n          },\n          stroke: {\n            width: 1,\n            colors: [\"#24292e\"]\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          tooltip: {\n            shared: !0,\n            custom: function (e) {\n              var i = e.seriesIndex,\n                a = e.dataPointIndex,\n                s = e.w;\n              return t._getBoxTooltip(s, i, a, [\"Minimum\", \"Q1\", \"Median\", \"Q3\", \"Maximum\"], \"boxPlot\");\n            }\n          },\n          markers: {\n            size: 7,\n            strokeWidth: 1,\n            strokeColors: \"#111\"\n          },\n          xaxis: {\n            crosshairs: {\n              width: 1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"rangeBar\",\n      value: function () {\n        return {\n          chart: {\n            animations: {\n              animateGradually: !1\n            }\n          },\n          stroke: {\n            width: 0,\n            lineCap: \"square\"\n          },\n          plotOptions: {\n            bar: {\n              borderRadius: 0,\n              dataLabels: {\n                position: \"center\"\n              }\n            }\n          },\n          dataLabels: {\n            enabled: !1,\n            formatter: function (t, e) {\n              e.ctx;\n              var i = e.seriesIndex,\n                a = e.dataPointIndex,\n                s = e.w,\n                r = function () {\n                  var t = s.globals.seriesRangeStart[i][a];\n                  return s.globals.seriesRangeEnd[i][a] - t;\n                };\n              return s.globals.comboCharts ? \"rangeBar\" === s.config.series[i].type || \"rangeArea\" === s.config.series[i].type ? r() : t : r();\n            },\n            background: {\n              enabled: !1\n            },\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          markers: {\n            size: 10\n          },\n          tooltip: {\n            shared: !1,\n            followCursor: !0,\n            custom: function (t) {\n              return t.w.config.plotOptions && t.w.config.plotOptions.bar && t.w.config.plotOptions.bar.horizontal ? function (t) {\n                var e = Y(g(g({}, t), {}, {\n                    isTimeline: !0\n                  })),\n                  i = e.color,\n                  a = e.seriesName,\n                  s = e.ylabel,\n                  r = e.startVal,\n                  o = e.endVal;\n                return R(g(g({}, t), {}, {\n                  color: i,\n                  seriesName: a,\n                  ylabel: s,\n                  start: r,\n                  end: o\n                }));\n              }(t) : function (t) {\n                var e = Y(t),\n                  i = e.color,\n                  a = e.seriesName,\n                  s = e.ylabel,\n                  r = e.start,\n                  o = e.end;\n                return R(g(g({}, t), {}, {\n                  color: i,\n                  seriesName: a,\n                  ylabel: s,\n                  start: r,\n                  end: o\n                }));\n              }(t);\n            }\n          },\n          xaxis: {\n            tickPlacement: \"between\",\n            tooltip: {\n              enabled: !1\n            },\n            crosshairs: {\n              stroke: {\n                width: 0\n              }\n            }\n          }\n        };\n      }\n    }, {\n      key: \"dumbbell\",\n      value: function (t) {\n        var e, i;\n        return null !== (e = t.plotOptions.bar) && void 0 !== e && e.barHeight || (t.plotOptions.bar.barHeight = 2), null !== (i = t.plotOptions.bar) && void 0 !== i && i.columnWidth || (t.plotOptions.bar.columnWidth = 2), t;\n      }\n    }, {\n      key: \"area\",\n      value: function () {\n        return {\n          stroke: {\n            width: 4,\n            fill: {\n              type: \"solid\",\n              gradient: {\n                inverseColors: !1,\n                shade: \"light\",\n                type: \"vertical\",\n                opacityFrom: .65,\n                opacityTo: .5,\n                stops: [0, 100, 100]\n              }\n            }\n          },\n          fill: {\n            type: \"gradient\",\n            gradient: {\n              inverseColors: !1,\n              shade: \"light\",\n              type: \"vertical\",\n              opacityFrom: .65,\n              opacityTo: .5,\n              stops: [0, 100, 100]\n            }\n          },\n          markers: {\n            size: 0,\n            hover: {\n              sizeOffset: 6\n            }\n          },\n          tooltip: {\n            followCursor: !1\n          }\n        };\n      }\n    }, {\n      key: \"rangeArea\",\n      value: function () {\n        return {\n          stroke: {\n            curve: \"straight\",\n            width: 0\n          },\n          fill: {\n            type: \"solid\",\n            opacity: .6\n          },\n          markers: {\n            size: 0\n          },\n          states: {\n            hover: {\n              filter: {\n                type: \"none\"\n              }\n            },\n            active: {\n              filter: {\n                type: \"none\"\n              }\n            }\n          },\n          tooltip: {\n            intersect: !1,\n            shared: !0,\n            followCursor: !0,\n            custom: function (t) {\n              return function (t) {\n                var e = Y(t),\n                  i = e.color,\n                  a = e.seriesName,\n                  s = e.ylabel,\n                  r = e.start,\n                  o = e.end;\n                return R(g(g({}, t), {}, {\n                  color: i,\n                  seriesName: a,\n                  ylabel: s,\n                  start: r,\n                  end: o\n                }));\n              }(t);\n            }\n          }\n        };\n      }\n    }, {\n      key: \"brush\",\n      value: function (t) {\n        return m.extend(t, {\n          chart: {\n            toolbar: {\n              autoSelected: \"selection\",\n              show: !1\n            },\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          stroke: {\n            width: 1\n          },\n          tooltip: {\n            enabled: !1\n          },\n          xaxis: {\n            tooltip: {\n              enabled: !1\n            }\n          }\n        });\n      }\n    }, {\n      key: \"stacked100\",\n      value: function (t) {\n        t.dataLabels = t.dataLabels || {}, t.dataLabels.formatter = t.dataLabels.formatter || void 0;\n        var e = t.dataLabels.formatter;\n        return t.yaxis.forEach(function (e, i) {\n          t.yaxis[i].min = 0, t.yaxis[i].max = 100;\n        }), \"bar\" === t.chart.type && (t.dataLabels.formatter = e || function (t) {\n          return \"number\" == typeof t && t ? t.toFixed(0) + \"%\" : t;\n        }), t;\n      }\n    }, {\n      key: \"stackedBars\",\n      value: function () {\n        var t = this.bar();\n        return g(g({}, t), {}, {\n          plotOptions: g(g({}, t.plotOptions), {}, {\n            bar: g(g({}, t.plotOptions.bar), {}, {\n              borderRadiusApplication: \"end\",\n              borderRadiusWhenStacked: \"last\"\n            })\n          })\n        });\n      }\n    }, {\n      key: \"convertCatToNumeric\",\n      value: function (t) {\n        return t.xaxis.convertedCatToNumeric = !0, t;\n      }\n    }, {\n      key: \"convertCatToNumericXaxis\",\n      value: function (t, e, i) {\n        t.xaxis.type = \"numeric\", t.xaxis.labels = t.xaxis.labels || {}, t.xaxis.labels.formatter = t.xaxis.labels.formatter || function (t) {\n          return m.isNumber(t) ? Math.floor(t) : t;\n        };\n        var a = t.xaxis.labels.formatter,\n          s = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;\n        return i && i.length && (s = i.map(function (t) {\n          return Array.isArray(t) ? t : String(t);\n        })), s && s.length && (t.xaxis.labels.formatter = function (t) {\n          return m.isNumber(t) ? a(s[Math.floor(t) - 1]) : a(t);\n        }), t.xaxis.categories = [], t.labels = [], t.xaxis.tickAmount = t.xaxis.tickAmount || \"dataPoints\", t;\n      }\n    }, {\n      key: \"bubble\",\n      value: function () {\n        return {\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0\n          },\n          xaxis: {\n            crosshairs: {\n              width: 0\n            }\n          },\n          fill: {\n            type: \"solid\",\n            gradient: {\n              shade: \"light\",\n              inverse: !0,\n              shadeIntensity: .55,\n              opacityFrom: .4,\n              opacityTo: .8\n            }\n          }\n        };\n      }\n    }, {\n      key: \"scatter\",\n      value: function () {\n        return {\n          dataLabels: {\n            enabled: !1\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0\n          },\n          markers: {\n            size: 6,\n            strokeWidth: 1,\n            hover: {\n              sizeOffset: 2\n            }\n          }\n        };\n      }\n    }, {\n      key: \"heatmap\",\n      value: function () {\n        return {\n          chart: {\n            stacked: !1\n          },\n          fill: {\n            opacity: 1\n          },\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          tooltip: {\n            followCursor: !0,\n            marker: {\n              show: !1\n            },\n            x: {\n              show: !1\n            }\n          },\n          legend: {\n            position: \"top\",\n            markers: {\n              shape: \"square\"\n            }\n          },\n          grid: {\n            padding: {\n              right: 20\n            }\n          }\n        };\n      }\n    }, {\n      key: \"treemap\",\n      value: function () {\n        return {\n          chart: {\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            style: {\n              fontSize: 14,\n              fontWeight: 600,\n              colors: [\"#fff\"]\n            }\n          },\n          stroke: {\n            show: !0,\n            width: 2,\n            colors: [\"#fff\"]\n          },\n          legend: {\n            show: !1\n          },\n          fill: {\n            opacity: 1,\n            gradient: {\n              stops: [0, 100]\n            }\n          },\n          tooltip: {\n            followCursor: !0,\n            x: {\n              show: !1\n            }\n          },\n          grid: {\n            padding: {\n              left: 0,\n              right: 0\n            }\n          },\n          xaxis: {\n            crosshairs: {\n              show: !1\n            },\n            tooltip: {\n              enabled: !1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"pie\",\n      value: function () {\n        return {\n          chart: {\n            toolbar: {\n              show: !1\n            }\n          },\n          plotOptions: {\n            pie: {\n              donut: {\n                labels: {\n                  show: !1\n                }\n              }\n            }\n          },\n          dataLabels: {\n            formatter: function (t) {\n              return t.toFixed(1) + \"%\";\n            },\n            style: {\n              colors: [\"#fff\"]\n            },\n            background: {\n              enabled: !1\n            },\n            dropShadow: {\n              enabled: !0\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          fill: {\n            opacity: 1,\n            gradient: {\n              shade: \"light\",\n              stops: [0, 100]\n            }\n          },\n          tooltip: {\n            theme: \"dark\",\n            fillSeriesColor: !0\n          },\n          legend: {\n            position: \"right\"\n          },\n          grid: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          }\n        };\n      }\n    }, {\n      key: \"donut\",\n      value: function () {\n        return {\n          chart: {\n            toolbar: {\n              show: !1\n            }\n          },\n          dataLabels: {\n            formatter: function (t) {\n              return t.toFixed(1) + \"%\";\n            },\n            style: {\n              colors: [\"#fff\"]\n            },\n            background: {\n              enabled: !1\n            },\n            dropShadow: {\n              enabled: !0\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          fill: {\n            opacity: 1,\n            gradient: {\n              shade: \"light\",\n              shadeIntensity: .35,\n              stops: [80, 100],\n              opacityFrom: 1,\n              opacityTo: 1\n            }\n          },\n          tooltip: {\n            theme: \"dark\",\n            fillSeriesColor: !0\n          },\n          legend: {\n            position: \"right\"\n          },\n          grid: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          }\n        };\n      }\n    }, {\n      key: \"polarArea\",\n      value: function () {\n        return {\n          chart: {\n            toolbar: {\n              show: !1\n            }\n          },\n          dataLabels: {\n            formatter: function (t) {\n              return t.toFixed(1) + \"%\";\n            },\n            enabled: !1\n          },\n          stroke: {\n            show: !0,\n            width: 2\n          },\n          fill: {\n            opacity: .7\n          },\n          tooltip: {\n            theme: \"dark\",\n            fillSeriesColor: !0\n          },\n          legend: {\n            position: \"right\"\n          },\n          grid: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          }\n        };\n      }\n    }, {\n      key: \"radar\",\n      value: function () {\n        return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {\n          dataLabels: {\n            enabled: !1,\n            style: {\n              fontSize: \"11px\"\n            }\n          },\n          stroke: {\n            width: 2\n          },\n          markers: {\n            size: 5,\n            strokeWidth: 1,\n            strokeOpacity: 1\n          },\n          fill: {\n            opacity: .2\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0,\n            followCursor: !0\n          },\n          grid: {\n            show: !1,\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          },\n          xaxis: {\n            labels: {\n              formatter: function (t) {\n                return t;\n              },\n              style: {\n                colors: [\"#a8a8a8\"],\n                fontSize: \"11px\"\n              }\n            },\n            tooltip: {\n              enabled: !1\n            },\n            crosshairs: {\n              show: !1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"radialBar\",\n      value: function () {\n        return {\n          chart: {\n            animations: {\n              dynamicAnimation: {\n                enabled: !0,\n                speed: 800\n              }\n            },\n            toolbar: {\n              show: !1\n            }\n          },\n          fill: {\n            gradient: {\n              shade: \"dark\",\n              shadeIntensity: .4,\n              inverseColors: !1,\n              type: \"diagonal2\",\n              opacityFrom: 1,\n              opacityTo: 1,\n              stops: [70, 98, 100]\n            }\n          },\n          legend: {\n            show: !1,\n            position: \"right\"\n          },\n          tooltip: {\n            enabled: !1,\n            fillSeriesColor: !0\n          },\n          grid: {\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          }\n        };\n      }\n    }, {\n      key: \"_getBoxTooltip\",\n      value: function (t, e, i, a, s) {\n        var r = t.globals.seriesCandleO[e][i],\n          o = t.globals.seriesCandleH[e][i],\n          n = t.globals.seriesCandleM[e][i],\n          l = t.globals.seriesCandleL[e][i],\n          h = t.globals.seriesCandleC[e][i];\n        return t.config.series[e].type && t.config.series[e].type !== s ? '<div class=\"apexcharts-custom-tooltip\">\\n          '.concat(t.config.series[e].name ? t.config.series[e].name : \"series-\" + (e + 1), \": <strong>\").concat(t.globals.series[e][i], \"</strong>\\n        </div>\") : '<div class=\"apexcharts-tooltip-box apexcharts-tooltip-'.concat(t.config.chart.type, '\">') + \"<div>\".concat(a[0], ': <span class=\"value\">') + r + \"</span></div>\" + \"<div>\".concat(a[1], ': <span class=\"value\">') + o + \"</span></div>\" + (n ? \"<div>\".concat(a[2], ': <span class=\"value\">') + n + \"</span></div>\" : \"\") + \"<div>\".concat(a[3], ': <span class=\"value\">') + l + \"</span></div>\" + \"<div>\".concat(a[4], ': <span class=\"value\">') + h + \"</span></div></div>\";\n      }\n    }]), t;\n  }(),\n  D = function () {\n    function t(e) {\n      i(this, t), this.opts = e;\n    }\n    return s(t, [{\n      key: \"init\",\n      value: function (t) {\n        var e = t.responsiveOverride,\n          i = this.opts,\n          a = new X(),\n          s = new F(i);\n        this.chartType = i.chart.type, i = this.extendYAxis(i), i = this.extendAnnotations(i);\n        var r = a.init(),\n          o = {};\n        if (i && \"object\" === b(i)) {\n          var n,\n            l,\n            h,\n            c,\n            d,\n            g,\n            u,\n            f,\n            p,\n            x,\n            v = {};\n          v = -1 !== [\"line\", \"area\", \"bar\", \"candlestick\", \"boxPlot\", \"rangeBar\", \"rangeArea\", \"bubble\", \"scatter\", \"heatmap\", \"treemap\", \"pie\", \"polarArea\", \"donut\", \"radar\", \"radialBar\"].indexOf(i.chart.type) ? s[i.chart.type]() : s.line(), null !== (n = i.plotOptions) && void 0 !== n && null !== (l = n.bar) && void 0 !== l && l.isFunnel && (v = s.funnel()), i.chart.stacked && \"bar\" === i.chart.type && (v = s.stackedBars()), null !== (h = i.chart.brush) && void 0 !== h && h.enabled && (v = s.brush(v)), null !== (c = i.plotOptions) && void 0 !== c && null !== (d = c.line) && void 0 !== d && d.isSlopeChart && (v = s.slope()), i.chart.stacked && \"100%\" === i.chart.stackType && (i = s.stacked100(i)), null !== (g = i.plotOptions) && void 0 !== g && null !== (u = g.bar) && void 0 !== u && u.isDumbbell && (i = s.dumbbell(i)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(i), i.xaxis = i.xaxis || window.Apex.xaxis || {}, e || (i.xaxis.convertedCatToNumeric = !1), (null !== (f = (i = this.checkForCatToNumericXAxis(this.chartType, v, i)).chart.sparkline) && void 0 !== f && f.enabled || null !== (p = window.Apex.chart) && void 0 !== p && null !== (x = p.sparkline) && void 0 !== x && x.enabled) && (v = s.sparkline(v)), o = m.extend(r, v);\n        }\n        var y = m.extend(o, window.Apex);\n        return r = m.extend(y, i), r = this.handleUserInputErrors(r);\n      }\n    }, {\n      key: \"checkForCatToNumericXAxis\",\n      value: function (t, e, i) {\n        var a,\n          s,\n          r = new F(i),\n          o = (\"bar\" === t || \"boxPlot\" === t) && (null === (a = i.plotOptions) || void 0 === a || null === (s = a.bar) || void 0 === s ? void 0 : s.horizontal),\n          n = \"pie\" === t || \"polarArea\" === t || \"donut\" === t || \"radar\" === t || \"radialBar\" === t || \"heatmap\" === t,\n          l = \"datetime\" !== i.xaxis.type && \"numeric\" !== i.xaxis.type,\n          h = i.xaxis.tickPlacement ? i.xaxis.tickPlacement : e.xaxis && e.xaxis.tickPlacement;\n        return o || n || !l || \"between\" === h || (i = r.convertCatToNumeric(i)), i;\n      }\n    }, {\n      key: \"extendYAxis\",\n      value: function (t, e) {\n        var i = new X();\n        (void 0 === t.yaxis || !t.yaxis || Array.isArray(t.yaxis) && 0 === t.yaxis.length) && (t.yaxis = {}), t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = m.extend(t.yaxis, window.Apex.yaxis)), t.yaxis.constructor !== Array ? t.yaxis = [m.extend(i.yAxis, t.yaxis)] : t.yaxis = m.extendArray(t.yaxis, i.yAxis);\n        var a = !1;\n        t.yaxis.forEach(function (t) {\n          t.logarithmic && (a = !0);\n        });\n        var s = t.series;\n        return e && !s && (s = e.config.series), a && s.length !== t.yaxis.length && s.length && (t.yaxis = s.map(function (e, a) {\n          if (e.name || (s[a].name = \"series-\".concat(a + 1)), t.yaxis[a]) return t.yaxis[a].seriesName = s[a].name, t.yaxis[a];\n          var r = m.extend(i.yAxis, t.yaxis[0]);\n          return r.show = !1, r;\n        })), a && s.length > 1 && s.length !== t.yaxis.length && console.warn(\"A multi-series logarithmic chart should have equal number of series and y-axes\"), t;\n      }\n    }, {\n      key: \"extendAnnotations\",\n      value: function (t) {\n        return void 0 === t.annotations && (t.annotations = {}, t.annotations.yaxis = [], t.annotations.xaxis = [], t.annotations.points = []), t = this.extendYAxisAnnotations(t), t = this.extendXAxisAnnotations(t), t = this.extendPointAnnotations(t);\n      }\n    }, {\n      key: \"extendYAxisAnnotations\",\n      value: function (t) {\n        var e = new X();\n        return t.annotations.yaxis = m.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation), t;\n      }\n    }, {\n      key: \"extendXAxisAnnotations\",\n      value: function (t) {\n        var e = new X();\n        return t.annotations.xaxis = m.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation), t;\n      }\n    }, {\n      key: \"extendPointAnnotations\",\n      value: function (t) {\n        var e = new X();\n        return t.annotations.points = m.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation), t;\n      }\n    }, {\n      key: \"checkForDarkTheme\",\n      value: function (t) {\n        t.theme && \"dark\" === t.theme.mode && (t.tooltip || (t.tooltip = {}), \"light\" !== t.tooltip.theme && (t.tooltip.theme = \"dark\"), t.chart.foreColor || (t.chart.foreColor = \"#f6f7f8\"), t.theme.palette || (t.theme.palette = \"palette4\"));\n      }\n    }, {\n      key: \"handleUserInputErrors\",\n      value: function (t) {\n        var e = t;\n        if (e.tooltip.shared && e.tooltip.intersect) throw new Error(\"tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.\");\n        if (\"bar\" === e.chart.type && e.plotOptions.bar.horizontal) {\n          if (e.yaxis.length > 1) throw new Error(\"Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false\");\n          e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), e.xaxis.tooltip.enabled = !1, e.yaxis[0].tooltip.enabled = !1, e.chart.zoom.enabled = !1;\n        }\n        return \"bar\" !== e.chart.type && \"rangeBar\" !== e.chart.type || e.tooltip.shared && \"barWidth\" === e.xaxis.crosshairs.width && e.series.length > 1 && (e.xaxis.crosshairs.width = \"tickWidth\"), \"candlestick\" !== e.chart.type && \"boxPlot\" !== e.chart.type || e.yaxis[0].reversed && (console.warn(\"Reversed y-axis in \".concat(e.chart.type, \" chart is not supported.\")), e.yaxis[0].reversed = !1), e;\n      }\n    }]), t;\n  }(),\n  H = function () {\n    function t() {\n      i(this, t);\n    }\n    return s(t, [{\n      key: \"initGlobalVars\",\n      value: function (t) {\n        t.series = [], t.seriesCandleO = [], t.seriesCandleH = [], t.seriesCandleM = [], t.seriesCandleL = [], t.seriesCandleC = [], t.seriesRangeStart = [], t.seriesRangeEnd = [], t.seriesRange = [], t.seriesPercent = [], t.seriesGoals = [], t.seriesX = [], t.seriesZ = [], t.seriesNames = [], t.seriesTotals = [], t.seriesLog = [], t.seriesColors = [], t.stackedSeriesTotals = [], t.seriesXvalues = [], t.seriesYvalues = [], t.labels = [], t.hasXaxisGroups = !1, t.groups = [], t.barGroups = [], t.lineGroups = [], t.areaGroups = [], t.hasSeriesGroups = !1, t.seriesGroups = [], t.categoryLabels = [], t.timescaleLabels = [], t.noLabelsProvided = !1, t.resizeTimer = null, t.selectionResizeTimer = null, t.lastWheelExecution = 0, t.delayedElements = [], t.pointsArray = [], t.dataLabelsRects = [], t.isXNumeric = !1, t.skipLastTimelinelabel = !1, t.skipFirstTimelinelabel = !1, t.isDataXYZ = !1, t.isMultiLineX = !1, t.isMultipleYAxis = !1, t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE, t.minYArr = [], t.maxYArr = [], t.maxX = -Number.MAX_VALUE, t.minX = Number.MAX_VALUE, t.initialMaxX = -Number.MAX_VALUE, t.initialMinX = Number.MAX_VALUE, t.maxDate = 0, t.minDate = Number.MAX_VALUE, t.minZ = Number.MAX_VALUE, t.maxZ = -Number.MAX_VALUE, t.minXDiff = Number.MAX_VALUE, t.yAxisScale = [], t.xAxisScale = null, t.xAxisTicksPositions = [], t.yLabelsCoords = [], t.yTitleCoords = [], t.barPadForNumericAxis = 0, t.padHorizontal = 0, t.xRange = 0, t.yRange = [], t.zRange = 0, t.dataPoints = 0, t.xTickAmount = 0, t.multiAxisTickAmount = 0;\n      }\n    }, {\n      key: \"globalVars\",\n      value: function (t) {\n        return {\n          chartID: null,\n          cuid: null,\n          events: {\n            beforeMount: [],\n            mounted: [],\n            updated: [],\n            clicked: [],\n            selection: [],\n            dataPointSelection: [],\n            zoomed: [],\n            scrolled: []\n          },\n          colors: [],\n          clientX: null,\n          clientY: null,\n          fill: {\n            colors: []\n          },\n          stroke: {\n            colors: []\n          },\n          dataLabels: {\n            style: {\n              colors: []\n            }\n          },\n          radarPolygons: {\n            fill: {\n              colors: []\n            }\n          },\n          markers: {\n            colors: [],\n            size: t.markers.size,\n            largestSize: 0\n          },\n          animationEnded: !1,\n          isTouchDevice: \"ontouchstart\" in window || navigator.msMaxTouchPoints,\n          isDirty: !1,\n          isExecCalled: !1,\n          initialConfig: null,\n          initialSeries: [],\n          lastXAxis: [],\n          lastYAxis: [],\n          columnSeries: null,\n          labels: [],\n          timescaleLabels: [],\n          noLabelsProvided: !1,\n          allSeriesCollapsed: !1,\n          collapsedSeries: [],\n          collapsedSeriesIndices: [],\n          ancillaryCollapsedSeries: [],\n          ancillaryCollapsedSeriesIndices: [],\n          risingSeries: [],\n          dataFormatXNumeric: !1,\n          capturedSeriesIndex: -1,\n          capturedDataPointIndex: -1,\n          selectedDataPoints: [],\n          invalidLogScale: !1,\n          ignoreYAxisIndexes: [],\n          maxValsInArrayIndex: 0,\n          radialSize: 0,\n          selection: void 0,\n          zoomEnabled: \"zoom\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,\n          panEnabled: \"pan\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,\n          selectionEnabled: \"selection\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,\n          yaxis: null,\n          mousedown: !1,\n          lastClientPosition: {},\n          visibleXRange: void 0,\n          yValueDecimal: 0,\n          total: 0,\n          SVGNS: \"http://www.w3.org/2000/svg\",\n          svgWidth: 0,\n          svgHeight: 0,\n          noData: !1,\n          locale: {},\n          dom: {},\n          memory: {\n            methodsToExec: []\n          },\n          shouldAnimate: !0,\n          skipLastTimelinelabel: !1,\n          skipFirstTimelinelabel: !1,\n          delayedElements: [],\n          axisCharts: !0,\n          isDataXYZ: !1,\n          isSlopeChart: t.plotOptions.line.isSlopeChart,\n          resized: !1,\n          resizeTimer: null,\n          comboCharts: !1,\n          dataChanged: !1,\n          previousPaths: [],\n          allSeriesHasEqualX: !0,\n          pointsArray: [],\n          dataLabelsRects: [],\n          lastDrawnDataLabelsIndexes: [],\n          hasNullValues: !1,\n          easing: null,\n          zoomed: !1,\n          gridWidth: 0,\n          gridHeight: 0,\n          rotateXLabels: !1,\n          defaultLabels: !1,\n          xLabelFormatter: void 0,\n          yLabelFormatters: [],\n          xaxisTooltipFormatter: void 0,\n          ttKeyFormatter: void 0,\n          ttVal: void 0,\n          ttZFormatter: void 0,\n          LINE_HEIGHT_RATIO: 1.618,\n          xAxisLabelsHeight: 0,\n          xAxisGroupLabelsHeight: 0,\n          xAxisLabelsWidth: 0,\n          yAxisLabelsWidth: 0,\n          scaleX: 1,\n          scaleY: 1,\n          translateX: 0,\n          translateY: 0,\n          translateYAxisX: [],\n          yAxisWidths: [],\n          translateXAxisY: 0,\n          translateXAxisX: 0,\n          tooltip: null,\n          niceScaleAllowedMagMsd: [[1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10], [1, 1, 2, 5, 5, 5, 10, 10, 10, 10, 10]],\n          niceScaleDefaultTicks: [1, 2, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 24],\n          seriesYAxisMap: [],\n          seriesYAxisReverseMap: []\n        };\n      }\n    }, {\n      key: \"init\",\n      value: function (t) {\n        var e = this.globalVars(t);\n        return this.initGlobalVars(e), e.initialConfig = m.extend({}, t), e.initialSeries = m.clone(t.series), e.lastXAxis = m.clone(e.initialConfig.xaxis), e.lastYAxis = m.clone(e.initialConfig.yaxis), e;\n      }\n    }]), t;\n  }(),\n  O = function () {\n    function t(e) {\n      i(this, t), this.opts = e;\n    }\n    return s(t, [{\n      key: \"init\",\n      value: function () {\n        var t = new D(this.opts).init({\n          responsiveOverride: !1\n        });\n        return {\n          config: t,\n          globals: new H().init(t)\n        };\n      }\n    }]), t;\n  }(),\n  N = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.opts = null, this.seriesIndex = 0, this.patternIDs = [];\n    }\n    return s(t, [{\n      key: \"clippedImgArea\",\n      value: function (t) {\n        var e = this.w,\n          i = e.config,\n          a = parseInt(e.globals.gridWidth, 10),\n          s = parseInt(e.globals.gridHeight, 10),\n          r = a > s ? a : s,\n          o = t.image,\n          n = 0,\n          l = 0;\n        void 0 === t.width && void 0 === t.height ? void 0 !== i.fill.image.width && void 0 !== i.fill.image.height ? (n = i.fill.image.width + 1, l = i.fill.image.height) : (n = r + 1, l = r) : (n = t.width, l = t.height);\n        var h = document.createElementNS(e.globals.SVGNS, \"pattern\");\n        k.setAttrs(h, {\n          id: t.patternID,\n          patternUnits: t.patternUnits ? t.patternUnits : \"userSpaceOnUse\",\n          width: n + \"px\",\n          height: l + \"px\"\n        });\n        var c = document.createElementNS(e.globals.SVGNS, \"image\");\n        h.appendChild(c), c.setAttributeNS(window.SVG.xlink, \"href\", o), k.setAttrs(c, {\n          x: 0,\n          y: 0,\n          preserveAspectRatio: \"none\",\n          width: n + \"px\",\n          height: l + \"px\"\n        }), c.style.opacity = t.opacity, e.globals.dom.elDefs.node.appendChild(h);\n      }\n    }, {\n      key: \"getSeriesIndex\",\n      value: function (t) {\n        var e = this.w,\n          i = e.config.chart.type;\n        return (\"bar\" === i || \"rangeBar\" === i) && e.config.plotOptions.bar.distributed || \"heatmap\" === i || \"treemap\" === i ? this.seriesIndex = t.seriesNumber : this.seriesIndex = t.seriesNumber % e.globals.series.length, this.seriesIndex;\n      }\n    }, {\n      key: \"fillPath\",\n      value: function (t) {\n        var e = this.w;\n        this.opts = t;\n        var i,\n          a,\n          s,\n          r = this.w.config;\n        this.seriesIndex = this.getSeriesIndex(t);\n        var o = this.getFillColors()[this.seriesIndex];\n        void 0 !== e.globals.seriesColors[this.seriesIndex] && (o = e.globals.seriesColors[this.seriesIndex]), \"function\" == typeof o && (o = o({\n          seriesIndex: this.seriesIndex,\n          dataPointIndex: t.dataPointIndex,\n          value: t.value,\n          w: e\n        }));\n        var n = t.fillType ? t.fillType : this.getFillType(this.seriesIndex),\n          l = Array.isArray(r.fill.opacity) ? r.fill.opacity[this.seriesIndex] : r.fill.opacity;\n        t.color && (o = t.color), o || (o = \"#fff\", console.warn(\"undefined color - ApexCharts\"));\n        var h = o;\n        if (-1 === o.indexOf(\"rgb\") ? o.length < 9 && (h = m.hexToRgba(o, l)) : o.indexOf(\"rgba\") > -1 && (l = m.getOpacityFromRGBA(o)), t.opacity && (l = t.opacity), \"pattern\" === n && (a = this.handlePatternFill({\n          fillConfig: t.fillConfig,\n          patternFill: a,\n          fillColor: o,\n          fillOpacity: l,\n          defaultColor: h\n        })), \"gradient\" === n && (s = this.handleGradientFill({\n          fillConfig: t.fillConfig,\n          fillColor: o,\n          fillOpacity: l,\n          i: this.seriesIndex\n        })), \"image\" === n) {\n          var c = r.fill.image.src,\n            d = t.patternID ? t.patternID : \"\",\n            g = \"pattern\".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d);\n          -1 === this.patternIDs.indexOf(g) && (this.clippedImgArea({\n            opacity: l,\n            image: Array.isArray(c) ? t.seriesNumber < c.length ? c[t.seriesNumber] : c[0] : c,\n            width: t.width ? t.width : void 0,\n            height: t.height ? t.height : void 0,\n            patternUnits: t.patternUnits,\n            patternID: g\n          }), this.patternIDs.push(g)), i = \"url(#\".concat(g, \")\");\n        } else i = \"gradient\" === n ? s : \"pattern\" === n ? a : h;\n        return t.solid && (i = h), i;\n      }\n    }, {\n      key: \"getFillType\",\n      value: function (t) {\n        var e = this.w;\n        return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type;\n      }\n    }, {\n      key: \"getFillColors\",\n      value: function () {\n        var t = this.w,\n          e = t.config,\n          i = this.opts,\n          a = [];\n        return t.globals.comboCharts ? \"line\" === t.config.series[this.seriesIndex].type ? Array.isArray(t.globals.stroke.colors) ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? a = t.globals.fill.colors : a.push(t.globals.fill.colors) : \"line\" === e.chart.type ? Array.isArray(t.globals.stroke.colors) ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? a = t.globals.fill.colors : a.push(t.globals.fill.colors), void 0 !== i.fillColors && (a = [], Array.isArray(i.fillColors) ? a = i.fillColors.slice() : a.push(i.fillColors)), a;\n      }\n    }, {\n      key: \"handlePatternFill\",\n      value: function (t) {\n        var e = t.fillConfig,\n          i = t.patternFill,\n          a = t.fillColor,\n          s = t.fillOpacity,\n          r = t.defaultColor,\n          o = this.w.config.fill;\n        e && (o = e);\n        var n = this.opts,\n          l = new k(this.ctx),\n          h = Array.isArray(o.pattern.strokeWidth) ? o.pattern.strokeWidth[this.seriesIndex] : o.pattern.strokeWidth,\n          c = a;\n        Array.isArray(o.pattern.style) ? i = void 0 !== o.pattern.style[n.seriesNumber] ? l.drawPattern(o.pattern.style[n.seriesNumber], o.pattern.width, o.pattern.height, c, h, s) : r : i = l.drawPattern(o.pattern.style, o.pattern.width, o.pattern.height, c, h, s);\n        return i;\n      }\n    }, {\n      key: \"handleGradientFill\",\n      value: function (t) {\n        var e = t.fillColor,\n          i = t.fillOpacity,\n          a = t.fillConfig,\n          s = t.i,\n          r = this.w.config.fill;\n        a && (r = g(g({}, r), a));\n        var o,\n          n = this.opts,\n          l = new k(this.ctx),\n          h = new m(),\n          c = r.gradient.type,\n          d = e,\n          u = void 0 === r.gradient.opacityFrom ? i : Array.isArray(r.gradient.opacityFrom) ? r.gradient.opacityFrom[s] : r.gradient.opacityFrom;\n        d.indexOf(\"rgba\") > -1 && (u = m.getOpacityFromRGBA(d));\n        var f = void 0 === r.gradient.opacityTo ? i : Array.isArray(r.gradient.opacityTo) ? r.gradient.opacityTo[s] : r.gradient.opacityTo;\n        if (void 0 === r.gradient.gradientToColors || 0 === r.gradient.gradientToColors.length) o = \"dark\" === r.gradient.shade ? h.shadeColor(-1 * parseFloat(r.gradient.shadeIntensity), e.indexOf(\"rgb\") > -1 ? m.rgb2hex(e) : e) : h.shadeColor(parseFloat(r.gradient.shadeIntensity), e.indexOf(\"rgb\") > -1 ? m.rgb2hex(e) : e);else if (r.gradient.gradientToColors[n.seriesNumber]) {\n          var p = r.gradient.gradientToColors[n.seriesNumber];\n          o = p, p.indexOf(\"rgba\") > -1 && (f = m.getOpacityFromRGBA(p));\n        } else o = e;\n        if (r.gradient.gradientFrom && (d = r.gradient.gradientFrom), r.gradient.gradientTo && (o = r.gradient.gradientTo), r.gradient.inverseColors) {\n          var x = d;\n          d = o, o = x;\n        }\n        return d.indexOf(\"rgb\") > -1 && (d = m.rgb2hex(d)), o.indexOf(\"rgb\") > -1 && (o = m.rgb2hex(o)), l.drawGradient(c, d, o, u, f, n.size, r.gradient.stops, r.gradient.colorStops, s);\n      }\n    }]), t;\n  }(),\n  W = function () {\n    function t(e, a) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"setGlobalMarkerSize\",\n      value: function () {\n        var t = this.w;\n        if (t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [t.config.markers.size], t.globals.markers.size.length > 0) {\n          if (t.globals.markers.size.length < t.globals.series.length + 1) for (var e = 0; e <= t.globals.series.length; e++) void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0]);\n        } else t.globals.markers.size = t.config.series.map(function (e) {\n          return t.config.markers.size;\n        });\n      }\n    }, {\n      key: \"plotChartMarkers\",\n      value: function (t, e, i, a) {\n        var s,\n          r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],\n          o = this.w,\n          n = e,\n          l = t,\n          h = null,\n          c = new k(this.ctx),\n          d = o.config.markers.discrete && o.config.markers.discrete.length;\n        if ((o.globals.markers.size[e] > 0 || r || d) && (h = c.group({\n          class: r || d ? \"\" : \"apexcharts-series-markers\"\n        })).attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(o.globals.cuid, \")\")), Array.isArray(l.x)) for (var g = 0; g < l.x.length; g++) {\n          var u = i;\n          1 === i && 0 === g && (u = 0), 1 === i && 1 === g && (u = 1);\n          var f = \"apexcharts-marker\";\n          if (\"line\" !== o.config.chart.type && \"area\" !== o.config.chart.type || o.globals.comboCharts || o.config.tooltip.intersect || (f += \" no-pointer-events\"), (Array.isArray(o.config.markers.size) ? o.globals.markers.size[e] > 0 : o.config.markers.size > 0) || r || d) {\n            m.isNumber(l.y[g]) ? f += \" w\".concat(m.randomId()) : f = \"apexcharts-nullpoint\";\n            var p = this.getMarkerConfig({\n              cssClass: f,\n              seriesIndex: e,\n              dataPointIndex: u\n            });\n            o.config.series[n].data[u] && (o.config.series[n].data[u].fillColor && (p.pointFillColor = o.config.series[n].data[u].fillColor), o.config.series[n].data[u].strokeColor && (p.pointStrokeColor = o.config.series[n].data[u].strokeColor)), void 0 !== a && (p.pSize = a), (l.x[g] < -o.globals.markers.largestSize || l.x[g] > o.globals.gridWidth + o.globals.markers.largestSize || l.y[g] < -o.globals.markers.largestSize || l.y[g] > o.globals.gridHeight + o.globals.markers.largestSize) && (p.pSize = 0), (s = c.drawMarker(l.x[g], l.y[g], p)).attr(\"rel\", u), s.attr(\"j\", u), s.attr(\"index\", e), s.node.setAttribute(\"default-marker-size\", p.pSize), new w(this.ctx).setSelectionFilter(s, e, u), this.addEvents(s), h && h.add(s);\n          } else void 0 === o.globals.pointsArray[e] && (o.globals.pointsArray[e] = []), o.globals.pointsArray[e].push([l.x[g], l.y[g]]);\n        }\n        return h;\n      }\n    }, {\n      key: \"getMarkerConfig\",\n      value: function (t) {\n        var e = t.cssClass,\n          i = t.seriesIndex,\n          a = t.dataPointIndex,\n          s = void 0 === a ? null : a,\n          r = t.radius,\n          o = void 0 === r ? null : r,\n          n = t.size,\n          l = void 0 === n ? null : n,\n          h = t.strokeWidth,\n          c = void 0 === h ? null : h,\n          d = this.w,\n          g = this.getMarkerStyle(i),\n          u = null === l ? d.globals.markers.size[i] : l,\n          f = d.config.markers;\n        return null !== s && f.discrete.length && f.discrete.map(function (t) {\n          t.seriesIndex === i && t.dataPointIndex === s && (g.pointStrokeColor = t.strokeColor, g.pointFillColor = t.fillColor, u = t.size, g.pointShape = t.shape);\n        }), {\n          pSize: null === o ? u : o,\n          pRadius: null !== o ? o : f.radius,\n          pointStrokeWidth: null !== c ? c : Array.isArray(f.strokeWidth) ? f.strokeWidth[i] : f.strokeWidth,\n          pointStrokeColor: g.pointStrokeColor,\n          pointFillColor: g.pointFillColor,\n          shape: g.pointShape || (Array.isArray(f.shape) ? f.shape[i] : f.shape),\n          class: e,\n          pointStrokeOpacity: Array.isArray(f.strokeOpacity) ? f.strokeOpacity[i] : f.strokeOpacity,\n          pointStrokeDashArray: Array.isArray(f.strokeDashArray) ? f.strokeDashArray[i] : f.strokeDashArray,\n          pointFillOpacity: Array.isArray(f.fillOpacity) ? f.fillOpacity[i] : f.fillOpacity,\n          seriesIndex: i\n        };\n      }\n    }, {\n      key: \"addEvents\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx);\n        t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this.ctx, t)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this.ctx, t)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this.ctx, t)), t.node.addEventListener(\"click\", e.config.markers.onClick), t.node.addEventListener(\"dblclick\", e.config.markers.onDblClick), t.node.addEventListener(\"touchstart\", i.pathMouseDown.bind(this.ctx, t), {\n          passive: !0\n        });\n      }\n    }, {\n      key: \"getMarkerStyle\",\n      value: function (t) {\n        var e = this.w,\n          i = e.globals.markers.colors,\n          a = e.config.markers.strokeColor || e.config.markers.strokeColors;\n        return {\n          pointStrokeColor: Array.isArray(a) ? a[t] : a,\n          pointFillColor: Array.isArray(i) ? i[t] : i\n        };\n      }\n    }]), t;\n  }(),\n  B = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.initialAnim = this.w.config.chart.animations.enabled;\n    }\n    return s(t, [{\n      key: \"draw\",\n      value: function (t, e, i) {\n        var a = this.w,\n          s = new k(this.ctx),\n          r = i.realIndex,\n          o = i.pointsPos,\n          n = i.zRatio,\n          l = i.elParent,\n          h = s.group({\n            class: \"apexcharts-series-markers apexcharts-series-\".concat(a.config.chart.type)\n          });\n        if (h.attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(a.globals.cuid, \")\")), Array.isArray(o.x)) for (var c = 0; c < o.x.length; c++) {\n          var d = e + 1,\n            g = !0;\n          0 === e && 0 === c && (d = 0), 0 === e && 1 === c && (d = 1);\n          var u = a.globals.markers.size[r];\n          if (n !== 1 / 0) {\n            var f = a.config.plotOptions.bubble;\n            u = a.globals.seriesZ[r][d], f.zScaling && (u /= n), f.minBubbleRadius && u < f.minBubbleRadius && (u = f.minBubbleRadius), f.maxBubbleRadius && u > f.maxBubbleRadius && (u = f.maxBubbleRadius);\n          }\n          var p = o.x[c],\n            x = o.y[c];\n          if (u = u || 0, null !== x && void 0 !== a.globals.series[r][d] || (g = !1), g) {\n            var b = this.drawPoint(p, x, u, r, d, e);\n            h.add(b);\n          }\n          l.add(h);\n        }\n      }\n    }, {\n      key: \"drawPoint\",\n      value: function (t, e, i, a, s, r) {\n        var o = this.w,\n          n = a,\n          l = new y(this.ctx),\n          h = new w(this.ctx),\n          c = new N(this.ctx),\n          d = new W(this.ctx),\n          g = new k(this.ctx),\n          u = d.getMarkerConfig({\n            cssClass: \"apexcharts-marker\",\n            seriesIndex: n,\n            dataPointIndex: s,\n            radius: \"bubble\" === o.config.chart.type || o.globals.comboCharts && o.config.series[a] && \"bubble\" === o.config.series[a].type ? i : null\n          }),\n          f = c.fillPath({\n            seriesNumber: a,\n            dataPointIndex: s,\n            color: u.pointFillColor,\n            patternUnits: \"objectBoundingBox\",\n            value: o.globals.series[a][r]\n          }),\n          p = g.drawMarker(t, e, u);\n        if (o.config.series[n].data[s] && o.config.series[n].data[s].fillColor && (f = o.config.series[n].data[s].fillColor), p.attr({\n          fill: f\n        }), o.config.chart.dropShadow.enabled) {\n          var x = o.config.chart.dropShadow;\n          h.dropShadow(p, x, a);\n        }\n        if (!this.initialAnim || o.globals.dataChanged || o.globals.resized) o.globals.animationEnded = !0;else {\n          var b = o.config.chart.animations.speed;\n          l.animateMarker(p, b, o.globals.easing, function () {\n            window.setTimeout(function () {\n              l.animationCompleted(p);\n            }, 100);\n          });\n        }\n        return p.attr({\n          rel: s,\n          j: s,\n          index: a,\n          \"default-marker-size\": u.pSize\n        }), h.setSelectionFilter(p, a, s), d.addEvents(p), p.node.classList.add(\"apexcharts-marker\"), p;\n      }\n    }, {\n      key: \"centerTextInBubble\",\n      value: function (t) {\n        var e = this.w;\n        return {\n          y: t += parseInt(e.config.dataLabels.style.fontSize, 10) / 4\n        };\n      }\n    }]), t;\n  }(),\n  G = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"dataLabelsCorrection\",\n      value: function (t, e, i, a, s, r, o) {\n        var n = this.w,\n          l = !1,\n          h = new k(this.ctx).getTextRects(i, o),\n          c = h.width,\n          d = h.height;\n        e < 0 && (e = 0), e > n.globals.gridHeight + d && (e = n.globals.gridHeight + d / 2), void 0 === n.globals.dataLabelsRects[a] && (n.globals.dataLabelsRects[a] = []), n.globals.dataLabelsRects[a].push({\n          x: t,\n          y: e,\n          width: c,\n          height: d\n        });\n        var g = n.globals.dataLabelsRects[a].length - 2,\n          u = void 0 !== n.globals.lastDrawnDataLabelsIndexes[a] ? n.globals.lastDrawnDataLabelsIndexes[a][n.globals.lastDrawnDataLabelsIndexes[a].length - 1] : 0;\n        if (void 0 !== n.globals.dataLabelsRects[a][g]) {\n          var f = n.globals.dataLabelsRects[a][u];\n          (t > f.x + f.width || e > f.y + f.height || e + d < f.y || t + c < f.x) && (l = !0);\n        }\n        return (0 === s || r) && (l = !0), {\n          x: t,\n          y: e,\n          textRects: h,\n          drawnextLabel: l\n        };\n      }\n    }, {\n      key: \"drawDataLabel\",\n      value: function (t) {\n        var e = this,\n          i = t.type,\n          a = t.pos,\n          s = t.i,\n          r = t.j,\n          o = t.isRangeStart,\n          n = t.strokeWidth,\n          l = void 0 === n ? 2 : n,\n          h = this.w,\n          c = new k(this.ctx),\n          d = h.config.dataLabels,\n          g = 0,\n          u = 0,\n          f = r,\n          p = null;\n        if (-1 !== h.globals.collapsedSeriesIndices.indexOf(s) || !d.enabled || !Array.isArray(a.x)) return p;\n        p = c.group({\n          class: \"apexcharts-data-labels\"\n        });\n        for (var x = 0; x < a.x.length; x++) if (g = a.x[x] + d.offsetX, u = a.y[x] + d.offsetY + l, !isNaN(g)) {\n          1 === r && 0 === x && (f = 0), 1 === r && 1 === x && (f = 1);\n          var b = h.globals.series[s][f];\n          \"rangeArea\" === i && (b = o ? h.globals.seriesRangeStart[s][f] : h.globals.seriesRangeEnd[s][f]);\n          var v = \"\",\n            m = function (t) {\n              return h.config.dataLabels.formatter(t, {\n                ctx: e.ctx,\n                seriesIndex: s,\n                dataPointIndex: f,\n                w: h\n              });\n            };\n          if (\"bubble\" === h.config.chart.type) v = m(b = h.globals.seriesZ[s][f]), u = a.y[x], u = new B(this.ctx).centerTextInBubble(u, s, f).y;else void 0 !== b && (v = m(b));\n          var y = h.config.dataLabels.textAnchor;\n          h.globals.isSlopeChart && (y = 0 === f ? \"end\" : f === h.config.series[s].data.length - 1 ? \"start\" : \"middle\"), this.plotDataLabelsText({\n            x: g,\n            y: u,\n            text: v,\n            i: s,\n            j: f,\n            parent: p,\n            offsetCorrection: !0,\n            dataLabelsConfig: h.config.dataLabels,\n            textAnchor: y\n          });\n        }\n        return p;\n      }\n    }, {\n      key: \"plotDataLabelsText\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx),\n          a = t.x,\n          s = t.y,\n          r = t.i,\n          o = t.j,\n          n = t.text,\n          l = t.textAnchor,\n          h = t.fontSize,\n          c = t.parent,\n          d = t.dataLabelsConfig,\n          g = t.color,\n          u = t.alwaysDrawDataLabel,\n          f = t.offsetCorrection,\n          p = t.className,\n          x = null;\n        if (Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(r) < 0) return x;\n        var b = {\n          x: a,\n          y: s,\n          drawnextLabel: !0,\n          textRects: null\n        };\n        f && (b = this.dataLabelsCorrection(a, s, n, r, o, u, parseInt(d.style.fontSize, 10))), e.globals.zoomed || (a = b.x, s = b.y), b.textRects && (a < -20 - b.textRects.width || a > e.globals.gridWidth + b.textRects.width + 30) && (n = \"\");\n        var v = e.globals.dataLabels.style.colors[r];\n        ((\"bar\" === e.config.chart.type || \"rangeBar\" === e.config.chart.type) && e.config.plotOptions.bar.distributed || e.config.dataLabels.distributed) && (v = e.globals.dataLabels.style.colors[o]), \"function\" == typeof v && (v = v({\n          series: e.globals.series,\n          seriesIndex: r,\n          dataPointIndex: o,\n          w: e\n        })), g && (v = g);\n        var m = d.offsetX,\n          y = d.offsetY;\n        if (\"bar\" !== e.config.chart.type && \"rangeBar\" !== e.config.chart.type || (m = 0, y = 0), e.globals.isSlopeChart && (0 !== o && (m = -2 * d.offsetX + 5), 0 !== o && o !== e.config.series[r].data.length - 1 && (m = 0)), b.drawnextLabel) {\n          if ((x = i.drawText({\n            width: 100,\n            height: parseInt(d.style.fontSize, 10),\n            x: a + m,\n            y: s + y,\n            foreColor: v,\n            textAnchor: l || d.textAnchor,\n            text: n,\n            fontSize: h || d.style.fontSize,\n            fontFamily: d.style.fontFamily,\n            fontWeight: d.style.fontWeight || \"normal\"\n          })).attr({\n            class: p || \"apexcharts-datalabel\",\n            cx: a,\n            cy: s\n          }), d.dropShadow.enabled) {\n            var A = d.dropShadow;\n            new w(this.ctx).dropShadow(x, A);\n          }\n          c.add(x), void 0 === e.globals.lastDrawnDataLabelsIndexes[r] && (e.globals.lastDrawnDataLabelsIndexes[r] = []), e.globals.lastDrawnDataLabelsIndexes[r].push(o);\n        }\n        return x;\n      }\n    }, {\n      key: \"addBackgroundToDataLabel\",\n      value: function (t, e) {\n        var i = this.w,\n          a = i.config.dataLabels.background,\n          s = a.padding,\n          r = a.padding / 2,\n          o = e.width,\n          n = e.height,\n          l = new k(this.ctx).drawRect(e.x - s, e.y - r / 2, o + 2 * s, n + r, a.borderRadius, \"transparent\" !== i.config.chart.background && i.config.chart.background ? i.config.chart.background : \"#fff\", a.opacity, a.borderWidth, a.borderColor);\n        a.dropShadow.enabled && new w(this.ctx).dropShadow(l, a.dropShadow);\n        return l;\n      }\n    }, {\n      key: \"dataLabelsBackground\",\n      value: function () {\n        var t = this.w;\n        if (\"bubble\" !== t.config.chart.type) for (var e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-datalabels text\"), i = 0; i < e.length; i++) {\n          var a = e[i],\n            s = a.getBBox(),\n            r = null;\n          if (s.width && s.height && (r = this.addBackgroundToDataLabel(a, s)), r) {\n            a.parentNode.insertBefore(r.node, a);\n            var o = a.getAttribute(\"fill\");\n            t.config.chart.animations.enabled && !t.globals.resized && !t.globals.dataChanged ? r.animate().attr({\n              fill: o\n            }) : r.attr({\n              fill: o\n            }), a.setAttribute(\"fill\", t.config.dataLabels.background.foreColor);\n          }\n        }\n      }\n    }, {\n      key: \"bringForward\",\n      value: function () {\n        for (var t = this.w, e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-datalabels\"), i = t.globals.dom.baseEl.querySelector(\".apexcharts-plot-series:last-child\"), a = 0; a < e.length; a++) i && i.insertBefore(e[a], i.nextSibling);\n      }\n    }]), t;\n  }(),\n  V = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.legendInactiveClass = \"legend-mouseover-inactive\";\n    }\n    return s(t, [{\n      key: \"getAllSeriesEls\",\n      value: function () {\n        return this.w.globals.dom.baseEl.getElementsByClassName(\"apexcharts-series\");\n      }\n    }, {\n      key: \"getSeriesByName\",\n      value: function (t) {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner .apexcharts-series[seriesName='\".concat(m.escapeString(t), \"']\"));\n      }\n    }, {\n      key: \"isSeriesHidden\",\n      value: function (t) {\n        var e = this.getSeriesByName(t),\n          i = parseInt(e.getAttribute(\"data:realIndex\"), 10);\n        return {\n          isHidden: e.classList.contains(\"apexcharts-series-collapsed\"),\n          realIndex: i\n        };\n      }\n    }, {\n      key: \"addCollapsedClassToSeries\",\n      value: function (t, e) {\n        var i = this.w;\n        function a(i) {\n          for (var a = 0; a < i.length; a++) i[a].index === e && t.node.classList.add(\"apexcharts-series-collapsed\");\n        }\n        a(i.globals.collapsedSeries), a(i.globals.ancillaryCollapsedSeries);\n      }\n    }, {\n      key: \"toggleSeries\",\n      value: function (t) {\n        var e = this.isSeriesHidden(t);\n        return this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, e.isHidden), e.isHidden;\n      }\n    }, {\n      key: \"showSeries\",\n      value: function (t) {\n        var e = this.isSeriesHidden(t);\n        e.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !0);\n      }\n    }, {\n      key: \"hideSeries\",\n      value: function (t) {\n        var e = this.isSeriesHidden(t);\n        e.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !1);\n      }\n    }, {\n      key: \"resetSeries\",\n      value: function () {\n        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],\n          e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n          i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n          a = this.w,\n          s = m.clone(a.globals.initialSeries);\n        a.globals.previousPaths = [], i ? (a.globals.collapsedSeries = [], a.globals.ancillaryCollapsedSeries = [], a.globals.collapsedSeriesIndices = [], a.globals.ancillaryCollapsedSeriesIndices = []) : s = this.emptyCollapsedSeries(s), a.config.series = s, t && (e && (a.globals.zoomed = !1, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled));\n      }\n    }, {\n      key: \"emptyCollapsedSeries\",\n      value: function (t) {\n        for (var e = this.w, i = 0; i < t.length; i++) e.globals.collapsedSeriesIndices.indexOf(i) > -1 && (t[i].data = []);\n        return t;\n      }\n    }, {\n      key: \"highlightSeries\",\n      value: function (t) {\n        var e = this.w,\n          i = this.getSeriesByName(t),\n          a = parseInt(null == i ? void 0 : i.getAttribute(\"data:realIndex\"), 10),\n          s = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis\"),\n          r = null,\n          o = null,\n          n = null;\n        if (e.globals.axisCharts || \"radialBar\" === e.config.chart.type) {\n          if (e.globals.axisCharts) {\n            r = e.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(a, \"']\")), o = e.globals.dom.baseEl.querySelector(\".apexcharts-datalabels[data\\\\:realIndex='\".concat(a, \"']\"));\n            var l = e.globals.seriesYAxisReverseMap[a];\n            n = e.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(l, \"']\"));\n          } else r = e.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(a + 1, \"']\"));\n        } else r = e.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(a + 1, \"'] path\"));\n        for (var h = 0; h < s.length; h++) s[h].classList.add(this.legendInactiveClass);\n        if (r) e.globals.axisCharts || r.parentNode.classList.remove(this.legendInactiveClass), r.classList.remove(this.legendInactiveClass), null !== o && o.classList.remove(this.legendInactiveClass), null !== n && n.classList.remove(this.legendInactiveClass);else for (var c = 0; c < s.length; c++) s[c].classList.remove(this.legendInactiveClass);\n      }\n    }, {\n      key: \"toggleSeriesOnHover\",\n      value: function (t, e) {\n        var i = this.w;\n        e || (e = t.target);\n        var a = i.globals.dom.baseEl.querySelectorAll(\".apexcharts-series, .apexcharts-datalabels, .apexcharts-yaxis\");\n        if (\"mousemove\" === t.type) {\n          var s = parseInt(e.getAttribute(\"rel\"), 10) - 1;\n          this.highlightSeries(i.globals.seriesNames[s]);\n        } else if (\"mouseout\" === t.type) for (var r = 0; r < a.length; r++) a[r].classList.remove(this.legendInactiveClass);\n      }\n    }, {\n      key: \"highlightRangeInSeries\",\n      value: function (t, e) {\n        var i = this,\n          a = this.w,\n          s = a.globals.dom.baseEl.getElementsByClassName(\"apexcharts-heatmap-rect\"),\n          r = function (t) {\n            for (var e = 0; e < s.length; e++) s[e].classList[t](i.legendInactiveClass);\n          };\n        if (\"mousemove\" === t.type) {\n          var o = parseInt(e.getAttribute(\"rel\"), 10) - 1;\n          r(\"add\");\n          var n = a.config.plotOptions.heatmap.colorScale.ranges;\n          !function (t, e) {\n            for (var a = 0; a < s.length; a++) {\n              var r = Number(s[a].getAttribute(\"val\"));\n              r >= t.from && (r < t.to || t.to === e && r === e) && s[a].classList.remove(i.legendInactiveClass);\n            }\n          }(n[o], n.reduce(function (t, e) {\n            return Math.max(t, e.to);\n          }, 0));\n        } else \"mouseout\" === t.type && r(\"remove\");\n      }\n    }, {\n      key: \"getActiveConfigSeriesIndex\",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"asc\",\n          e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],\n          i = this.w,\n          a = 0;\n        if (i.config.series.length > 1) for (var s = i.config.series.map(function (t, a) {\n            return t.data && t.data.length > 0 && -1 === i.globals.collapsedSeriesIndices.indexOf(a) && (!i.globals.comboCharts || 0 === e.length || e.length && e.indexOf(i.config.series[a].type) > -1) ? a : -1;\n          }), r = \"asc\" === t ? 0 : s.length - 1; \"asc\" === t ? r < s.length : r >= 0; \"asc\" === t ? r++ : r--) if (-1 !== s[r]) {\n          a = s[r];\n          break;\n        }\n        return a;\n      }\n    }, {\n      key: \"getBarSeriesIndices\",\n      value: function () {\n        return this.w.globals.comboCharts ? this.w.config.series.map(function (t, e) {\n          return \"bar\" === t.type || \"column\" === t.type ? e : -1;\n        }).filter(function (t) {\n          return -1 !== t;\n        }) : this.w.config.series.map(function (t, e) {\n          return e;\n        });\n      }\n    }, {\n      key: \"getPreviousPaths\",\n      value: function () {\n        var t = this.w;\n        function e(e, i, a) {\n          for (var s = e[i].childNodes, r = {\n              type: a,\n              paths: [],\n              realIndex: e[i].getAttribute(\"data:realIndex\")\n            }, o = 0; o < s.length; o++) if (s[o].hasAttribute(\"pathTo\")) {\n            var n = s[o].getAttribute(\"pathTo\");\n            r.paths.push({\n              d: n\n            });\n          }\n          t.globals.previousPaths.push(r);\n        }\n        t.globals.previousPaths = [];\n        [\"line\", \"area\", \"bar\", \"rangebar\", \"rangeArea\", \"candlestick\", \"radar\"].forEach(function (i) {\n          for (var a, s = (a = i, t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(a, \"-series .apexcharts-series\"))), r = 0; r < s.length; r++) e(s, r, i);\n        }), this.handlePrevBubbleScatterPaths(\"bubble\"), this.handlePrevBubbleScatterPaths(\"scatter\");\n        var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t.config.chart.type, \" .apexcharts-series\"));\n        if (i.length > 0) for (var a = function (e) {\n            for (var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t.config.chart.type, \" .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] rect\")), a = [], s = function (t) {\n                var e = function (e) {\n                    return i[t].getAttribute(e);\n                  },\n                  s = {\n                    x: parseFloat(e(\"x\")),\n                    y: parseFloat(e(\"y\")),\n                    width: parseFloat(e(\"width\")),\n                    height: parseFloat(e(\"height\"))\n                  };\n                a.push({\n                  rect: s,\n                  color: i[t].getAttribute(\"color\")\n                });\n              }, r = 0; r < i.length; r++) s(r);\n            t.globals.previousPaths.push(a);\n          }, s = 0; s < i.length; s++) a(s);\n        t.globals.axisCharts || (t.globals.previousPaths = t.globals.series);\n      }\n    }, {\n      key: \"handlePrevBubbleScatterPaths\",\n      value: function (t) {\n        var e = this.w,\n          i = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t, \"-series .apexcharts-series\"));\n        if (i.length > 0) for (var a = 0; a < i.length; a++) {\n          for (var s = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t, \"-series .apexcharts-series[data\\\\:realIndex='\").concat(a, \"'] circle\")), r = [], o = 0; o < s.length; o++) r.push({\n            x: s[o].getAttribute(\"cx\"),\n            y: s[o].getAttribute(\"cy\"),\n            r: s[o].getAttribute(\"r\")\n          });\n          e.globals.previousPaths.push(r);\n        }\n      }\n    }, {\n      key: \"clearPreviousPaths\",\n      value: function () {\n        var t = this.w;\n        t.globals.previousPaths = [], t.globals.allSeriesCollapsed = !1;\n      }\n    }, {\n      key: \"handleNoData\",\n      value: function () {\n        var t = this.w,\n          e = t.config.noData,\n          i = new k(this.ctx),\n          a = t.globals.svgWidth / 2,\n          s = t.globals.svgHeight / 2,\n          r = \"middle\";\n        if (t.globals.noData = !0, t.globals.animationEnded = !0, \"left\" === e.align ? (a = 10, r = \"start\") : \"right\" === e.align && (a = t.globals.svgWidth - 10, r = \"end\"), \"top\" === e.verticalAlign ? s = 50 : \"bottom\" === e.verticalAlign && (s = t.globals.svgHeight - 50), a += e.offsetX, s = s + parseInt(e.style.fontSize, 10) + 2 + e.offsetY, void 0 !== e.text && \"\" !== e.text) {\n          var o = i.drawText({\n            x: a,\n            y: s,\n            text: e.text,\n            textAnchor: r,\n            fontSize: e.style.fontSize,\n            fontFamily: e.style.fontFamily,\n            foreColor: e.style.color,\n            opacity: 1,\n            class: \"apexcharts-text-nodata\"\n          });\n          t.globals.dom.Paper.add(o);\n        }\n      }\n    }, {\n      key: \"setNullSeriesToZeroValues\",\n      value: function (t) {\n        for (var e = this.w, i = 0; i < t.length; i++) if (0 === t[i].length) for (var a = 0; a < t[e.globals.maxValsInArrayIndex].length; a++) t[i].push(0);\n        return t;\n      }\n    }, {\n      key: \"hasAllSeriesEqualX\",\n      value: function () {\n        for (var t = !0, e = this.w, i = this.filteredSeriesX(), a = 0; a < i.length - 1; a++) if (i[a][0] !== i[a + 1][0]) {\n          t = !1;\n          break;\n        }\n        return e.globals.allSeriesHasEqualX = t, t;\n      }\n    }, {\n      key: \"filteredSeriesX\",\n      value: function () {\n        var t = this.w.globals.seriesX.map(function (t) {\n          return t.length > 0 ? t : [];\n        });\n        return t;\n      }\n    }]), t;\n  }(),\n  _ = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new A(this.ctx);\n    }\n    return s(t, [{\n      key: \"isMultiFormat\",\n      value: function () {\n        return this.isFormatXY() || this.isFormat2DArray();\n      }\n    }, {\n      key: \"isFormatXY\",\n      value: function () {\n        var t = this.w.config.series.slice(),\n          e = new V(this.ctx);\n        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null !== t[this.activeSeriesIndex].data[0] && void 0 !== t[this.activeSeriesIndex].data[0].x && null !== t[this.activeSeriesIndex].data[0]) return !0;\n      }\n    }, {\n      key: \"isFormat2DArray\",\n      value: function () {\n        var t = this.w.config.series.slice(),\n          e = new V(this.ctx);\n        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && void 0 !== t[this.activeSeriesIndex].data[0] && null !== t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array) return !0;\n      }\n    }, {\n      key: \"handleFormat2DArray\",\n      value: function (t, e) {\n        for (var i = this.w.config, a = this.w.globals, s = \"boxPlot\" === i.chart.type || \"boxPlot\" === i.series[e].type, r = 0; r < t[e].data.length; r++) if (void 0 !== t[e].data[r][1] && (Array.isArray(t[e].data[r][1]) && 4 === t[e].data[r][1].length && !s ? this.twoDSeries.push(m.parseNumber(t[e].data[r][1][3])) : t[e].data[r].length >= 5 ? this.twoDSeries.push(m.parseNumber(t[e].data[r][4])) : this.twoDSeries.push(m.parseNumber(t[e].data[r][1])), a.dataFormatXNumeric = !0), \"datetime\" === i.xaxis.type) {\n          var o = new Date(t[e].data[r][0]);\n          o = new Date(o).getTime(), this.twoDSeriesX.push(o);\n        } else this.twoDSeriesX.push(t[e].data[r][0]);\n        for (var n = 0; n < t[e].data.length; n++) void 0 !== t[e].data[n][2] && (this.threeDSeries.push(t[e].data[n][2]), a.isDataXYZ = !0);\n      }\n    }, {\n      key: \"handleFormatXY\",\n      value: function (t, e) {\n        var i = this.w.config,\n          a = this.w.globals,\n          s = new L(this.ctx),\n          r = e;\n        a.collapsedSeriesIndices.indexOf(e) > -1 && (r = this.activeSeriesIndex);\n        for (var o = 0; o < t[e].data.length; o++) void 0 !== t[e].data[o].y && (Array.isArray(t[e].data[o].y) ? this.twoDSeries.push(m.parseNumber(t[e].data[o].y[t[e].data[o].y.length - 1])) : this.twoDSeries.push(m.parseNumber(t[e].data[o].y))), void 0 !== t[e].data[o].goals && Array.isArray(t[e].data[o].goals) ? (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(t[e].data[o].goals)) : (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(null));\n        for (var n = 0; n < t[r].data.length; n++) {\n          var l = \"string\" == typeof t[r].data[n].x,\n            h = Array.isArray(t[r].data[n].x),\n            c = !h && !!s.isValidDate(t[r].data[n].x);\n          if (l || c) {\n            if (l || i.xaxis.convertedCatToNumeric) {\n              var d = a.isBarHorizontal && a.isRangeData;\n              \"datetime\" !== i.xaxis.type || d ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[n].x), isNaN(t[r].data[n].x) || \"category\" === this.w.config.xaxis.type || \"string\" == typeof t[r].data[n].x || (a.isXNumeric = !0)) : this.twoDSeriesX.push(s.parseDate(t[r].data[n].x));\n            } else \"datetime\" === i.xaxis.type ? this.twoDSeriesX.push(s.parseDate(t[r].data[n].x.toString())) : (a.dataFormatXNumeric = !0, a.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t[r].data[n].x)));\n          } else h ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[n].x)) : (a.isXNumeric = !0, a.dataFormatXNumeric = !0, this.twoDSeriesX.push(t[r].data[n].x));\n        }\n        if (t[e].data[0] && void 0 !== t[e].data[0].z) {\n          for (var g = 0; g < t[e].data.length; g++) this.threeDSeries.push(t[e].data[g].z);\n          a.isDataXYZ = !0;\n        }\n      }\n    }, {\n      key: \"handleRangeData\",\n      value: function (t, e) {\n        var i = this.w.globals,\n          a = {};\n        return this.isFormat2DArray() ? a = this.handleRangeDataFormat(\"array\", t, e) : this.isFormatXY() && (a = this.handleRangeDataFormat(\"xy\", t, e)), i.seriesRangeStart.push(void 0 === a.start ? [] : a.start), i.seriesRangeEnd.push(void 0 === a.end ? [] : a.end), i.seriesRange.push(a.rangeUniques), i.seriesRange.forEach(function (t, e) {\n          t && t.forEach(function (t, e) {\n            t.y.forEach(function (e, i) {\n              for (var a = 0; a < t.y.length; a++) if (i !== a) {\n                var s = e.y1,\n                  r = e.y2,\n                  o = t.y[a].y1;\n                s <= t.y[a].y2 && o <= r && (t.overlaps.indexOf(e.rangeName) < 0 && t.overlaps.push(e.rangeName), t.overlaps.indexOf(t.y[a].rangeName) < 0 && t.overlaps.push(t.y[a].rangeName));\n              }\n            });\n          });\n        }), a;\n      }\n    }, {\n      key: \"handleCandleStickBoxData\",\n      value: function (t, e) {\n        var i = this.w.globals,\n          a = {};\n        return this.isFormat2DArray() ? a = this.handleCandleStickBoxDataFormat(\"array\", t, e) : this.isFormatXY() && (a = this.handleCandleStickBoxDataFormat(\"xy\", t, e)), i.seriesCandleO[e] = a.o, i.seriesCandleH[e] = a.h, i.seriesCandleM[e] = a.m, i.seriesCandleL[e] = a.l, i.seriesCandleC[e] = a.c, a;\n      }\n    }, {\n      key: \"handleRangeDataFormat\",\n      value: function (t, e, i) {\n        var a = [],\n          s = [],\n          r = e[i].data.filter(function (t, e, i) {\n            return e === i.findIndex(function (e) {\n              return e.x === t.x;\n            });\n          }).map(function (t, e) {\n            return {\n              x: t.x,\n              overlaps: [],\n              y: []\n            };\n          });\n        if (\"array\" === t) for (var o = 0; o < e[i].data.length; o++) Array.isArray(e[i].data[o]) ? (a.push(e[i].data[o][1][0]), s.push(e[i].data[o][1][1])) : (a.push(e[i].data[o]), s.push(e[i].data[o]));else if (\"xy\" === t) for (var n = function (t) {\n            var o = Array.isArray(e[i].data[t].y),\n              n = m.randomId(),\n              l = e[i].data[t].x,\n              h = {\n                y1: o ? e[i].data[t].y[0] : e[i].data[t].y,\n                y2: o ? e[i].data[t].y[1] : e[i].data[t].y,\n                rangeName: n\n              };\n            e[i].data[t].rangeName = n;\n            var c = r.findIndex(function (t) {\n              return t.x === l;\n            });\n            r[c].y.push(h), a.push(h.y1), s.push(h.y2);\n          }, l = 0; l < e[i].data.length; l++) n(l);\n        return {\n          start: a,\n          end: s,\n          rangeUniques: r\n        };\n      }\n    }, {\n      key: \"handleCandleStickBoxDataFormat\",\n      value: function (t, e, i) {\n        var a = this.w,\n          s = \"boxPlot\" === a.config.chart.type || \"boxPlot\" === a.config.series[i].type,\n          r = [],\n          o = [],\n          n = [],\n          l = [],\n          h = [];\n        if (\"array\" === t) {\n          if (s && 6 === e[i].data[0].length || !s && 5 === e[i].data[0].length) for (var c = 0; c < e[i].data.length; c++) r.push(e[i].data[c][1]), o.push(e[i].data[c][2]), s ? (n.push(e[i].data[c][3]), l.push(e[i].data[c][4]), h.push(e[i].data[c][5])) : (l.push(e[i].data[c][3]), h.push(e[i].data[c][4]));else for (var d = 0; d < e[i].data.length; d++) Array.isArray(e[i].data[d][1]) && (r.push(e[i].data[d][1][0]), o.push(e[i].data[d][1][1]), s ? (n.push(e[i].data[d][1][2]), l.push(e[i].data[d][1][3]), h.push(e[i].data[d][1][4])) : (l.push(e[i].data[d][1][2]), h.push(e[i].data[d][1][3])));\n        } else if (\"xy\" === t) for (var g = 0; g < e[i].data.length; g++) Array.isArray(e[i].data[g].y) && (r.push(e[i].data[g].y[0]), o.push(e[i].data[g].y[1]), s ? (n.push(e[i].data[g].y[2]), l.push(e[i].data[g].y[3]), h.push(e[i].data[g].y[4])) : (l.push(e[i].data[g].y[2]), h.push(e[i].data[g].y[3])));\n        return {\n          o: r,\n          h: o,\n          m: n,\n          l: l,\n          c: h\n        };\n      }\n    }, {\n      key: \"parseDataAxisCharts\",\n      value: function (t) {\n        var e = this,\n          i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx,\n          a = this.w.config,\n          s = this.w.globals,\n          r = new L(i),\n          o = a.labels.length > 0 ? a.labels.slice() : a.xaxis.categories.slice();\n        s.isRangeBar = \"rangeBar\" === a.chart.type && s.isBarHorizontal, s.hasXaxisGroups = \"category\" === a.xaxis.type && a.xaxis.group.groups.length > 0, s.hasXaxisGroups && (s.groups = a.xaxis.group.groups), t.forEach(function (t, e) {\n          void 0 !== t.name ? s.seriesNames.push(t.name) : s.seriesNames.push(\"series-\" + parseInt(e + 1, 10));\n        }), this.coreUtils.setSeriesYAxisMappings();\n        var n = [],\n          l = p(new Set(a.series.map(function (t) {\n            return t.group;\n          })));\n        a.series.forEach(function (t, e) {\n          var i = l.indexOf(t.group);\n          n[i] || (n[i] = []), n[i].push(s.seriesNames[e]);\n        }), s.seriesGroups = n;\n        for (var h = function () {\n            for (var t = 0; t < o.length; t++) if (\"string\" == typeof o[t]) {\n              if (!r.isValidDate(o[t])) throw new Error(\"You have provided invalid Date format. Please provide a valid JavaScript Date\");\n              e.twoDSeriesX.push(r.parseDate(o[t]));\n            } else e.twoDSeriesX.push(o[t]);\n          }, c = 0; c < t.length; c++) {\n          if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t[c].data) return void console.error(\"It is a possibility that you may have not included 'data' property in series.\");\n          if (\"rangeBar\" !== a.chart.type && \"rangeArea\" !== a.chart.type && \"rangeBar\" !== t[c].type && \"rangeArea\" !== t[c].type || (s.isRangeData = !0, \"rangeBar\" !== a.chart.type && \"rangeArea\" !== a.chart.type || this.handleRangeData(t, c)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t, c) : this.isFormatXY() && this.handleFormatXY(t, c), \"candlestick\" !== a.chart.type && \"candlestick\" !== t[c].type && \"boxPlot\" !== a.chart.type && \"boxPlot\" !== t[c].type || this.handleCandleStickBoxData(t, c), s.series.push(this.twoDSeries), s.labels.push(this.twoDSeriesX), s.seriesX.push(this.twoDSeriesX), s.seriesGoals = this.seriesGoals, c !== this.activeSeriesIndex || this.fallbackToCategory || (s.isXNumeric = !0);else {\n            \"datetime\" === a.xaxis.type ? (s.isXNumeric = !0, h(), s.seriesX.push(this.twoDSeriesX)) : \"numeric\" === a.xaxis.type && (s.isXNumeric = !0, o.length > 0 && (this.twoDSeriesX = o, s.seriesX.push(this.twoDSeriesX))), s.labels.push(this.twoDSeriesX);\n            var d = t[c].data.map(function (t) {\n              return m.parseNumber(t);\n            });\n            s.series.push(d);\n          }\n          s.seriesZ.push(this.threeDSeries), void 0 !== t[c].color ? s.seriesColors.push(t[c].color) : s.seriesColors.push(void 0);\n        }\n        return this.w;\n      }\n    }, {\n      key: \"parseDataNonAxisCharts\",\n      value: function (t) {\n        var e = this.w.globals,\n          i = this.w.config;\n        e.series = t.slice(), e.seriesNames = i.labels.slice();\n        for (var a = 0; a < e.series.length; a++) void 0 === e.seriesNames[a] && e.seriesNames.push(\"series-\" + (a + 1));\n        return this.w;\n      }\n    }, {\n      key: \"handleExternalLabelsData\",\n      value: function (t) {\n        var e = this.w.config,\n          i = this.w.globals;\n        if (e.xaxis.categories.length > 0) i.labels = e.xaxis.categories;else if (e.labels.length > 0) i.labels = e.labels.slice();else if (this.fallbackToCategory) {\n          if (i.labels = i.labels[0], i.seriesRange.length && (i.seriesRange.map(function (t) {\n            t.forEach(function (t) {\n              i.labels.indexOf(t.x) < 0 && t.x && i.labels.push(t.x);\n            });\n          }), i.labels = Array.from(new Set(i.labels.map(JSON.stringify)), JSON.parse)), e.xaxis.convertedCatToNumeric) new F(e).convertCatToNumericXaxis(e, this.ctx, i.seriesX[0]), this._generateExternalLabels(t);\n        } else this._generateExternalLabels(t);\n      }\n    }, {\n      key: \"_generateExternalLabels\",\n      value: function (t) {\n        var e = this.w.globals,\n          i = this.w.config,\n          a = [];\n        if (e.axisCharts) {\n          if (e.series.length > 0) if (this.isFormatXY()) for (var s = i.series.map(function (t, e) {\n              return t.data.filter(function (t, e, i) {\n                return i.findIndex(function (e) {\n                  return e.x === t.x;\n                }) === e;\n              });\n            }), r = s.reduce(function (t, e, i, a) {\n              return a[t].length > e.length ? t : i;\n            }, 0), o = 0; o < s[r].length; o++) a.push(o + 1);else for (var n = 0; n < e.series[e.maxValsInArrayIndex].length; n++) a.push(n + 1);\n          e.seriesX = [];\n          for (var l = 0; l < t.length; l++) e.seriesX.push(a);\n          this.w.globals.isBarHorizontal || (e.isXNumeric = !0);\n        }\n        if (0 === a.length) {\n          a = e.axisCharts ? [] : e.series.map(function (t, e) {\n            return e + 1;\n          });\n          for (var h = 0; h < t.length; h++) e.seriesX.push(a);\n        }\n        e.labels = a, i.xaxis.convertedCatToNumeric && (e.categoryLabels = a.map(function (t) {\n          return i.xaxis.labels.formatter(t);\n        })), e.noLabelsProvided = !0;\n      }\n    }, {\n      key: \"parseData\",\n      value: function (t) {\n        var e = this.w,\n          i = e.config,\n          a = e.globals;\n        if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a.axisCharts ? (this.parseDataAxisCharts(t), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t), i.chart.stacked) {\n          var s = new V(this.ctx);\n          a.series = s.setNullSeriesToZeroValues(a.series);\n        }\n        this.coreUtils.getSeriesTotals(), a.axisCharts && (a.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals(), a.stackedSeriesTotalsByGroups = this.coreUtils.getStackedSeriesTotalsByGroups()), this.coreUtils.getPercentSeries(), a.dataFormatXNumeric || a.isXNumeric && (\"numeric\" !== i.xaxis.type || 0 !== i.labels.length || 0 !== i.xaxis.categories.length) || this.handleExternalLabelsData(t);\n        for (var r = this.coreUtils.getCategoryLabels(a.labels), o = 0; o < r.length; o++) if (Array.isArray(r[o])) {\n          a.isMultiLineX = !0;\n          break;\n        }\n      }\n    }, {\n      key: \"excludeCollapsedSeriesInYAxis\",\n      value: function () {\n        var t = this.w,\n          e = [];\n        t.globals.seriesYAxisMap.forEach(function (i, a) {\n          var s = 0;\n          i.forEach(function (e) {\n            -1 !== t.globals.collapsedSeriesIndices.indexOf(e) && s++;\n          }), s > 0 && s == i.length && e.push(a);\n        }), t.globals.ignoreYAxisIndexes = e.map(function (t) {\n          return t;\n        });\n      }\n    }]), t;\n  }(),\n  U = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"scaleSvgNode\",\n      value: function (t, e) {\n        var i = parseFloat(t.getAttributeNS(null, \"width\")),\n          a = parseFloat(t.getAttributeNS(null, \"height\"));\n        t.setAttributeNS(null, \"width\", i * e), t.setAttributeNS(null, \"height\", a * e), t.setAttributeNS(null, \"viewBox\", \"0 0 \" + i + \" \" + a);\n      }\n    }, {\n      key: \"getSvgString\",\n      value: function () {\n        var t = this;\n        return new Promise(function (e) {\n          var i = t.w,\n            a = i.config.chart.toolbar.export.width,\n            s = i.config.chart.toolbar.export.scale || a / i.globals.svgWidth;\n          s || (s = 1);\n          var r = t.w.globals.dom.Paper.svg(),\n            o = t.w.globals.dom.Paper.node.cloneNode(!0);\n          1 !== s && t.scaleSvgNode(o, s), t.convertImagesToBase64(o).then(function () {\n            r = new XMLSerializer().serializeToString(o), e(r.replace(/&nbsp;/g, \"&#160;\"));\n          });\n        });\n      }\n    }, {\n      key: \"convertImagesToBase64\",\n      value: function (t) {\n        var e = this,\n          i = t.getElementsByTagName(\"image\"),\n          a = Array.from(i).map(function (t) {\n            var i = t.getAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\");\n            return i && !i.startsWith(\"data:\") ? e.getBase64FromUrl(i).then(function (e) {\n              t.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", e);\n            }).catch(function (t) {\n              console.error(\"Error converting image to base64:\", t);\n            }) : Promise.resolve();\n          });\n        return Promise.all(a);\n      }\n    }, {\n      key: \"getBase64FromUrl\",\n      value: function (t) {\n        return new Promise(function (e, i) {\n          var a = new Image();\n          a.crossOrigin = \"Anonymous\", a.onload = function () {\n            var t = document.createElement(\"canvas\");\n            t.width = a.width, t.height = a.height, t.getContext(\"2d\").drawImage(a, 0, 0), e(t.toDataURL());\n          }, a.onerror = i, a.src = t;\n        });\n      }\n    }, {\n      key: \"cleanup\",\n      value: function () {\n        var t = this.w,\n          e = t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-xcrosshairs\"),\n          i = t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-ycrosshairs\"),\n          a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-zoom-rect, .apexcharts-selection-rect\");\n        Array.prototype.forEach.call(a, function (t) {\n          t.setAttribute(\"width\", 0);\n        }), e && e[0] && (e[0].setAttribute(\"x\", -500), e[0].setAttribute(\"x1\", -500), e[0].setAttribute(\"x2\", -500)), i && i[0] && (i[0].setAttribute(\"y\", -100), i[0].setAttribute(\"y1\", -100), i[0].setAttribute(\"y2\", -100));\n      }\n    }, {\n      key: \"svgUrl\",\n      value: function () {\n        var t = this;\n        return new Promise(function (e) {\n          t.cleanup(), t.getSvgString().then(function (t) {\n            var i = new Blob([t], {\n              type: \"image/svg+xml;charset=utf-8\"\n            });\n            e(URL.createObjectURL(i));\n          });\n        });\n      }\n    }, {\n      key: \"dataURI\",\n      value: function (t) {\n        var e = this;\n        return new Promise(function (i) {\n          var a = e.w,\n            s = t ? t.scale || t.width / a.globals.svgWidth : 1;\n          e.cleanup();\n          var r = document.createElement(\"canvas\");\n          r.width = a.globals.svgWidth * s, r.height = parseInt(a.globals.dom.elWrap.style.height, 10) * s;\n          var o = \"transparent\" !== a.config.chart.background && a.config.chart.background ? a.config.chart.background : \"#fff\",\n            n = r.getContext(\"2d\");\n          n.fillStyle = o, n.fillRect(0, 0, r.width * s, r.height * s), e.getSvgString().then(function (t) {\n            var e = \"data:image/svg+xml,\" + encodeURIComponent(t),\n              a = new Image();\n            a.crossOrigin = \"anonymous\", a.onload = function () {\n              if (n.drawImage(a, 0, 0), r.msToBlob) {\n                var t = r.msToBlob();\n                i({\n                  blob: t\n                });\n              } else {\n                var e = r.toDataURL(\"image/png\");\n                i({\n                  imgURI: e\n                });\n              }\n            }, a.src = e;\n          });\n        });\n      }\n    }, {\n      key: \"exportToSVG\",\n      value: function () {\n        var t = this;\n        this.svgUrl().then(function (e) {\n          t.triggerDownload(e, t.w.config.chart.toolbar.export.svg.filename, \".svg\");\n        });\n      }\n    }, {\n      key: \"exportToPng\",\n      value: function () {\n        var t = this,\n          e = this.w.config.chart.toolbar.export.scale,\n          i = this.w.config.chart.toolbar.export.width,\n          a = e ? {\n            scale: e\n          } : i ? {\n            width: i\n          } : void 0;\n        this.dataURI(a).then(function (e) {\n          var i = e.imgURI,\n            a = e.blob;\n          a ? navigator.msSaveOrOpenBlob(a, t.w.globals.chartID + \".png\") : t.triggerDownload(i, t.w.config.chart.toolbar.export.png.filename, \".png\");\n        });\n      }\n    }, {\n      key: \"exportToCSV\",\n      value: function (t) {\n        var e = this,\n          i = t.series,\n          a = t.fileName,\n          s = t.columnDelimiter,\n          r = void 0 === s ? \",\" : s,\n          o = t.lineDelimiter,\n          n = void 0 === o ? \"\\n\" : o,\n          l = this.w;\n        i || (i = l.config.series);\n        var h,\n          c,\n          d = [],\n          g = [],\n          u = \"\",\n          f = l.globals.series.map(function (t, e) {\n            return -1 === l.globals.collapsedSeriesIndices.indexOf(e) ? t : [];\n          }),\n          x = function (t) {\n            return \"function\" == typeof l.config.chart.toolbar.export.csv.categoryFormatter ? l.config.chart.toolbar.export.csv.categoryFormatter(t) : \"datetime\" === l.config.xaxis.type && String(t).length >= 10 ? new Date(t).toDateString() : m.isNumber(t) ? t : t.split(r).join(\"\");\n          },\n          b = function (t) {\n            return \"function\" == typeof l.config.chart.toolbar.export.csv.valueFormatter ? l.config.chart.toolbar.export.csv.valueFormatter(t) : t;\n          },\n          v = Math.max.apply(Math, p(i.map(function (t) {\n            return t.data ? t.data.length : 0;\n          }))),\n          y = new _(this.ctx),\n          w = new M(this.ctx),\n          k = function (t) {\n            var i = \"\";\n            if (l.globals.axisCharts) {\n              if (\"category\" === l.config.xaxis.type || l.config.xaxis.convertedCatToNumeric) if (l.globals.isBarHorizontal) {\n                var a = l.globals.yLabelFormatters[0],\n                  s = new V(e.ctx).getActiveConfigSeriesIndex();\n                i = a(l.globals.labels[t], {\n                  seriesIndex: s,\n                  dataPointIndex: t,\n                  w: l\n                });\n              } else i = w.getLabel(l.globals.labels, l.globals.timescaleLabels, 0, t).text;\n              \"datetime\" === l.config.xaxis.type && (l.config.xaxis.categories.length ? i = l.config.xaxis.categories[t] : l.config.labels.length && (i = l.config.labels[t]));\n            } else i = l.config.labels[t];\n            return null === i ? \"nullvalue\" : (Array.isArray(i) && (i = i.join(\" \")), m.isNumber(i) ? i : i.split(r).join(\"\"));\n          },\n          A = function (t, e) {\n            if (d.length && 0 === e && g.push(d.join(r)), t.data) {\n              t.data = t.data.length && t.data || p(Array(v)).map(function () {\n                return \"\";\n              });\n              for (var a = 0; a < t.data.length; a++) {\n                d = [];\n                var s = k(a);\n                if (\"nullvalue\" !== s) {\n                  if (s || (y.isFormatXY() ? s = i[e].data[a].x : y.isFormat2DArray() && (s = i[e].data[a] ? i[e].data[a][0] : \"\")), 0 === e) {\n                    d.push(x(s));\n                    for (var o = 0; o < l.globals.series.length; o++) {\n                      var n,\n                        h = y.isFormatXY() ? null === (n = i[o].data[a]) || void 0 === n ? void 0 : n.y : f[o][a];\n                      d.push(b(h));\n                    }\n                  }\n                  (\"candlestick\" === l.config.chart.type || t.type && \"candlestick\" === t.type) && (d.pop(), d.push(l.globals.seriesCandleO[e][a]), d.push(l.globals.seriesCandleH[e][a]), d.push(l.globals.seriesCandleL[e][a]), d.push(l.globals.seriesCandleC[e][a])), (\"boxPlot\" === l.config.chart.type || t.type && \"boxPlot\" === t.type) && (d.pop(), d.push(l.globals.seriesCandleO[e][a]), d.push(l.globals.seriesCandleH[e][a]), d.push(l.globals.seriesCandleM[e][a]), d.push(l.globals.seriesCandleL[e][a]), d.push(l.globals.seriesCandleC[e][a])), \"rangeBar\" === l.config.chart.type && (d.pop(), d.push(l.globals.seriesRangeStart[e][a]), d.push(l.globals.seriesRangeEnd[e][a])), d.length && g.push(d.join(r));\n                }\n              }\n            }\n          };\n        d.push(l.config.chart.toolbar.export.csv.headerCategory), \"boxPlot\" === l.config.chart.type ? (d.push(\"minimum\"), d.push(\"q1\"), d.push(\"median\"), d.push(\"q3\"), d.push(\"maximum\")) : \"candlestick\" === l.config.chart.type ? (d.push(\"open\"), d.push(\"high\"), d.push(\"low\"), d.push(\"close\")) : \"rangeBar\" === l.config.chart.type ? (d.push(\"minimum\"), d.push(\"maximum\")) : i.map(function (t, e) {\n          var i = (t.name ? t.name : \"series-\".concat(e)) + \"\";\n          l.globals.axisCharts && d.push(i.split(r).join(\"\") ? i.split(r).join(\"\") : \"series-\".concat(e));\n        }), l.globals.axisCharts || (d.push(l.config.chart.toolbar.export.csv.headerValue), g.push(d.join(r))), l.globals.allSeriesHasEqualX || !l.globals.axisCharts || l.config.xaxis.categories.length || l.config.labels.length ? i.map(function (t, e) {\n          l.globals.axisCharts ? A(t, e) : ((d = []).push(x(l.globals.labels[e])), d.push(b(f[e])), g.push(d.join(r)));\n        }) : (h = new Set(), c = {}, i.forEach(function (t, e) {\n          null == t || t.data.forEach(function (t) {\n            var a, s;\n            if (y.isFormatXY()) a = t.x, s = t.y;else {\n              if (!y.isFormat2DArray()) return;\n              a = t[0], s = t[1];\n            }\n            c[a] || (c[a] = Array(i.length).fill(\"\")), c[a][e] = b(s), h.add(a);\n          });\n        }), d.length && g.push(d.join(r)), Array.from(h).sort().forEach(function (t) {\n          g.push([x(t), c[t].join(r)]);\n        })), u += g.join(n), this.triggerDownload(\"data:text/csv; charset=utf-8,\" + encodeURIComponent(\"\\ufeff\" + u), a || l.config.chart.toolbar.export.csv.filename, \".csv\");\n      }\n    }, {\n      key: \"triggerDownload\",\n      value: function (t, e, i) {\n        var a = document.createElement(\"a\");\n        a.href = t, a.download = (e || this.w.globals.chartID) + i, document.body.appendChild(a), a.click(), document.body.removeChild(a);\n      }\n    }]), t;\n  }(),\n  q = function () {\n    function t(e, a) {\n      i(this, t), this.ctx = e, this.elgrid = a, this.w = e.w;\n      var s = this.w;\n      this.axesUtils = new M(e), this.xaxisLabels = s.globals.labels.slice(), s.globals.timescaleLabels.length > 0 && !s.globals.isBarHorizontal && (this.xaxisLabels = s.globals.timescaleLabels.slice()), s.config.xaxis.overwriteCategories && (this.xaxisLabels = s.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], \"top\" === s.config.xaxis.position ? this.offY = 0 : this.offY = s.globals.gridHeight, this.offY = this.offY + s.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = \"bar\" === s.config.chart.type && s.config.plotOptions.bar.horizontal, this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf(\"%\") > -1 ? this.xaxisBorderWidth = s.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s.config.xaxis.axisBorder.height, this.yaxis = s.config.yaxis[0];\n    }\n    return s(t, [{\n      key: \"drawXaxis\",\n      value: function () {\n        var t = this.w,\n          e = new k(this.ctx),\n          i = e.group({\n            class: \"apexcharts-xaxis\",\n            transform: \"translate(\".concat(t.config.xaxis.offsetX, \", \").concat(t.config.xaxis.offsetY, \")\")\n          }),\n          a = e.group({\n            class: \"apexcharts-xaxis-texts-g\",\n            transform: \"translate(\".concat(t.globals.translateXAxisX, \", \").concat(t.globals.translateXAxisY, \")\")\n          });\n        i.add(a);\n        for (var s = [], r = 0; r < this.xaxisLabels.length; r++) s.push(this.xaxisLabels[r]);\n        if (this.drawXAxisLabelAndGroup(!0, e, a, s, t.globals.isXNumeric, function (t, e) {\n          return e;\n        }), t.globals.hasXaxisGroups) {\n          var o = t.globals.groups;\n          s = [];\n          for (var n = 0; n < o.length; n++) s.push(o[n].title);\n          var l = {};\n          t.config.xaxis.group.style && (l.xaxisFontSize = t.config.xaxis.group.style.fontSize, l.xaxisFontFamily = t.config.xaxis.group.style.fontFamily, l.xaxisForeColors = t.config.xaxis.group.style.colors, l.fontWeight = t.config.xaxis.group.style.fontWeight, l.cssClass = t.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(!1, e, a, s, !1, function (t, e) {\n            return o[t].cols * e;\n          }, l);\n        }\n        if (void 0 !== t.config.xaxis.title.text) {\n          var h = e.group({\n              class: \"apexcharts-xaxis-title\"\n            }),\n            c = e.drawText({\n              x: t.globals.gridWidth / 2 + t.config.xaxis.title.offsetX,\n              y: this.offY + parseFloat(this.xaxisFontSize) + (\"bottom\" === t.config.xaxis.position ? t.globals.xAxisLabelsHeight : -t.globals.xAxisLabelsHeight - 10) + t.config.xaxis.title.offsetY,\n              text: t.config.xaxis.title.text,\n              textAnchor: \"middle\",\n              fontSize: t.config.xaxis.title.style.fontSize,\n              fontFamily: t.config.xaxis.title.style.fontFamily,\n              fontWeight: t.config.xaxis.title.style.fontWeight,\n              foreColor: t.config.xaxis.title.style.color,\n              cssClass: \"apexcharts-xaxis-title-text \" + t.config.xaxis.title.style.cssClass\n            });\n          h.add(c), i.add(h);\n        }\n        if (t.config.xaxis.axisBorder.show) {\n          var d = t.globals.barPadForNumericAxis,\n            g = e.drawLine(t.globals.padHorizontal + t.config.xaxis.axisBorder.offsetX - d, this.offY, this.xaxisBorderWidth + d, this.offY, t.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);\n          this.elgrid && this.elgrid.elGridBorders && t.config.grid.show ? this.elgrid.elGridBorders.add(g) : i.add(g);\n        }\n        return i;\n      }\n    }, {\n      key: \"drawXAxisLabelAndGroup\",\n      value: function (t, e, i, a, s, r) {\n        var o,\n          n = this,\n          l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {},\n          h = [],\n          c = [],\n          d = this.w,\n          g = l.xaxisFontSize || this.xaxisFontSize,\n          u = l.xaxisFontFamily || this.xaxisFontFamily,\n          f = l.xaxisForeColors || this.xaxisForeColors,\n          p = l.fontWeight || d.config.xaxis.labels.style.fontWeight,\n          x = l.cssClass || d.config.xaxis.labels.style.cssClass,\n          b = d.globals.padHorizontal,\n          v = a.length,\n          m = \"category\" === d.config.xaxis.type ? d.globals.dataPoints : v;\n        if (0 === m && v > m && (m = v), s) {\n          var y = m > 1 ? m - 1 : m;\n          o = d.globals.gridWidth / Math.min(y, v - 1), b = b + r(0, o) / 2 + d.config.xaxis.labels.offsetX;\n        } else o = d.globals.gridWidth / m, b = b + r(0, o) + d.config.xaxis.labels.offsetX;\n        for (var w = function (s) {\n            var l = b - r(s, o) / 2 + d.config.xaxis.labels.offsetX;\n            0 === s && 1 === v && o / 2 === b && 1 === m && (l = d.globals.gridWidth / 2);\n            var y = n.axesUtils.getLabel(a, d.globals.timescaleLabels, l, s, h, g, t),\n              w = 28;\n            d.globals.rotateXLabels && t && (w = 22), d.config.xaxis.title.text && \"top\" === d.config.xaxis.position && (w += parseFloat(d.config.xaxis.title.style.fontSize) + 2), t || (w = w + parseFloat(g) + (d.globals.xAxisLabelsHeight - d.globals.xAxisGroupLabelsHeight) + (d.globals.rotateXLabels ? 10 : 0)), y = void 0 !== d.config.xaxis.tickAmount && \"dataPoints\" !== d.config.xaxis.tickAmount && \"datetime\" !== d.config.xaxis.type ? n.axesUtils.checkLabelBasedOnTickamount(s, y, v) : n.axesUtils.checkForOverflowingLabels(s, y, v, h, c);\n            if (d.config.xaxis.labels.show) {\n              var k = e.drawText({\n                x: y.x,\n                y: n.offY + d.config.xaxis.labels.offsetY + w - (\"top\" === d.config.xaxis.position ? d.globals.xAxisHeight + d.config.xaxis.axisTicks.height - 2 : 0),\n                text: y.text,\n                textAnchor: \"middle\",\n                fontWeight: y.isBold ? 600 : p,\n                fontSize: g,\n                fontFamily: u,\n                foreColor: Array.isArray(f) ? t && d.config.xaxis.convertedCatToNumeric ? f[d.globals.minX + s - 1] : f[s] : f,\n                isPlainText: !1,\n                cssClass: (t ? \"apexcharts-xaxis-label \" : \"apexcharts-xaxis-group-label \") + x\n              });\n              if (i.add(k), k.on(\"click\", function (t) {\n                if (\"function\" == typeof d.config.chart.events.xAxisLabelClick) {\n                  var e = Object.assign({}, d, {\n                    labelIndex: s\n                  });\n                  d.config.chart.events.xAxisLabelClick(t, n.ctx, e);\n                }\n              }), t) {\n                var A = document.createElementNS(d.globals.SVGNS, \"title\");\n                A.textContent = Array.isArray(y.text) ? y.text.join(\" \") : y.text, k.node.appendChild(A), \"\" !== y.text && (h.push(y.text), c.push(y));\n              }\n            }\n            s < v - 1 && (b += r(s + 1, o));\n          }, k = 0; k <= v - 1; k++) w(k);\n      }\n    }, {\n      key: \"drawXaxisInversed\",\n      value: function (t) {\n        var e,\n          i,\n          a = this,\n          s = this.w,\n          r = new k(this.ctx),\n          o = s.config.yaxis[0].opposite ? s.globals.translateYAxisX[t] : 0,\n          n = r.group({\n            class: \"apexcharts-yaxis apexcharts-xaxis-inversed\",\n            rel: t\n          }),\n          l = r.group({\n            class: \"apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g\",\n            transform: \"translate(\" + o + \", 0)\"\n          });\n        n.add(l);\n        var h = [];\n        if (s.config.yaxis[t].show) for (var c = 0; c < this.xaxisLabels.length; c++) h.push(this.xaxisLabels[c]);\n        e = s.globals.gridHeight / h.length, i = -e / 2.2;\n        var d = s.globals.yLabelFormatters[0],\n          g = s.config.yaxis[0].labels;\n        if (g.show) for (var u = function (o) {\n            var n = void 0 === h[o] ? \"\" : h[o];\n            n = d(n, {\n              seriesIndex: t,\n              dataPointIndex: o,\n              w: s\n            });\n            var c = a.axesUtils.getYAxisForeColor(g.style.colors, t),\n              u = 0;\n            Array.isArray(n) && (u = n.length / 2 * parseInt(g.style.fontSize, 10));\n            var f = g.offsetX - 15,\n              p = \"end\";\n            a.yaxis.opposite && (p = \"start\"), \"left\" === s.config.yaxis[0].labels.align ? (f = g.offsetX, p = \"start\") : \"center\" === s.config.yaxis[0].labels.align ? (f = g.offsetX, p = \"middle\") : \"right\" === s.config.yaxis[0].labels.align && (p = \"end\");\n            var x = r.drawText({\n              x: f,\n              y: i + e + g.offsetY - u,\n              text: n,\n              textAnchor: p,\n              foreColor: Array.isArray(c) ? c[o] : c,\n              fontSize: g.style.fontSize,\n              fontFamily: g.style.fontFamily,\n              fontWeight: g.style.fontWeight,\n              isPlainText: !1,\n              cssClass: \"apexcharts-yaxis-label \" + g.style.cssClass,\n              maxWidth: g.maxWidth\n            });\n            l.add(x), x.on(\"click\", function (t) {\n              if (\"function\" == typeof s.config.chart.events.xAxisLabelClick) {\n                var e = Object.assign({}, s, {\n                  labelIndex: o\n                });\n                s.config.chart.events.xAxisLabelClick(t, a.ctx, e);\n              }\n            });\n            var b = document.createElementNS(s.globals.SVGNS, \"title\");\n            if (b.textContent = Array.isArray(n) ? n.join(\" \") : n, x.node.appendChild(b), 0 !== s.config.yaxis[t].labels.rotate) {\n              var v = r.rotateAroundCenter(x.node);\n              x.node.setAttribute(\"transform\", \"rotate(\".concat(s.config.yaxis[t].labels.rotate, \" 0 \").concat(v.y, \")\"));\n            }\n            i += e;\n          }, f = 0; f <= h.length - 1; f++) u(f);\n        if (void 0 !== s.config.yaxis[0].title.text) {\n          var p = r.group({\n              class: \"apexcharts-yaxis-title apexcharts-xaxis-title-inversed\",\n              transform: \"translate(\" + o + \", 0)\"\n            }),\n            x = r.drawText({\n              x: s.config.yaxis[0].title.offsetX,\n              y: s.globals.gridHeight / 2 + s.config.yaxis[0].title.offsetY,\n              text: s.config.yaxis[0].title.text,\n              textAnchor: \"middle\",\n              foreColor: s.config.yaxis[0].title.style.color,\n              fontSize: s.config.yaxis[0].title.style.fontSize,\n              fontWeight: s.config.yaxis[0].title.style.fontWeight,\n              fontFamily: s.config.yaxis[0].title.style.fontFamily,\n              cssClass: \"apexcharts-yaxis-title-text \" + s.config.yaxis[0].title.style.cssClass\n            });\n          p.add(x), n.add(p);\n        }\n        var b = 0;\n        this.isCategoryBarHorizontal && s.config.yaxis[0].opposite && (b = s.globals.gridWidth);\n        var v = s.config.xaxis.axisBorder;\n        if (v.show) {\n          var m = r.drawLine(s.globals.padHorizontal + v.offsetX + b, 1 + v.offsetY, s.globals.padHorizontal + v.offsetX + b, s.globals.gridHeight + v.offsetY, v.color, 0);\n          this.elgrid && this.elgrid.elGridBorders && s.config.grid.show ? this.elgrid.elGridBorders.add(m) : n.add(m);\n        }\n        return s.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b, h.length, s.config.yaxis[0].axisBorder, s.config.yaxis[0].axisTicks, 0, e, n), n;\n      }\n    }, {\n      key: \"drawXaxisTicks\",\n      value: function (t, e, i) {\n        var a = this.w,\n          s = t;\n        if (!(t < 0 || t - 2 > a.globals.gridWidth)) {\n          var r = this.offY + a.config.xaxis.axisTicks.offsetY;\n          if (e = e + r + a.config.xaxis.axisTicks.height, \"top\" === a.config.xaxis.position && (e = r - a.config.xaxis.axisTicks.height), a.config.xaxis.axisTicks.show) {\n            var o = new k(this.ctx).drawLine(t + a.config.xaxis.axisTicks.offsetX, r + a.config.xaxis.offsetY, s + a.config.xaxis.axisTicks.offsetX, e + a.config.xaxis.offsetY, a.config.xaxis.axisTicks.color);\n            i.add(o), o.node.classList.add(\"apexcharts-xaxis-tick\");\n          }\n        }\n      }\n    }, {\n      key: \"getXAxisTicksPositions\",\n      value: function () {\n        var t = this.w,\n          e = [],\n          i = this.xaxisLabels.length,\n          a = t.globals.padHorizontal;\n        if (t.globals.timescaleLabels.length > 0) for (var s = 0; s < i; s++) a = this.xaxisLabels[s].position, e.push(a);else for (var r = i, o = 0; o < r; o++) {\n          var n = r;\n          t.globals.isXNumeric && \"bar\" !== t.config.chart.type && (n -= 1), a += t.globals.gridWidth / n, e.push(a);\n        }\n        return e;\n      }\n    }, {\n      key: \"xAxisLabelCorrections\",\n      value: function () {\n        var t = this.w,\n          e = new k(this.ctx),\n          i = t.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g\"),\n          a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)\"),\n          s = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-inversed text\"),\n          r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-inversed-texts-g text tspan\");\n        if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways) for (var o = 0; o < a.length; o++) {\n          var n = e.rotateAroundCenter(a[o]);\n          n.y = n.y - 1, n.x = n.x + 1, a[o].setAttribute(\"transform\", \"rotate(\".concat(t.config.xaxis.labels.rotate, \" \").concat(n.x, \" \").concat(n.y, \")\")), a[o].setAttribute(\"text-anchor\", \"end\");\n          i.setAttribute(\"transform\", \"translate(0, \".concat(-10, \")\"));\n          var l = a[o].childNodes;\n          t.config.xaxis.labels.trim && Array.prototype.forEach.call(l, function (i) {\n            e.placeTextWithEllipsis(i, i.textContent, t.globals.xAxisLabelsHeight - (\"bottom\" === t.config.legend.position ? 20 : 10));\n          });\n        } else !function () {\n          for (var i = t.globals.gridWidth / (t.globals.labels.length + 1), s = 0; s < a.length; s++) {\n            var r = a[s].childNodes;\n            t.config.xaxis.labels.trim && \"datetime\" !== t.config.xaxis.type && Array.prototype.forEach.call(r, function (t) {\n              e.placeTextWithEllipsis(t, t.textContent, i);\n            });\n          }\n        }();\n        if (s.length > 0) {\n          var h = s[s.length - 1].getBBox(),\n            c = s[0].getBBox();\n          h.x < -20 && s[s.length - 1].parentNode.removeChild(s[s.length - 1]), c.x + c.width > t.globals.gridWidth && !t.globals.isBarHorizontal && s[0].parentNode.removeChild(s[0]);\n          for (var d = 0; d < r.length; d++) e.placeTextWithEllipsis(r[d], r[d].textContent, t.config.yaxis[0].labels.maxWidth - (t.config.yaxis[0].title.text ? 2 * parseFloat(t.config.yaxis[0].title.style.fontSize) : 0) - 15);\n        }\n      }\n    }]), t;\n  }(),\n  Z = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n      var a = this.w;\n      this.xaxisLabels = a.globals.labels.slice(), this.axesUtils = new M(e), this.isRangeBar = a.globals.seriesRange.length && a.globals.isBarHorizontal, a.globals.timescaleLabels.length > 0 && (this.xaxisLabels = a.globals.timescaleLabels.slice());\n    }\n    return s(t, [{\n      key: \"drawGridArea\",\n      value: function () {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n          e = this.w,\n          i = new k(this.ctx);\n        t || (t = i.group({\n          class: \"apexcharts-grid\"\n        }));\n        var a = i.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, \"transparent\"),\n          s = i.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, \"transparent\");\n        return t.add(s), t.add(a), t;\n      }\n    }, {\n      key: \"drawGrid\",\n      value: function () {\n        if (this.w.globals.axisCharts) {\n          var t = this.renderGrid();\n          return this.drawGridArea(t.el), t;\n        }\n        return null;\n      }\n    }, {\n      key: \"createGridMask\",\n      value: function () {\n        var t = this.w,\n          e = t.globals,\n          i = new k(this.ctx),\n          a = Array.isArray(t.config.stroke.width) ? Math.max.apply(Math, p(t.config.stroke.width)) : t.config.stroke.width,\n          s = function (t) {\n            var i = document.createElementNS(e.SVGNS, \"clipPath\");\n            return i.setAttribute(\"id\", t), i;\n          };\n        e.dom.elGridRectMask = s(\"gridRectMask\".concat(e.cuid)), e.dom.elGridRectBarMask = s(\"gridRectBarMask\".concat(e.cuid)), e.dom.elGridRectMarkerMask = s(\"gridRectMarkerMask\".concat(e.cuid)), e.dom.elForecastMask = s(\"forecastMask\".concat(e.cuid)), e.dom.elNonForecastMask = s(\"nonForecastMask\".concat(e.cuid));\n        var r = 0,\n          o = 0;\n        ([\"bar\", \"rangeBar\", \"candlestick\", \"boxPlot\"].includes(t.config.chart.type) || t.globals.comboBarCount > 0) && t.globals.isXNumeric && !t.globals.isBarHorizontal && (r = Math.max(t.config.grid.padding.left, e.barPadForNumericAxis), o = Math.max(t.config.grid.padding.right, e.barPadForNumericAxis)), e.dom.elGridRect = i.drawRect(0, 0, e.gridWidth, e.gridHeight, 0, \"#fff\"), e.dom.elGridRectBar = i.drawRect(-a / 2 - r - 2, -a / 2 - 2, e.gridWidth + a + o + r + 4, e.gridHeight + a + 4, 0, \"#fff\");\n        var n = t.globals.markers.largestSize;\n        e.dom.elGridRectMarker = i.drawRect(-n, -n, e.gridWidth + 2 * n, e.gridHeight + 2 * n, 0, \"#fff\"), e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node), e.dom.elGridRectBarMask.appendChild(e.dom.elGridRectBar.node), e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);\n        var l = e.dom.baseEl.querySelector(\"defs\");\n        l.appendChild(e.dom.elGridRectMask), l.appendChild(e.dom.elGridRectBarMask), l.appendChild(e.dom.elGridRectMarkerMask), l.appendChild(e.dom.elForecastMask), l.appendChild(e.dom.elNonForecastMask);\n      }\n    }, {\n      key: \"_drawGridLines\",\n      value: function (t) {\n        var e = t.i,\n          i = t.x1,\n          a = t.y1,\n          s = t.x2,\n          r = t.y2,\n          o = t.xCount,\n          n = t.parent,\n          l = this.w;\n        if (!(0 === e && l.globals.skipFirstTimelinelabel || e === o - 1 && l.globals.skipLastTimelinelabel && !l.config.xaxis.labels.formatter || \"radar\" === l.config.chart.type)) {\n          l.config.grid.xaxis.lines.show && this._drawGridLine({\n            i: e,\n            x1: i,\n            y1: a,\n            x2: s,\n            y2: r,\n            xCount: o,\n            parent: n\n          });\n          var h = 0;\n          if (l.globals.hasXaxisGroups && \"between\" === l.config.xaxis.tickPlacement) {\n            var c = l.globals.groups;\n            if (c) {\n              for (var d = 0, g = 0; d < e && g < c.length; g++) d += c[g].cols;\n              d === e && (h = .6 * l.globals.xAxisLabelsHeight);\n            }\n          }\n          new q(this.ctx).drawXaxisTicks(i, h, l.globals.dom.elGraphical);\n        }\n      }\n    }, {\n      key: \"_drawGridLine\",\n      value: function (t) {\n        var e = t.i,\n          i = t.x1,\n          a = t.y1,\n          s = t.x2,\n          r = t.y2,\n          o = t.xCount,\n          n = t.parent,\n          l = this.w,\n          h = n.node.classList.contains(\"apexcharts-gridlines-horizontal\"),\n          c = l.globals.barPadForNumericAxis,\n          d = 0 === a && 0 === r || 0 === i && 0 === s || a === l.globals.gridHeight && r === l.globals.gridHeight || l.globals.isBarHorizontal && (0 === e || e === o - 1),\n          g = new k(this).drawLine(i - (h ? c : 0), a, s + (h ? c : 0), r, l.config.grid.borderColor, l.config.grid.strokeDashArray);\n        g.node.classList.add(\"apexcharts-gridline\"), d && l.config.grid.show ? this.elGridBorders.add(g) : n.add(g);\n      }\n    }, {\n      key: \"_drawGridBandRect\",\n      value: function (t) {\n        var e = t.c,\n          i = t.x1,\n          a = t.y1,\n          s = t.x2,\n          r = t.y2,\n          o = t.type,\n          n = this.w,\n          l = new k(this.ctx),\n          h = n.globals.barPadForNumericAxis,\n          c = n.config.grid[o].colors[e],\n          d = l.drawRect(i - (\"row\" === o ? h : 0), a, s + (\"row\" === o ? 2 * h : 0), r, 0, c, n.config.grid[o].opacity);\n        this.elg.add(d), d.attr(\"clip-path\", \"url(#gridRectMask\".concat(n.globals.cuid, \")\")), d.node.classList.add(\"apexcharts-grid-\".concat(o));\n      }\n    }, {\n      key: \"_drawXYLines\",\n      value: function (t) {\n        var e = this,\n          i = t.xCount,\n          a = t.tickAmount,\n          s = this.w;\n        if (s.config.grid.xaxis.lines.show || s.config.xaxis.axisTicks.show) {\n          var r,\n            o = s.globals.padHorizontal,\n            n = s.globals.gridHeight;\n          s.globals.timescaleLabels.length ? function (t) {\n            for (var a = t.xC, s = t.x1, r = t.y1, o = t.x2, n = t.y2, l = 0; l < a; l++) s = e.xaxisLabels[l].position, o = e.xaxisLabels[l].position, e._drawGridLines({\n              i: l,\n              x1: s,\n              y1: r,\n              x2: o,\n              y2: n,\n              xCount: i,\n              parent: e.elgridLinesV\n            });\n          }({\n            xC: i,\n            x1: o,\n            y1: 0,\n            x2: r,\n            y2: n\n          }) : (s.globals.isXNumeric && (i = s.globals.xAxisScale.result.length), function (t) {\n            for (var a = t.xC, r = t.x1, o = t.y1, n = t.x2, l = t.y2, h = 0; h < a + (s.globals.isXNumeric ? 0 : 1); h++) 0 === h && 1 === a && 1 === s.globals.dataPoints && (n = r = s.globals.gridWidth / 2), e._drawGridLines({\n              i: h,\n              x1: r,\n              y1: o,\n              x2: n,\n              y2: l,\n              xCount: i,\n              parent: e.elgridLinesV\n            }), n = r += s.globals.gridWidth / (s.globals.isXNumeric ? a - 1 : a);\n          }({\n            xC: i,\n            x1: o,\n            y1: 0,\n            x2: r,\n            y2: n\n          }));\n        }\n        if (s.config.grid.yaxis.lines.show) {\n          var l = 0,\n            h = 0,\n            c = s.globals.gridWidth,\n            d = a + 1;\n          this.isRangeBar && (d = s.globals.labels.length);\n          for (var g = 0; g < d + (this.isRangeBar ? 1 : 0); g++) this._drawGridLine({\n            i: g,\n            xCount: d + (this.isRangeBar ? 1 : 0),\n            x1: 0,\n            y1: l,\n            x2: c,\n            y2: h,\n            parent: this.elgridLinesH\n          }), h = l += s.globals.gridHeight / (this.isRangeBar ? d : a);\n        }\n      }\n    }, {\n      key: \"_drawInvertedXYLines\",\n      value: function (t) {\n        var e = t.xCount,\n          i = this.w;\n        if (i.config.grid.xaxis.lines.show || i.config.xaxis.axisTicks.show) for (var a, s = i.globals.padHorizontal, r = i.globals.gridHeight, o = 0; o < e + 1; o++) {\n          i.config.grid.xaxis.lines.show && this._drawGridLine({\n            i: o,\n            xCount: e + 1,\n            x1: s,\n            y1: 0,\n            x2: a,\n            y2: r,\n            parent: this.elgridLinesV\n          }), new q(this.ctx).drawXaxisTicks(s, 0, i.globals.dom.elGraphical), a = s += i.globals.gridWidth / e;\n        }\n        if (i.config.grid.yaxis.lines.show) for (var n = 0, l = 0, h = i.globals.gridWidth, c = 0; c < i.globals.dataPoints + 1; c++) this._drawGridLine({\n          i: c,\n          xCount: i.globals.dataPoints + 1,\n          x1: 0,\n          y1: n,\n          x2: h,\n          y2: l,\n          parent: this.elgridLinesH\n        }), l = n += i.globals.gridHeight / i.globals.dataPoints;\n      }\n    }, {\n      key: \"renderGrid\",\n      value: function () {\n        var t = this.w,\n          e = t.globals,\n          i = new k(this.ctx);\n        this.elg = i.group({\n          class: \"apexcharts-grid\"\n        }), this.elgridLinesH = i.group({\n          class: \"apexcharts-gridlines-horizontal\"\n        }), this.elgridLinesV = i.group({\n          class: \"apexcharts-gridlines-vertical\"\n        }), this.elGridBorders = i.group({\n          class: \"apexcharts-grid-borders\"\n        }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());\n        for (var a = 0; a < e.seriesYAxisMap.length && e.ignoreYAxisIndexes.includes(a);) a++;\n        a === e.seriesYAxisMap.length && (a = 0);\n        var s,\n          r = e.yAxisScale[a].result.length - 1;\n        if (!e.isBarHorizontal || this.isRangeBar) {\n          var o, n, l;\n          if (s = this.xaxisLabels.length, this.isRangeBar) r = e.labels.length, t.config.xaxis.tickAmount && t.config.xaxis.labels.formatter && (s = t.config.xaxis.tickAmount), (null === (o = e.yAxisScale) || void 0 === o || null === (n = o[a]) || void 0 === n || null === (l = n.result) || void 0 === l ? void 0 : l.length) > 0 && \"datetime\" !== t.config.xaxis.type && (s = e.yAxisScale[a].result.length - 1);\n          this._drawXYLines({\n            xCount: s,\n            tickAmount: r\n          });\n        } else s = r, r = e.xTickAmount, this._drawInvertedXYLines({\n          xCount: s,\n          tickAmount: r\n        });\n        return this.drawGridBands(s, r), {\n          el: this.elg,\n          elGridBorders: this.elGridBorders,\n          xAxisTickWidth: e.gridWidth / s\n        };\n      }\n    }, {\n      key: \"drawGridBands\",\n      value: function (t, e) {\n        var i,\n          a,\n          s = this,\n          r = this.w;\n        if ((null === (i = r.config.grid.row.colors) || void 0 === i ? void 0 : i.length) > 0 && function (t, i, a, o, n, l) {\n          for (var h = 0, c = 0; h < i; h++, c++) c >= r.config.grid[t].colors.length && (c = 0), s._drawGridBandRect({\n            c: c,\n            x1: a,\n            y1: o,\n            x2: n,\n            y2: l,\n            type: t\n          }), o += r.globals.gridHeight / e;\n        }(\"row\", e, 0, 0, r.globals.gridWidth, r.globals.gridHeight / e), (null === (a = r.config.grid.column.colors) || void 0 === a ? void 0 : a.length) > 0) {\n          var o = r.globals.isBarHorizontal || \"on\" !== r.config.xaxis.tickPlacement || \"category\" !== r.config.xaxis.type && !r.config.xaxis.convertedCatToNumeric ? t : t - 1;\n          r.globals.isXNumeric && (o = r.globals.xAxisScale.result.length - 1);\n          for (var n = r.globals.padHorizontal, l = r.globals.padHorizontal + r.globals.gridWidth / o, h = r.globals.gridHeight, c = 0, d = 0; c < t; c++, d++) {\n            var g;\n            if (d >= r.config.grid.column.colors.length && (d = 0), \"datetime\" === r.config.xaxis.type) n = this.xaxisLabels[c].position, l = ((null === (g = this.xaxisLabels[c + 1]) || void 0 === g ? void 0 : g.position) || r.globals.gridWidth) - this.xaxisLabels[c].position;\n            this._drawGridBandRect({\n              c: d,\n              x1: n,\n              y1: 0,\n              x2: l,\n              y2: h,\n              type: \"column\"\n            }), n += r.globals.gridWidth / o;\n          }\n        }\n      }\n    }]), t;\n  }(),\n  $ = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.coreUtils = new A(this.ctx);\n    }\n    return s(t, [{\n      key: \"niceScale\",\n      value: function (t, e) {\n        var i,\n          a,\n          s,\n          r,\n          o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n          n = 1e-11,\n          l = this.w,\n          h = l.globals;\n        h.isBarHorizontal ? (i = l.config.xaxis, a = Math.max((h.svgWidth - 100) / 25, 2)) : (i = l.config.yaxis[o], a = Math.max((h.svgHeight - 100) / 15, 2)), m.isNumber(a) || (a = 10), s = void 0 !== i.min && null !== i.min, r = void 0 !== i.max && null !== i.min;\n        var c = void 0 !== i.stepSize && null !== i.stepSize,\n          d = void 0 !== i.tickAmount && null !== i.tickAmount,\n          g = d ? i.tickAmount : h.niceScaleDefaultTicks[Math.min(Math.round(a / 2), h.niceScaleDefaultTicks.length - 1)];\n        if (h.isMultipleYAxis && !d && h.multiAxisTickAmount > 0 && (g = h.multiAxisTickAmount, d = !0), g = \"dataPoints\" === g ? h.dataPoints - 1 : Math.abs(Math.round(g)), (t === Number.MIN_VALUE && 0 === e || !m.isNumber(t) && !m.isNumber(e) || t === Number.MIN_VALUE && e === -Number.MAX_VALUE) && (t = m.isNumber(i.min) ? i.min : 0, e = m.isNumber(i.max) ? i.max : t + g, h.allSeriesCollapsed = !1), t > e) {\n          console.warn(\"axis.min cannot be greater than axis.max: swapping min and max\");\n          var u = e;\n          e = t, t = u;\n        } else t === e && (t = 0 === t ? 0 : t - 1, e = 0 === e ? 2 : e + 1);\n        var f = [];\n        g < 1 && (g = 1);\n        var p = g,\n          x = Math.abs(e - t);\n        !s && t > 0 && t / x < .15 && (t = 0, s = !0), !r && e < 0 && -e / x < .15 && (e = 0, r = !0);\n        var b = (x = Math.abs(e - t)) / p,\n          v = b,\n          y = Math.floor(Math.log10(v)),\n          w = Math.pow(10, y),\n          k = Math.ceil(v / w);\n        if (b = v = (k = h.niceScaleAllowedMagMsd[0 === h.yValueDecimal ? 0 : 1][k]) * w, h.isBarHorizontal && i.stepSize && \"datetime\" !== i.type ? (b = i.stepSize, c = !0) : c && (b = i.stepSize), c && i.forceNiceScale) {\n          var A = Math.floor(Math.log10(b));\n          b *= Math.pow(10, y - A);\n        }\n        if (s && r) {\n          var S = x / p;\n          if (d) {\n            if (c) {\n              if (0 != m.mod(x, b)) {\n                var C = m.getGCD(b, S);\n                b = S / C < 10 ? C : S;\n              } else 0 == m.mod(b, S) ? b = S : (S = b, d = !1);\n            } else b = S;\n          } else if (c) 0 == m.mod(x, b) ? S = b : b = S;else if (0 == m.mod(x, b)) S = b;else {\n            S = x / (p = Math.ceil(x / b));\n            var L = m.getGCD(x, b);\n            x / L < a && (S = L), b = S;\n          }\n          p = Math.round(x / b);\n        } else {\n          if (s || r) {\n            if (r) {\n              if (d) t = e - b * p;else {\n                var P = t;\n                t = b * Math.floor(t / b), Math.abs(e - t) / m.getGCD(x, b) > a && (t = e - b * g, t += b * Math.floor((P - t) / b));\n              }\n            } else if (s) if (d) e = t + b * p;else {\n              var M = e;\n              e = b * Math.ceil(e / b), Math.abs(e - t) / m.getGCD(x, b) > a && (e = t + b * g, e += b * Math.ceil((M - e) / b));\n            }\n          } else if (h.isMultipleYAxis && d) {\n            var I = b * Math.floor(t / b),\n              T = I + b * p;\n            T < e && (b *= 2), T = e, e = (t = I) + b * p, x = Math.abs(e - t), t > 0 && t < Math.abs(T - e) && (t = 0, e = b * p), e < 0 && -e < Math.abs(I - t) && (e = 0, t = -b * p);\n          } else t = b * Math.floor(t / b), e = b * Math.ceil(e / b);\n          x = Math.abs(e - t), b = m.getGCD(x, b), p = Math.round(x / b);\n        }\n        if (d || s || r || (p = Math.ceil((x - n) / (b + n))) > 16 && m.getPrimeFactors(p).length < 2 && p++, !d && i.forceNiceScale && 0 === h.yValueDecimal && p > x && (p = x, b = Math.round(x / p)), p > a && (!d && !c || i.forceNiceScale)) {\n          var z = m.getPrimeFactors(p),\n            X = z.length - 1,\n            E = p;\n          t: for (var Y = 0; Y < X; Y++) for (var R = 0; R <= X - Y; R++) {\n            for (var F = Math.min(R + Y, X), D = E, H = 1, O = R; O <= F; O++) H *= z[O];\n            if ((D /= H) < a) {\n              E = D;\n              break t;\n            }\n          }\n          b = E === p ? x : x / E, p = Math.round(x / b);\n        }\n        h.isMultipleYAxis && 0 == h.multiAxisTickAmount && h.ignoreYAxisIndexes.indexOf(o) < 0 && (h.multiAxisTickAmount = p);\n        var N = t - b,\n          W = b * n;\n        do {\n          N += b, f.push(m.stripNumber(N, 7));\n        } while (e - N > W);\n        return {\n          result: f,\n          niceMin: f[0],\n          niceMax: f[f.length - 1]\n        };\n      }\n    }, {\n      key: \"linearScale\",\n      value: function (t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,\n          a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n          s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0,\n          r = Math.abs(e - t),\n          o = [];\n        if (t === e) return {\n          result: o = [t],\n          niceMin: o[0],\n          niceMax: o[o.length - 1]\n        };\n        \"dataPoints\" === (i = this._adjustTicksForSmallRange(i, a, r)) && (i = this.w.globals.dataPoints - 1), s || (s = r / i), s = Math.round(10 * (s + Number.EPSILON)) / 10, i === Number.MAX_VALUE && (i = 5, s = 1);\n        for (var n = t; i >= 0;) o.push(n), n = m.preciseAddition(n, s), i -= 1;\n        return {\n          result: o,\n          niceMin: o[0],\n          niceMax: o[o.length - 1]\n        };\n      }\n    }, {\n      key: \"logarithmicScaleNice\",\n      value: function (t, e, i) {\n        e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));\n        for (var a = [], s = Math.ceil(Math.log(e) / Math.log(i) + 1), r = Math.floor(Math.log(t) / Math.log(i)); r < s; r++) a.push(Math.pow(i, r));\n        return {\n          result: a,\n          niceMin: a[0],\n          niceMax: a[a.length - 1]\n        };\n      }\n    }, {\n      key: \"logarithmicScale\",\n      value: function (t, e, i) {\n        e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));\n        for (var a = [], s = Math.log(e) / Math.log(i), r = Math.log(t) / Math.log(i), o = s - r, n = Math.round(o), l = o / n, h = 0, c = r; h < n; h++, c += l) a.push(Math.pow(i, c));\n        return a.push(Math.pow(i, s)), {\n          result: a,\n          niceMin: t,\n          niceMax: e\n        };\n      }\n    }, {\n      key: \"_adjustTicksForSmallRange\",\n      value: function (t, e, i) {\n        var a = t;\n        if (void 0 !== e && this.w.config.yaxis[e].labels.formatter && void 0 === this.w.config.yaxis[e].tickAmount) {\n          var s = Number(this.w.config.yaxis[e].labels.formatter(1));\n          m.isNumber(s) && 0 === this.w.globals.yValueDecimal && (a = Math.ceil(i));\n        }\n        return a < t ? a : t;\n      }\n    }, {\n      key: \"setYScaleForIndex\",\n      value: function (t, e, i) {\n        var a = this.w.globals,\n          s = this.w.config,\n          r = a.isBarHorizontal ? s.xaxis : s.yaxis[t];\n        void 0 === a.yAxisScale[t] && (a.yAxisScale[t] = []);\n        var o = Math.abs(i - e);\n        r.logarithmic && o <= 5 && (a.invalidLogScale = !0), r.logarithmic && o > 5 ? (a.allSeriesCollapsed = !1, a.yAxisScale[t] = r.forceNiceScale ? this.logarithmicScaleNice(e, i, r.logBase) : this.logarithmicScale(e, i, r.logBase)) : i !== -Number.MAX_VALUE && m.isNumber(i) && e !== Number.MAX_VALUE && m.isNumber(e) ? (a.allSeriesCollapsed = !1, a.yAxisScale[t] = this.niceScale(e, i, t)) : a.yAxisScale[t] = this.niceScale(Number.MIN_VALUE, 0, t);\n      }\n    }, {\n      key: \"setXScale\",\n      value: function (t, e) {\n        var i = this.w,\n          a = i.globals,\n          s = Math.abs(e - t);\n        if (e !== -Number.MAX_VALUE && m.isNumber(e)) {\n          var r = a.xTickAmount + 1;\n          s < 10 && s > 1 && (r = s), a.xAxisScale = this.linearScale(t, e, r, 0, i.config.xaxis.stepSize);\n        } else a.xAxisScale = this.linearScale(0, 10, 10);\n        return a.xAxisScale;\n      }\n    }, {\n      key: \"scaleMultipleYAxes\",\n      value: function () {\n        var t = this,\n          e = this.w.config,\n          i = this.w.globals;\n        this.coreUtils.setSeriesYAxisMappings();\n        var a = i.seriesYAxisMap,\n          s = i.minYArr,\n          r = i.maxYArr;\n        i.allSeriesCollapsed = !0, i.barGroups = [], a.forEach(function (a, o) {\n          var n = [];\n          a.forEach(function (t) {\n            var i = e.series[t].group;\n            n.indexOf(i) < 0 && n.push(i);\n          }), a.length > 0 ? function () {\n            var l,\n              h,\n              c = Number.MAX_VALUE,\n              d = -Number.MAX_VALUE,\n              g = c,\n              u = d;\n            if (e.chart.stacked) !function () {\n              var t = new Array(i.dataPoints).fill(0),\n                s = [],\n                r = [],\n                f = [];\n              n.forEach(function () {\n                s.push(t.map(function () {\n                  return Number.MIN_VALUE;\n                })), r.push(t.map(function () {\n                  return Number.MIN_VALUE;\n                })), f.push(t.map(function () {\n                  return Number.MIN_VALUE;\n                }));\n              });\n              for (var p = function (t) {\n                  !l && e.series[a[t]].type && (l = e.series[a[t]].type);\n                  var c = a[t];\n                  h = e.series[c].group ? e.series[c].group : \"axis-\".concat(o), !(i.collapsedSeriesIndices.indexOf(c) < 0 && i.ancillaryCollapsedSeriesIndices.indexOf(c) < 0) || (i.allSeriesCollapsed = !1, n.forEach(function (t, a) {\n                    if (e.series[c].group === t) for (var o = 0; o < i.series[c].length; o++) {\n                      var n = i.series[c][o];\n                      n >= 0 ? r[a][o] += n : f[a][o] += n, s[a][o] += n, g = Math.min(g, n), u = Math.max(u, n);\n                    }\n                  })), \"bar\" !== l && \"column\" !== l || i.barGroups.push(h);\n                }, x = 0; x < a.length; x++) p(x);\n              l || (l = e.chart.type), \"bar\" === l || \"column\" === l ? n.forEach(function (t, e) {\n                c = Math.min(c, Math.min.apply(null, f[e])), d = Math.max(d, Math.max.apply(null, r[e]));\n              }) : (n.forEach(function (t, e) {\n                g = Math.min(g, Math.min.apply(null, s[e])), u = Math.max(u, Math.max.apply(null, s[e]));\n              }), c = g, d = u), c === Number.MIN_VALUE && d === Number.MIN_VALUE && (d = -Number.MAX_VALUE);\n            }();else for (var f = 0; f < a.length; f++) {\n              var p = a[f];\n              c = Math.min(c, s[p]), d = Math.max(d, r[p]), !(i.collapsedSeriesIndices.indexOf(p) < 0 && i.ancillaryCollapsedSeriesIndices.indexOf(p) < 0) || (i.allSeriesCollapsed = !1);\n            }\n            void 0 !== e.yaxis[o].min && (c = \"function\" == typeof e.yaxis[o].min ? e.yaxis[o].min(c) : e.yaxis[o].min), void 0 !== e.yaxis[o].max && (d = \"function\" == typeof e.yaxis[o].max ? e.yaxis[o].max(d) : e.yaxis[o].max), i.barGroups = i.barGroups.filter(function (t, e, i) {\n              return i.indexOf(t) === e;\n            }), t.setYScaleForIndex(o, c, d), a.forEach(function (t) {\n              s[t] = i.yAxisScale[o].niceMin, r[t] = i.yAxisScale[o].niceMax;\n            });\n          }() : t.setYScaleForIndex(o, 0, -Number.MAX_VALUE);\n        });\n      }\n    }]), t;\n  }(),\n  J = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.scales = new $(e);\n    }\n    return s(t, [{\n      key: \"init\",\n      value: function () {\n        this.setYRange(), this.setXRange(), this.setZRange();\n      }\n    }, {\n      key: \"getMinYMaxY\",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE,\n          i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE,\n          a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n          s = this.w.config,\n          r = this.w.globals,\n          o = -Number.MAX_VALUE,\n          n = Number.MIN_VALUE;\n        null === a && (a = t + 1);\n        var l = r.series,\n          h = l,\n          c = l;\n        \"candlestick\" === s.chart.type ? (h = r.seriesCandleL, c = r.seriesCandleH) : \"boxPlot\" === s.chart.type ? (h = r.seriesCandleO, c = r.seriesCandleC) : r.isRangeData && (h = r.seriesRangeStart, c = r.seriesRangeEnd);\n        var d = !1;\n        if (r.seriesX.length >= a) {\n          var g,\n            u = null === (g = r.brushSource) || void 0 === g ? void 0 : g.w.config.chart.brush;\n          (s.chart.zoom.enabled && s.chart.zoom.autoScaleYaxis || null != u && u.enabled && null != u && u.autoScaleYaxis) && (d = !0);\n        }\n        for (var f = t; f < a; f++) {\n          r.dataPoints = Math.max(r.dataPoints, l[f].length);\n          var p = s.series[f].type;\n          r.categoryLabels.length && (r.dataPoints = r.categoryLabels.filter(function (t) {\n            return void 0 !== t;\n          }).length), r.labels.length && \"datetime\" !== s.xaxis.type && 0 !== r.series.reduce(function (t, e) {\n            return t + e.length;\n          }, 0) && (r.dataPoints = Math.max(r.dataPoints, r.labels.length));\n          var x = 0,\n            b = l[f].length - 1;\n          if (d) {\n            if (s.xaxis.min) for (; x < b && r.seriesX[f][x] < s.xaxis.min; x++);\n            if (s.xaxis.max) for (; b > x && r.seriesX[f][b] > s.xaxis.max; b--);\n          }\n          for (var v = x; v <= b && v < r.series[f].length; v++) {\n            var y = l[f][v];\n            if (null !== y && m.isNumber(y)) {\n              switch (void 0 !== c[f][v] && (o = Math.max(o, c[f][v]), e = Math.min(e, c[f][v])), void 0 !== h[f][v] && (e = Math.min(e, h[f][v]), i = Math.max(i, h[f][v])), p) {\n                case \"candlestick\":\n                  void 0 !== r.seriesCandleC[f][v] && (o = Math.max(o, r.seriesCandleH[f][v]), e = Math.min(e, r.seriesCandleL[f][v]));\n                  break;\n                case \"boxPlot\":\n                  void 0 !== r.seriesCandleC[f][v] && (o = Math.max(o, r.seriesCandleC[f][v]), e = Math.min(e, r.seriesCandleO[f][v]));\n              }\n              p && \"candlestick\" !== p && \"boxPlot\" !== p && \"rangeArea\" !== p && \"rangeBar\" !== p && (o = Math.max(o, r.series[f][v]), e = Math.min(e, r.series[f][v])), i = o, r.seriesGoals[f] && r.seriesGoals[f][v] && Array.isArray(r.seriesGoals[f][v]) && r.seriesGoals[f][v].forEach(function (t) {\n                n !== Number.MIN_VALUE && (n = Math.min(n, t.value), e = n), o = Math.max(o, t.value), i = o;\n              }), m.isFloat(y) && (y = m.noExponents(y), r.yValueDecimal = Math.max(r.yValueDecimal, y.toString().split(\".\")[1].length)), n > h[f][v] && h[f][v] < 0 && (n = h[f][v]);\n            } else r.hasNullValues = !0;\n          }\n          \"bar\" !== p && \"column\" !== p || (n < 0 && o < 0 && (o = 0, i = Math.max(i, 0)), n === Number.MIN_VALUE && (n = 0, e = Math.min(e, 0)));\n        }\n        return \"rangeBar\" === s.chart.type && r.seriesRangeStart.length && r.isBarHorizontal && (n = e), \"bar\" === s.chart.type && (n < 0 && o < 0 && (o = 0), n === Number.MIN_VALUE && (n = 0)), {\n          minY: n,\n          maxY: o,\n          lowestY: e,\n          highestY: i\n        };\n      }\n    }, {\n      key: \"setYRange\",\n      value: function () {\n        var t = this.w.globals,\n          e = this.w.config;\n        t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE;\n        var i,\n          a = Number.MAX_VALUE;\n        if (t.isMultipleYAxis) {\n          a = Number.MAX_VALUE;\n          for (var s = 0; s < t.series.length; s++) i = this.getMinYMaxY(s), t.minYArr[s] = i.lowestY, t.maxYArr[s] = i.highestY, a = Math.min(a, i.lowestY);\n        }\n        if (i = this.getMinYMaxY(0, a, null, t.series.length), \"bar\" === e.chart.type ? (t.minY = i.minY, t.maxY = i.maxY) : (t.minY = i.lowestY, t.maxY = i.highestY), a = i.lowestY, e.chart.stacked && this._setStackedMinMax(), \"line\" === e.chart.type || \"area\" === e.chart.type || \"scatter\" === e.chart.type || \"candlestick\" === e.chart.type || \"boxPlot\" === e.chart.type || \"rangeBar\" === e.chart.type && !t.isBarHorizontal ? t.minY === Number.MIN_VALUE && a !== -Number.MAX_VALUE && a !== t.maxY && (t.minY = a) : t.minY = t.minY !== Number.MIN_VALUE ? Math.min(i.minY, t.minY) : i.minY, e.yaxis.forEach(function (e, i) {\n          void 0 !== e.max && (\"number\" == typeof e.max ? t.maxYArr[i] = e.max : \"function\" == typeof e.max && (t.maxYArr[i] = e.max(t.isMultipleYAxis ? t.maxYArr[i] : t.maxY)), t.maxY = t.maxYArr[i]), void 0 !== e.min && (\"number\" == typeof e.min ? t.minYArr[i] = e.min : \"function\" == typeof e.min && (t.minYArr[i] = e.min(t.isMultipleYAxis ? t.minYArr[i] === Number.MIN_VALUE ? 0 : t.minYArr[i] : t.minY)), t.minY = t.minYArr[i]);\n        }), t.isBarHorizontal) {\n          [\"min\", \"max\"].forEach(function (i) {\n            void 0 !== e.xaxis[i] && \"number\" == typeof e.xaxis[i] && (\"min\" === i ? t.minY = e.xaxis[i] : t.maxY = e.xaxis[i]);\n          });\n        }\n        return t.isMultipleYAxis ? (this.scales.scaleMultipleYAxes(), t.minY = a) : (this.scales.setYScaleForIndex(0, t.minY, t.maxY), t.minY = t.yAxisScale[0].niceMin, t.maxY = t.yAxisScale[0].niceMax, t.minYArr[0] = t.minY, t.maxYArr[0] = t.maxY), t.barGroups = [], t.lineGroups = [], t.areaGroups = [], e.series.forEach(function (i) {\n          switch (i.type || e.chart.type) {\n            case \"bar\":\n            case \"column\":\n              t.barGroups.push(i.group);\n              break;\n            case \"line\":\n              t.lineGroups.push(i.group);\n              break;\n            case \"area\":\n              t.areaGroups.push(i.group);\n          }\n        }), t.barGroups = t.barGroups.filter(function (t, e, i) {\n          return i.indexOf(t) === e;\n        }), t.lineGroups = t.lineGroups.filter(function (t, e, i) {\n          return i.indexOf(t) === e;\n        }), t.areaGroups = t.areaGroups.filter(function (t, e, i) {\n          return i.indexOf(t) === e;\n        }), {\n          minY: t.minY,\n          maxY: t.maxY,\n          minYArr: t.minYArr,\n          maxYArr: t.maxYArr,\n          yAxisScale: t.yAxisScale\n        };\n      }\n    }, {\n      key: \"setXRange\",\n      value: function () {\n        var t = this.w.globals,\n          e = this.w.config,\n          i = \"numeric\" === e.xaxis.type || \"datetime\" === e.xaxis.type || \"category\" === e.xaxis.type && !t.noLabelsProvided || t.noLabelsProvided || t.isXNumeric;\n        if (t.isXNumeric && function () {\n          for (var e = 0; e < t.series.length; e++) if (t.labels[e]) for (var i = 0; i < t.labels[e].length; i++) null !== t.labels[e][i] && m.isNumber(t.labels[e][i]) && (t.maxX = Math.max(t.maxX, t.labels[e][i]), t.initialMaxX = Math.max(t.maxX, t.labels[e][i]), t.minX = Math.min(t.minX, t.labels[e][i]), t.initialMinX = Math.min(t.minX, t.labels[e][i]));\n        }(), t.noLabelsProvided && 0 === e.xaxis.categories.length && (t.maxX = t.labels[t.labels.length - 1], t.initialMaxX = t.labels[t.labels.length - 1], t.minX = 1, t.initialMinX = 1), t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric) {\n          var a = 10;\n          if (void 0 === e.xaxis.tickAmount) a = Math.round(t.svgWidth / 150), \"numeric\" === e.xaxis.type && t.dataPoints < 30 && (a = t.dataPoints - 1), a > t.dataPoints && 0 !== t.dataPoints && (a = t.dataPoints - 1);else if (\"dataPoints\" === e.xaxis.tickAmount) {\n            if (t.series.length > 1 && (a = t.series[t.maxValsInArrayIndex].length - 1), t.isXNumeric) {\n              var s = t.maxX - t.minX;\n              s < 30 && (a = s - 1);\n            }\n          } else a = e.xaxis.tickAmount;\n          if (t.xTickAmount = a, void 0 !== e.xaxis.max && \"number\" == typeof e.xaxis.max && (t.maxX = e.xaxis.max), void 0 !== e.xaxis.min && \"number\" == typeof e.xaxis.min && (t.minX = e.xaxis.min), void 0 !== e.xaxis.range && (t.minX = t.maxX - e.xaxis.range), t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE) {\n            if (e.xaxis.convertedCatToNumeric && !t.dataFormatXNumeric) {\n              for (var r = [], o = t.minX - 1; o < t.maxX; o++) r.push(o + 1);\n              t.xAxisScale = {\n                result: r,\n                niceMin: r[0],\n                niceMax: r[r.length - 1]\n              };\n            } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);\n          } else t.xAxisScale = this.scales.linearScale(0, a, a, 0, e.xaxis.stepSize), t.noLabelsProvided && t.labels.length > 0 && (t.xAxisScale = this.scales.linearScale(1, t.labels.length, a - 1, 0, e.xaxis.stepSize), t.seriesX = t.labels.slice());\n          i && (t.labels = t.xAxisScale.result.slice());\n        }\n        return t.isBarHorizontal && t.labels.length && (t.xTickAmount = t.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), {\n          minX: t.minX,\n          maxX: t.maxX\n        };\n      }\n    }, {\n      key: \"setZRange\",\n      value: function () {\n        var t = this.w.globals;\n        if (t.isDataXYZ) for (var e = 0; e < t.series.length; e++) if (void 0 !== t.seriesZ[e]) for (var i = 0; i < t.seriesZ[e].length; i++) null !== t.seriesZ[e][i] && m.isNumber(t.seriesZ[e][i]) && (t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i]), t.minZ = Math.min(t.minZ, t.seriesZ[e][i]));\n      }\n    }, {\n      key: \"_handleSingleDataPoint\",\n      value: function () {\n        var t = this.w.globals,\n          e = this.w.config;\n        if (t.minX === t.maxX) {\n          var i = new L(this.ctx);\n          if (\"datetime\" === e.xaxis.type) {\n            var a = i.getDate(t.minX);\n            e.xaxis.labels.datetimeUTC ? a.setUTCDate(a.getUTCDate() - 2) : a.setDate(a.getDate() - 2), t.minX = new Date(a).getTime();\n            var s = i.getDate(t.maxX);\n            e.xaxis.labels.datetimeUTC ? s.setUTCDate(s.getUTCDate() + 2) : s.setDate(s.getDate() + 2), t.maxX = new Date(s).getTime();\n          } else (\"numeric\" === e.xaxis.type || \"category\" === e.xaxis.type && !t.noLabelsProvided) && (t.minX = t.minX - 2, t.initialMinX = t.minX, t.maxX = t.maxX + 2, t.initialMaxX = t.maxX);\n        }\n      }\n    }, {\n      key: \"_getMinXDiff\",\n      value: function () {\n        var t = this.w.globals;\n        t.isXNumeric && t.seriesX.forEach(function (e, i) {\n          1 === e.length && e.push(t.seriesX[t.maxValsInArrayIndex][t.seriesX[t.maxValsInArrayIndex].length - 1]);\n          var a = e.slice();\n          a.sort(function (t, e) {\n            return t - e;\n          }), a.forEach(function (e, i) {\n            if (i > 0) {\n              var s = e - a[i - 1];\n              s > 0 && (t.minXDiff = Math.min(s, t.minXDiff));\n            }\n          }), 1 !== t.dataPoints && t.minXDiff !== Number.MAX_VALUE || (t.minXDiff = .5);\n        });\n      }\n    }, {\n      key: \"_setStackedMinMax\",\n      value: function () {\n        var t = this,\n          e = this.w.globals;\n        if (e.series.length) {\n          var i = e.seriesGroups;\n          i.length || (i = [this.w.globals.seriesNames.map(function (t) {\n            return t;\n          })]);\n          var a = {},\n            s = {};\n          i.forEach(function (i) {\n            a[i] = [], s[i] = [], t.w.config.series.map(function (t, a) {\n              return i.indexOf(e.seriesNames[a]) > -1 ? a : null;\n            }).filter(function (t) {\n              return null !== t;\n            }).forEach(function (r) {\n              for (var o = 0; o < e.series[e.maxValsInArrayIndex].length; o++) {\n                var n, l, h, c;\n                void 0 === a[i][o] && (a[i][o] = 0, s[i][o] = 0), (t.w.config.chart.stacked && !e.comboCharts || t.w.config.chart.stacked && e.comboCharts && (!t.w.config.chart.stackOnlyBar || \"bar\" === (null === (n = t.w.config.series) || void 0 === n || null === (l = n[r]) || void 0 === l ? void 0 : l.type) || \"column\" === (null === (h = t.w.config.series) || void 0 === h || null === (c = h[r]) || void 0 === c ? void 0 : c.type))) && null !== e.series[r][o] && m.isNumber(e.series[r][o]) && (e.series[r][o] > 0 ? a[i][o] += parseFloat(e.series[r][o]) + 1e-4 : s[i][o] += parseFloat(e.series[r][o]));\n              }\n            });\n          }), Object.entries(a).forEach(function (t) {\n            var i = f(t, 1)[0];\n            a[i].forEach(function (t, r) {\n              e.maxY = Math.max(e.maxY, a[i][r]), e.minY = Math.min(e.minY, s[i][r]);\n            });\n          });\n        }\n      }\n    }]), t;\n  }(),\n  Q = function () {\n    function t(e, a) {\n      i(this, t), this.ctx = e, this.elgrid = a, this.w = e.w;\n      var s = this.w;\n      this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.axisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = \"bar\" === s.config.chart.type && s.config.plotOptions.bar.horizontal, this.xAxisoffX = \"bottom\" === s.config.xaxis.position ? s.globals.gridHeight : 0, this.drawnLabels = [], this.axesUtils = new M(e);\n    }\n    return s(t, [{\n      key: \"drawYaxis\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx),\n          a = e.config.yaxis[t].labels.style,\n          s = a.fontSize,\n          r = a.fontFamily,\n          o = a.fontWeight,\n          n = i.group({\n            class: \"apexcharts-yaxis\",\n            rel: t,\n            transform: \"translate(\".concat(e.globals.translateYAxisX[t], \", 0)\")\n          });\n        if (this.axesUtils.isYAxisHidden(t)) return n;\n        var l = i.group({\n          class: \"apexcharts-yaxis-texts-g\"\n        });\n        n.add(l);\n        var h = e.globals.yAxisScale[t].result.length - 1,\n          c = e.globals.gridHeight / h,\n          d = e.globals.yLabelFormatters[t],\n          g = this.axesUtils.checkForReversedLabels(t, e.globals.yAxisScale[t].result.slice());\n        if (e.config.yaxis[t].labels.show) {\n          var u = e.globals.translateY + e.config.yaxis[t].labels.offsetY;\n          e.globals.isBarHorizontal ? u = 0 : \"heatmap\" === e.config.chart.type && (u -= c / 2), u += parseInt(s, 10) / 3;\n          for (var f = h; f >= 0; f--) {\n            var p = d(g[f], f, e),\n              x = e.config.yaxis[t].labels.padding;\n            e.config.yaxis[t].opposite && 0 !== e.config.yaxis.length && (x *= -1);\n            var b = this.getTextAnchor(e.config.yaxis[t].labels.align, e.config.yaxis[t].opposite),\n              v = this.axesUtils.getYAxisForeColor(a.colors, t),\n              y = Array.isArray(v) ? v[f] : v,\n              w = m.listToArray(e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-label tspan\"))).map(function (t) {\n                return t.textContent;\n              }),\n              A = i.drawText({\n                x: x,\n                y: u,\n                text: w.includes(p) && !e.config.yaxis[t].labels.showDuplicates ? \"\" : p,\n                textAnchor: b,\n                fontSize: s,\n                fontFamily: r,\n                fontWeight: o,\n                maxWidth: e.config.yaxis[t].labels.maxWidth,\n                foreColor: y,\n                isPlainText: !1,\n                cssClass: \"apexcharts-yaxis-label \".concat(a.cssClass)\n              });\n            l.add(A), this.addTooltip(A, p), 0 !== e.config.yaxis[t].labels.rotate && this.rotateLabel(i, A, firstLabel, e.config.yaxis[t].labels.rotate), u += c;\n          }\n        }\n        return this.addYAxisTitle(i, n, t), this.addAxisBorder(i, n, t, h, c), n;\n      }\n    }, {\n      key: \"getTextAnchor\",\n      value: function (t, e) {\n        return \"left\" === t ? \"start\" : \"center\" === t ? \"middle\" : \"right\" === t ? \"end\" : e ? \"start\" : \"end\";\n      }\n    }, {\n      key: \"addTooltip\",\n      value: function (t, e) {\n        var i = document.createElementNS(this.w.globals.SVGNS, \"title\");\n        i.textContent = Array.isArray(e) ? e.join(\" \") : e, t.node.appendChild(i);\n      }\n    }, {\n      key: \"rotateLabel\",\n      value: function (t, e, i, a) {\n        var s = t.rotateAroundCenter(i.node),\n          r = t.rotateAroundCenter(e.node);\n        e.node.setAttribute(\"transform\", \"rotate(\".concat(a, \" \").concat(s.x, \" \").concat(r.y, \")\"));\n      }\n    }, {\n      key: \"addYAxisTitle\",\n      value: function (t, e, i) {\n        var a = this.w;\n        if (void 0 !== a.config.yaxis[i].title.text) {\n          var s = t.group({\n              class: \"apexcharts-yaxis-title\"\n            }),\n            r = a.config.yaxis[i].opposite ? a.globals.translateYAxisX[i] : 0,\n            o = t.drawText({\n              x: r,\n              y: a.globals.gridHeight / 2 + a.globals.translateY + a.config.yaxis[i].title.offsetY,\n              text: a.config.yaxis[i].title.text,\n              textAnchor: \"end\",\n              foreColor: a.config.yaxis[i].title.style.color,\n              fontSize: a.config.yaxis[i].title.style.fontSize,\n              fontWeight: a.config.yaxis[i].title.style.fontWeight,\n              fontFamily: a.config.yaxis[i].title.style.fontFamily,\n              cssClass: \"apexcharts-yaxis-title-text \".concat(a.config.yaxis[i].title.style.cssClass)\n            });\n          s.add(o), e.add(s);\n        }\n      }\n    }, {\n      key: \"addAxisBorder\",\n      value: function (t, e, i, a, s) {\n        var r = this.w,\n          o = r.config.yaxis[i].axisBorder,\n          n = 31 + o.offsetX;\n        if (r.config.yaxis[i].opposite && (n = -31 - o.offsetX), o.show) {\n          var l = t.drawLine(n, r.globals.translateY + o.offsetY - 2, n, r.globals.gridHeight + r.globals.translateY + o.offsetY + 2, o.color, 0, o.width);\n          e.add(l);\n        }\n        r.config.yaxis[i].axisTicks.show && this.axesUtils.drawYAxisTicks(n, a, o, r.config.yaxis[i].axisTicks, i, s, e);\n      }\n    }, {\n      key: \"drawYaxisInversed\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx),\n          a = i.group({\n            class: \"apexcharts-xaxis apexcharts-yaxis-inversed\"\n          }),\n          s = i.group({\n            class: \"apexcharts-xaxis-texts-g\",\n            transform: \"translate(\".concat(e.globals.translateXAxisX, \", \").concat(e.globals.translateXAxisY, \")\")\n          });\n        a.add(s);\n        var r = e.globals.yAxisScale[t].result.length - 1,\n          o = e.globals.gridWidth / r + .1,\n          n = o + e.config.xaxis.labels.offsetX,\n          l = e.globals.xLabelFormatter,\n          h = this.axesUtils.checkForReversedLabels(t, e.globals.yAxisScale[t].result.slice()),\n          c = e.globals.timescaleLabels;\n        if (c.length > 0 && (this.xaxisLabels = c.slice(), r = (h = c.slice()).length), e.config.xaxis.labels.show) for (var d = c.length ? 0 : r; c.length ? d < c.length : d >= 0; c.length ? d++ : d--) {\n          var g = l(h[d], d, e),\n            u = e.globals.gridWidth + e.globals.padHorizontal - (n - o + e.config.xaxis.labels.offsetX);\n          if (c.length) {\n            var f = this.axesUtils.getLabel(h, c, u, d, this.drawnLabels, this.xaxisFontSize);\n            u = f.x, g = f.text, this.drawnLabels.push(f.text), 0 === d && e.globals.skipFirstTimelinelabel && (g = \"\"), d === h.length - 1 && e.globals.skipLastTimelinelabel && (g = \"\");\n          }\n          var p = i.drawText({\n            x: u,\n            y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30 - (\"top\" === e.config.xaxis.position ? e.globals.xAxisHeight + e.config.xaxis.axisTicks.height - 2 : 0),\n            text: g,\n            textAnchor: \"middle\",\n            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,\n            fontSize: this.xaxisFontSize,\n            fontFamily: this.xaxisFontFamily,\n            fontWeight: e.config.xaxis.labels.style.fontWeight,\n            isPlainText: !1,\n            cssClass: \"apexcharts-xaxis-label \".concat(e.config.xaxis.labels.style.cssClass)\n          });\n          s.add(p), p.tspan(g), this.addTooltip(p, g), n += o;\n        }\n        return this.inversedYAxisTitleText(a), this.inversedYAxisBorder(a), a;\n      }\n    }, {\n      key: \"inversedYAxisBorder\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx),\n          a = e.config.xaxis.axisBorder;\n        if (a.show) {\n          var s = 0;\n          \"bar\" === e.config.chart.type && e.globals.isXNumeric && (s -= 15);\n          var r = i.drawLine(e.globals.padHorizontal + s + a.offsetX, this.xAxisoffX, e.globals.gridWidth, this.xAxisoffX, a.color, 0, a.height);\n          this.elgrid && this.elgrid.elGridBorders && e.config.grid.show ? this.elgrid.elGridBorders.add(r) : t.add(r);\n        }\n      }\n    }, {\n      key: \"inversedYAxisTitleText\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx);\n        if (void 0 !== e.config.xaxis.title.text) {\n          var a = i.group({\n              class: \"apexcharts-xaxis-title apexcharts-yaxis-title-inversed\"\n            }),\n            s = i.drawText({\n              x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,\n              y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e.config.xaxis.title.style.fontSize) + e.config.xaxis.title.offsetY + 20,\n              text: e.config.xaxis.title.text,\n              textAnchor: \"middle\",\n              fontSize: e.config.xaxis.title.style.fontSize,\n              fontFamily: e.config.xaxis.title.style.fontFamily,\n              fontWeight: e.config.xaxis.title.style.fontWeight,\n              foreColor: e.config.xaxis.title.style.color,\n              cssClass: \"apexcharts-xaxis-title-text \".concat(e.config.xaxis.title.style.cssClass)\n            });\n          a.add(s), t.add(a);\n        }\n      }\n    }, {\n      key: \"yAxisTitleRotate\",\n      value: function (t, e) {\n        var i = this.w,\n          a = new k(this.ctx),\n          s = i.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-texts-g\")),\n          r = s ? s.getBoundingClientRect() : {\n            width: 0,\n            height: 0\n          },\n          o = i.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-title text\")),\n          n = o ? o.getBoundingClientRect() : {\n            width: 0,\n            height: 0\n          };\n        if (o) {\n          var l = this.xPaddingForYAxisTitle(t, r, n, e);\n          o.setAttribute(\"x\", l.xPos - (e ? 10 : 0));\n          var h = a.rotateAroundCenter(o);\n          o.setAttribute(\"transform\", \"rotate(\".concat(e ? -1 * i.config.yaxis[t].title.rotate : i.config.yaxis[t].title.rotate, \" \").concat(h.x, \" \").concat(h.y, \")\"));\n        }\n      }\n    }, {\n      key: \"xPaddingForYAxisTitle\",\n      value: function (t, e, i, a) {\n        var s = this.w,\n          r = 0,\n          o = 10;\n        return void 0 === s.config.yaxis[t].title.text || t < 0 ? {\n          xPos: r,\n          padd: 0\n        } : (a ? r = e.width + s.config.yaxis[t].title.offsetX + i.width / 2 + o / 2 : (r = -1 * e.width + s.config.yaxis[t].title.offsetX + o / 2 + i.width / 2, s.globals.isBarHorizontal && (o = 25, r = -1 * e.width - s.config.yaxis[t].title.offsetX - o)), {\n          xPos: r,\n          padd: o\n        });\n      }\n    }, {\n      key: \"setYAxisXPosition\",\n      value: function (t, e) {\n        var i = this.w,\n          a = 0,\n          s = 0,\n          r = 18,\n          o = 1;\n        i.config.yaxis.length > 1 && (this.multipleYs = !0), i.config.yaxis.forEach(function (n, l) {\n          var h = i.globals.ignoreYAxisIndexes.includes(l) || !n.show || n.floating || 0 === t[l].width,\n            c = t[l].width + e[l].width;\n          n.opposite ? i.globals.isBarHorizontal ? (s = i.globals.gridWidth + i.globals.translateX - 1, i.globals.translateYAxisX[l] = s - n.labels.offsetX) : (s = i.globals.gridWidth + i.globals.translateX + o, h || (o += c + 20), i.globals.translateYAxisX[l] = s - n.labels.offsetX + 20) : (a = i.globals.translateX - r, h || (r += c + 20), i.globals.translateYAxisX[l] = a + n.labels.offsetX);\n        });\n      }\n    }, {\n      key: \"setYAxisTextAlignments\",\n      value: function () {\n        var t = this.w;\n        m.listToArray(t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-yaxis\")).forEach(function (e, i) {\n          var a = t.config.yaxis[i];\n          if (a && !a.floating && void 0 !== a.labels.align) {\n            var s = t.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-texts-g\")),\n              r = m.listToArray(t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-label\"))),\n              o = s.getBoundingClientRect();\n            r.forEach(function (t) {\n              t.setAttribute(\"text-anchor\", a.labels.align);\n            }), \"left\" !== a.labels.align || a.opposite ? \"center\" === a.labels.align ? s.setAttribute(\"transform\", \"translate(\".concat(o.width / 2 * (a.opposite ? 1 : -1), \", 0)\")) : \"right\" === a.labels.align && a.opposite && s.setAttribute(\"transform\", \"translate(\".concat(o.width, \", 0)\")) : s.setAttribute(\"transform\", \"translate(-\".concat(o.width, \", 0)\"));\n          }\n        });\n      }\n    }]), t;\n  }(),\n  K = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.documentEvent = m.bind(this.documentEvent, this);\n    }\n    return s(t, [{\n      key: \"addEventListener\",\n      value: function (t, e) {\n        var i = this.w;\n        i.globals.events.hasOwnProperty(t) ? i.globals.events[t].push(e) : i.globals.events[t] = [e];\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function (t, e) {\n        var i = this.w;\n        if (i.globals.events.hasOwnProperty(t)) {\n          var a = i.globals.events[t].indexOf(e);\n          -1 !== a && i.globals.events[t].splice(a, 1);\n        }\n      }\n    }, {\n      key: \"fireEvent\",\n      value: function (t, e) {\n        var i = this.w;\n        if (i.globals.events.hasOwnProperty(t)) {\n          e && e.length || (e = []);\n          for (var a = i.globals.events[t], s = a.length, r = 0; r < s; r++) a[r].apply(null, e);\n        }\n      }\n    }, {\n      key: \"setupEventHandlers\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = this.ctx,\n          a = e.globals.dom.baseEl.querySelector(e.globals.chartClass);\n        this.ctx.eventList.forEach(function (t) {\n          a.addEventListener(t, function (t) {\n            var a = Object.assign({}, e, {\n              seriesIndex: e.globals.axisCharts ? e.globals.capturedSeriesIndex : 0,\n              dataPointIndex: e.globals.capturedDataPointIndex\n            });\n            \"mousemove\" === t.type || \"touchmove\" === t.type ? \"function\" == typeof e.config.chart.events.mouseMove && e.config.chart.events.mouseMove(t, i, a) : \"mouseleave\" === t.type || \"touchleave\" === t.type ? \"function\" == typeof e.config.chart.events.mouseLeave && e.config.chart.events.mouseLeave(t, i, a) : (\"mouseup\" === t.type && 1 === t.which || \"touchend\" === t.type) && (\"function\" == typeof e.config.chart.events.click && e.config.chart.events.click(t, i, a), i.ctx.events.fireEvent(\"click\", [t, i, a]));\n          }, {\n            capture: !1,\n            passive: !0\n          });\n        }), this.ctx.eventList.forEach(function (i) {\n          e.globals.dom.baseEl.addEventListener(i, t.documentEvent, {\n            passive: !0\n          });\n        }), this.ctx.core.setupBrushHandler();\n      }\n    }, {\n      key: \"documentEvent\",\n      value: function (t) {\n        var e = this.w,\n          i = t.target.className;\n        if (\"click\" === t.type) {\n          var a = e.globals.dom.baseEl.querySelector(\".apexcharts-menu\");\n          a && a.classList.contains(\"apexcharts-menu-open\") && \"apexcharts-menu-icon\" !== i && a.classList.remove(\"apexcharts-menu-open\");\n        }\n        e.globals.clientX = \"touchmove\" === t.type ? t.touches[0].clientX : t.clientX, e.globals.clientY = \"touchmove\" === t.type ? t.touches[0].clientY : t.clientY;\n      }\n    }]), t;\n  }(),\n  tt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"setCurrentLocaleValues\",\n      value: function (t) {\n        var e = this.w.config.chart.locales;\n        window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));\n        var i = e.filter(function (e) {\n          return e.name === t;\n        })[0];\n        if (!i) throw new Error(\"Wrong locale name provided. Please make sure you set the correct locale name in options\");\n        var a = m.extend(z, i);\n        this.w.globals.locale = a.options;\n      }\n    }]), t;\n  }(),\n  et = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"drawAxis\",\n      value: function (t, e) {\n        var i,\n          a,\n          s = this,\n          r = this.w.globals,\n          o = this.w.config,\n          n = new q(this.ctx, e),\n          l = new Q(this.ctx, e);\n        r.axisCharts && \"radar\" !== t && (r.isBarHorizontal ? (a = l.drawYaxisInversed(0), i = n.drawXaxisInversed(0), r.dom.elGraphical.add(i), r.dom.elGraphical.add(a)) : (i = n.drawXaxis(), r.dom.elGraphical.add(i), o.yaxis.map(function (t, e) {\n          if (-1 === r.ignoreYAxisIndexes.indexOf(e) && (a = l.drawYaxis(e), r.dom.Paper.add(a), \"back\" === s.w.config.grid.position)) {\n            var i = r.dom.Paper.children()[1];\n            i.remove(), r.dom.Paper.add(i);\n          }\n        })));\n      }\n    }]), t;\n  }(),\n  it = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"drawXCrosshairs\",\n      value: function () {\n        var t = this.w,\n          e = new k(this.ctx),\n          i = new w(this.ctx),\n          a = t.config.xaxis.crosshairs.fill.gradient,\n          s = t.config.xaxis.crosshairs.dropShadow,\n          r = t.config.xaxis.crosshairs.fill.type,\n          o = a.colorFrom,\n          n = a.colorTo,\n          l = a.opacityFrom,\n          h = a.opacityTo,\n          c = a.stops,\n          d = s.enabled,\n          g = s.left,\n          u = s.top,\n          f = s.blur,\n          p = s.color,\n          x = s.opacity,\n          b = t.config.xaxis.crosshairs.fill.color;\n        if (t.config.xaxis.crosshairs.show) {\n          \"gradient\" === r && (b = e.drawGradient(\"vertical\", o, n, l, h, null, c, null));\n          var v = e.drawRect();\n          1 === t.config.xaxis.crosshairs.width && (v = e.drawLine());\n          var y = t.globals.gridHeight;\n          (!m.isNumber(y) || y < 0) && (y = 0);\n          var A = t.config.xaxis.crosshairs.width;\n          (!m.isNumber(A) || A < 0) && (A = 0), v.attr({\n            class: \"apexcharts-xcrosshairs\",\n            x: 0,\n            y: 0,\n            y2: y,\n            width: A,\n            height: y,\n            fill: b,\n            filter: \"none\",\n            \"fill-opacity\": t.config.xaxis.crosshairs.opacity,\n            stroke: t.config.xaxis.crosshairs.stroke.color,\n            \"stroke-width\": t.config.xaxis.crosshairs.stroke.width,\n            \"stroke-dasharray\": t.config.xaxis.crosshairs.stroke.dashArray\n          }), d && (v = i.dropShadow(v, {\n            left: g,\n            top: u,\n            blur: f,\n            color: p,\n            opacity: x\n          })), t.globals.dom.elGraphical.add(v);\n        }\n      }\n    }, {\n      key: \"drawYCrosshairs\",\n      value: function () {\n        var t = this.w,\n          e = new k(this.ctx),\n          i = t.config.yaxis[0].crosshairs,\n          a = t.globals.barPadForNumericAxis;\n        if (t.config.yaxis[0].crosshairs.show) {\n          var s = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, i.stroke.dashArray, i.stroke.width);\n          s.attr({\n            class: \"apexcharts-ycrosshairs\"\n          }), t.globals.dom.elGraphical.add(s);\n        }\n        var r = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, 0, 0);\n        r.attr({\n          class: \"apexcharts-ycrosshairs-hidden\"\n        }), t.globals.dom.elGraphical.add(r);\n      }\n    }]), t;\n  }(),\n  at = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"checkResponsiveConfig\",\n      value: function (t) {\n        var e = this,\n          i = this.w,\n          a = i.config;\n        if (0 !== a.responsive.length) {\n          var s = a.responsive.slice();\n          s.sort(function (t, e) {\n            return t.breakpoint > e.breakpoint ? 1 : e.breakpoint > t.breakpoint ? -1 : 0;\n          }).reverse();\n          var r = new D({}),\n            o = function () {\n              var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n                a = s[0].breakpoint,\n                o = window.innerWidth > 0 ? window.innerWidth : screen.width;\n              if (o > a) {\n                var n = m.clone(i.globals.initialConfig);\n                n.series = m.clone(i.config.series);\n                var l = A.extendArrayProps(r, n, i);\n                t = m.extend(l, t), t = m.extend(i.config, t), e.overrideResponsiveOptions(t);\n              } else for (var h = 0; h < s.length; h++) o < s[h].breakpoint && (t = A.extendArrayProps(r, s[h].options, i), t = m.extend(i.config, t), e.overrideResponsiveOptions(t));\n            };\n          if (t) {\n            var n = A.extendArrayProps(r, t, i);\n            n = m.extend(i.config, n), o(n = m.extend(n, t));\n          } else o({});\n        }\n      }\n    }, {\n      key: \"overrideResponsiveOptions\",\n      value: function (t) {\n        var e = new D(t).init({\n          responsiveOverride: !0\n        });\n        this.w.config = e;\n      }\n    }]), t;\n  }(),\n  st = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.colors = [], this.isColorFn = !1, this.isHeatmapDistributed = this.checkHeatmapDistributed(), this.isBarDistributed = this.checkBarDistributed();\n    }\n    return s(t, [{\n      key: \"checkHeatmapDistributed\",\n      value: function () {\n        var t = this.w.config,\n          e = t.chart,\n          i = t.plotOptions;\n        return \"treemap\" === e.type && i.treemap && i.treemap.distributed || \"heatmap\" === e.type && i.heatmap && i.heatmap.distributed;\n      }\n    }, {\n      key: \"checkBarDistributed\",\n      value: function () {\n        var t = this.w.config,\n          e = t.chart,\n          i = t.plotOptions;\n        return i.bar && i.bar.distributed && (\"bar\" === e.type || \"rangeBar\" === e.type);\n      }\n    }, {\n      key: \"init\",\n      value: function () {\n        this.setDefaultColors();\n      }\n    }, {\n      key: \"setDefaultColors\",\n      value: function () {\n        var t = this.w,\n          e = new m();\n        t.globals.dom.elWrap.classList.add(\"apexcharts-theme-\".concat(t.config.theme.mode));\n        var i = p(t.config.colors || t.config.fill.colors || []);\n        t.globals.colors = this.getColors(i), this.applySeriesColors(t.globals.seriesColors, t.globals.colors), t.config.theme.monochrome.enabled && (t.globals.colors = this.getMonochromeColors(t.config.theme.monochrome, t.globals.series, e));\n        var a = t.globals.colors.slice();\n        this.pushExtraColors(t.globals.colors), this.applyColorTypes([\"fill\", \"stroke\"], a), this.applyDataLabelsColors(a), this.applyRadarPolygonsColors(), this.applyMarkersColors(a);\n      }\n    }, {\n      key: \"getColors\",\n      value: function (t) {\n        var e = this,\n          i = this.w;\n        return t && 0 !== t.length ? Array.isArray(t) && t.length > 0 && \"function\" == typeof t[0] ? (this.isColorFn = !0, i.config.series.map(function (a, s) {\n          var r = t[s] || t[0];\n          return \"function\" == typeof r ? r({\n            value: i.globals.axisCharts ? i.globals.series[s][0] || 0 : i.globals.series[s],\n            seriesIndex: s,\n            dataPointIndex: s,\n            w: e.w\n          }) : r;\n        })) : t : this.predefined();\n      }\n    }, {\n      key: \"applySeriesColors\",\n      value: function (t, e) {\n        t.forEach(function (t, i) {\n          t && (e[i] = t);\n        });\n      }\n    }, {\n      key: \"getMonochromeColors\",\n      value: function (t, e, i) {\n        var a = t.color,\n          s = t.shadeIntensity,\n          r = t.shadeTo,\n          o = this.isBarDistributed || this.isHeatmapDistributed ? e[0].length * e.length : e.length,\n          n = 1 / (o / s),\n          l = 0;\n        return Array.from({\n          length: o\n        }, function () {\n          var t = \"dark\" === r ? i.shadeColor(-1 * l, a) : i.shadeColor(l, a);\n          return l += n, t;\n        });\n      }\n    }, {\n      key: \"applyColorTypes\",\n      value: function (t, e) {\n        var i = this,\n          a = this.w;\n        t.forEach(function (t) {\n          a.globals[t].colors = void 0 === a.config[t].colors ? i.isColorFn ? a.config.colors : e : a.config[t].colors.slice(), i.pushExtraColors(a.globals[t].colors);\n        });\n      }\n    }, {\n      key: \"applyDataLabelsColors\",\n      value: function (t) {\n        var e = this.w;\n        e.globals.dataLabels.style.colors = void 0 === e.config.dataLabels.style.colors ? t : e.config.dataLabels.style.colors.slice(), this.pushExtraColors(e.globals.dataLabels.style.colors, 50);\n      }\n    }, {\n      key: \"applyRadarPolygonsColors\",\n      value: function () {\n        var t = this.w;\n        t.globals.radarPolygons.fill.colors = void 0 === t.config.plotOptions.radar.polygons.fill.colors ? [\"dark\" === t.config.theme.mode ? \"#424242\" : \"none\"] : t.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(t.globals.radarPolygons.fill.colors, 20);\n      }\n    }, {\n      key: \"applyMarkersColors\",\n      value: function (t) {\n        var e = this.w;\n        e.globals.markers.colors = void 0 === e.config.markers.colors ? t : e.config.markers.colors.slice(), this.pushExtraColors(e.globals.markers.colors);\n      }\n    }, {\n      key: \"pushExtraColors\",\n      value: function (t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n          a = this.w,\n          s = e || a.globals.series.length;\n        if (null === i && (i = this.isBarDistributed || this.isHeatmapDistributed || \"heatmap\" === a.config.chart.type && a.config.plotOptions.heatmap && a.config.plotOptions.heatmap.colorScale.inverse), i && a.globals.series.length && (s = a.globals.series[a.globals.maxValsInArrayIndex].length * a.globals.series.length), t.length < s) for (var r = s - t.length, o = 0; o < r; o++) t.push(t[o]);\n      }\n    }, {\n      key: \"updateThemeOptions\",\n      value: function (t) {\n        t.chart = t.chart || {}, t.tooltip = t.tooltip || {};\n        var e = t.theme.mode,\n          i = \"dark\" === e ? \"palette4\" : \"light\" === e ? \"palette1\" : t.theme.palette || \"palette1\",\n          a = \"dark\" === e ? \"#f6f7f8\" : \"light\" === e ? \"#373d3f\" : t.chart.foreColor || \"#373d3f\";\n        return t.tooltip.theme = e || \"light\", t.chart.foreColor = a, t.theme.palette = i, t;\n      }\n    }, {\n      key: \"predefined\",\n      value: function () {\n        var t = {\n          palette1: [\"#008FFB\", \"#00E396\", \"#FEB019\", \"#FF4560\", \"#775DD0\"],\n          palette2: [\"#3f51b5\", \"#03a9f4\", \"#4caf50\", \"#f9ce1d\", \"#FF9800\"],\n          palette3: [\"#33b2df\", \"#546E7A\", \"#d4526e\", \"#13d8aa\", \"#A5978B\"],\n          palette4: [\"#4ecdc4\", \"#c7f464\", \"#81D4FA\", \"#fd6a6a\", \"#546E7A\"],\n          palette5: [\"#2b908f\", \"#f9a3a4\", \"#90ee7e\", \"#fa4443\", \"#69d2e7\"],\n          palette6: [\"#449DD1\", \"#F86624\", \"#EA3546\", \"#662E9B\", \"#C5D86D\"],\n          palette7: [\"#D7263D\", \"#1B998B\", \"#2E294E\", \"#F46036\", \"#E2C044\"],\n          palette8: [\"#662E9B\", \"#F86624\", \"#F9C80E\", \"#EA3546\", \"#43BCCD\"],\n          palette9: [\"#5C4742\", \"#A5978B\", \"#8D5B4C\", \"#5A2A27\", \"#C4BBAF\"],\n          palette10: [\"#A300D6\", \"#7D02EB\", \"#5653FE\", \"#2983FF\", \"#00B1F2\"],\n          default: [\"#008FFB\", \"#00E396\", \"#FEB019\", \"#FF4560\", \"#775DD0\"]\n        };\n        return t[this.w.config.theme.palette] || t.default;\n      }\n    }]), t;\n  }(),\n  rt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"draw\",\n      value: function () {\n        this.drawTitleSubtitle(\"title\"), this.drawTitleSubtitle(\"subtitle\");\n      }\n    }, {\n      key: \"drawTitleSubtitle\",\n      value: function (t) {\n        var e = this.w,\n          i = \"title\" === t ? e.config.title : e.config.subtitle,\n          a = e.globals.svgWidth / 2,\n          s = i.offsetY,\n          r = \"middle\";\n        if (\"left\" === i.align ? (a = 10, r = \"start\") : \"right\" === i.align && (a = e.globals.svgWidth - 10, r = \"end\"), a += i.offsetX, s = s + parseInt(i.style.fontSize, 10) + i.margin / 2, void 0 !== i.text) {\n          var o = new k(this.ctx).drawText({\n            x: a,\n            y: s,\n            text: i.text,\n            textAnchor: r,\n            fontSize: i.style.fontSize,\n            fontFamily: i.style.fontFamily,\n            fontWeight: i.style.fontWeight,\n            foreColor: i.style.color,\n            opacity: 1\n          });\n          o.node.setAttribute(\"class\", \"apexcharts-\".concat(t, \"-text\")), e.globals.dom.Paper.add(o);\n        }\n      }\n    }]), t;\n  }(),\n  ot = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return s(t, [{\n      key: \"getTitleSubtitleCoords\",\n      value: function (t) {\n        var e = this.w,\n          i = 0,\n          a = 0,\n          s = \"title\" === t ? e.config.title.floating : e.config.subtitle.floating,\n          r = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(t, \"-text\"));\n        if (null !== r && !s) {\n          var o = r.getBoundingClientRect();\n          i = o.width, a = e.globals.axisCharts ? o.height + 5 : o.height;\n        }\n        return {\n          width: i,\n          height: a\n        };\n      }\n    }, {\n      key: \"getLegendsRect\",\n      value: function () {\n        var t = this.w,\n          e = t.globals.dom.elLegendWrap;\n        t.config.legend.height || \"top\" !== t.config.legend.position && \"bottom\" !== t.config.legend.position || (e.style.maxHeight = t.globals.svgHeight / 2 + \"px\");\n        var i = Object.assign({}, m.getBoundingClientRect(e));\n        return null !== e && !t.config.legend.floating && t.config.legend.show ? this.dCtx.lgRect = {\n          x: i.x,\n          y: i.y,\n          height: i.height,\n          width: 0 === i.height ? 0 : i.width\n        } : this.dCtx.lgRect = {\n          x: 0,\n          y: 0,\n          height: 0,\n          width: 0\n        }, \"left\" !== t.config.legend.position && \"right\" !== t.config.legend.position || 1.5 * this.dCtx.lgRect.width > t.globals.svgWidth && (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5), this.dCtx.lgRect;\n      }\n    }, {\n      key: \"getDatalabelsRect\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = [];\n        e.config.series.forEach(function (s, r) {\n          s.data.forEach(function (s, o) {\n            var n;\n            n = e.globals.series[r][o], a = e.config.dataLabels.formatter(n, {\n              ctx: t.dCtx.ctx,\n              seriesIndex: r,\n              dataPointIndex: o,\n              w: e\n            }), i.push(a);\n          });\n        });\n        var a = m.getLargestStringFromArr(i),\n          s = new k(this.dCtx.ctx),\n          r = e.config.dataLabels.style,\n          o = s.getTextRects(a, parseInt(r.fontSize), r.fontFamily);\n        return {\n          width: 1.05 * o.width,\n          height: o.height\n        };\n      }\n    }, {\n      key: \"getLargestStringFromMultiArr\",\n      value: function (t, e) {\n        var i = t;\n        if (this.w.globals.isMultiLineX) {\n          var a = e.map(function (t, e) {\n              return Array.isArray(t) ? t.length : 1;\n            }),\n            s = Math.max.apply(Math, p(a));\n          i = e[a.indexOf(s)];\n        }\n        return i;\n      }\n    }]), t;\n  }(),\n  nt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return s(t, [{\n      key: \"getxAxisLabelsCoords\",\n      value: function () {\n        var t,\n          e = this.w,\n          i = e.globals.labels.slice();\n        if (e.config.xaxis.convertedCatToNumeric && 0 === i.length && (i = e.globals.categoryLabels), e.globals.timescaleLabels.length > 0) {\n          var a = this.getxAxisTimeScaleLabelsCoords();\n          t = {\n            width: a.width,\n            height: a.height\n          }, e.globals.rotateXLabels = !1;\n        } else {\n          this.dCtx.lgWidthForSideLegends = \"left\" !== e.config.legend.position && \"right\" !== e.config.legend.position || e.config.legend.floating ? 0 : this.dCtx.lgRect.width;\n          var s = e.globals.xLabelFormatter,\n            r = m.getLargestStringFromArr(i),\n            o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r, i);\n          e.globals.isBarHorizontal && (o = r = e.globals.yAxisScale[0].result.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          }, 0));\n          var n = new P(this.dCtx.ctx),\n            l = r;\n          r = n.xLabelFormat(s, r, l, {\n            i: void 0,\n            dateFormatter: new L(this.dCtx.ctx).formatDate,\n            w: e\n          }), o = n.xLabelFormat(s, o, l, {\n            i: void 0,\n            dateFormatter: new L(this.dCtx.ctx).formatDate,\n            w: e\n          }), (e.config.xaxis.convertedCatToNumeric && void 0 === r || \"\" === String(r).trim()) && (o = r = \"1\");\n          var h = new k(this.dCtx.ctx),\n            c = h.getTextRects(r, e.config.xaxis.labels.style.fontSize),\n            d = c;\n          if (r !== o && (d = h.getTextRects(o, e.config.xaxis.labels.style.fontSize)), (t = {\n            width: c.width >= d.width ? c.width : d.width,\n            height: c.height >= d.height ? c.height : d.height\n          }).width * i.length > e.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e.config.xaxis.labels.rotate || e.config.xaxis.labels.rotateAlways) {\n            if (!e.globals.isBarHorizontal) {\n              e.globals.rotateXLabels = !0;\n              var g = function (t) {\n                return h.getTextRects(t, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, \"rotate(\".concat(e.config.xaxis.labels.rotate, \" 0 0)\"), !1);\n              };\n              c = g(r), r !== o && (d = g(o)), t.height = (c.height > d.height ? c.height : d.height) / 1.5, t.width = c.width > d.width ? c.width : d.width;\n            }\n          } else e.globals.rotateXLabels = !1;\n        }\n        return e.config.xaxis.labels.show || (t = {\n          width: 0,\n          height: 0\n        }), {\n          width: t.width,\n          height: t.height\n        };\n      }\n    }, {\n      key: \"getxAxisGroupLabelsCoords\",\n      value: function () {\n        var t,\n          e = this.w;\n        if (!e.globals.hasXaxisGroups) return {\n          width: 0,\n          height: 0\n        };\n        var i,\n          a = (null === (t = e.config.xaxis.group.style) || void 0 === t ? void 0 : t.fontSize) || e.config.xaxis.labels.style.fontSize,\n          s = e.globals.groups.map(function (t) {\n            return t.title;\n          }),\n          r = m.getLargestStringFromArr(s),\n          o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r, s),\n          n = new k(this.dCtx.ctx),\n          l = n.getTextRects(r, a),\n          h = l;\n        return r !== o && (h = n.getTextRects(o, a)), i = {\n          width: l.width >= h.width ? l.width : h.width,\n          height: l.height >= h.height ? l.height : h.height\n        }, e.config.xaxis.labels.show || (i = {\n          width: 0,\n          height: 0\n        }), {\n          width: i.width,\n          height: i.height\n        };\n      }\n    }, {\n      key: \"getxAxisTitleCoords\",\n      value: function () {\n        var t = this.w,\n          e = 0,\n          i = 0;\n        if (void 0 !== t.config.xaxis.title.text) {\n          var a = new k(this.dCtx.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);\n          e = a.width, i = a.height;\n        }\n        return {\n          width: e,\n          height: i\n        };\n      }\n    }, {\n      key: \"getxAxisTimeScaleLabelsCoords\",\n      value: function () {\n        var t,\n          e = this.w;\n        this.dCtx.timescaleLabels = e.globals.timescaleLabels.slice();\n        var i = this.dCtx.timescaleLabels.map(function (t) {\n            return t.value;\n          }),\n          a = i.reduce(function (t, e) {\n            return void 0 === t ? (console.error(\"You have possibly supplied invalid Date format. Please supply a valid JavaScript Date\"), 0) : t.length > e.length ? t : e;\n          }, 0);\n        return 1.05 * (t = new k(this.dCtx.ctx).getTextRects(a, e.config.xaxis.labels.style.fontSize)).width * i.length > e.globals.gridWidth && 0 !== e.config.xaxis.labels.rotate && (e.globals.overlappingXLabels = !0), t;\n      }\n    }, {\n      key: \"additionalPaddingXLabels\",\n      value: function (t) {\n        var e = this,\n          i = this.w,\n          a = i.globals,\n          s = i.config,\n          r = s.xaxis.type,\n          o = t.width;\n        a.skipLastTimelinelabel = !1, a.skipFirstTimelinelabel = !1;\n        var n = i.config.yaxis[0].opposite && i.globals.isBarHorizontal,\n          l = function (t, n) {\n            s.yaxis.length > 1 && function (t) {\n              return -1 !== a.collapsedSeriesIndices.indexOf(t);\n            }(n) || function (t) {\n              if (e.dCtx.timescaleLabels && e.dCtx.timescaleLabels.length) {\n                var n = e.dCtx.timescaleLabels[0],\n                  l = e.dCtx.timescaleLabels[e.dCtx.timescaleLabels.length - 1].position + o / 1.75 - e.dCtx.yAxisWidthRight,\n                  h = n.position - o / 1.75 + e.dCtx.yAxisWidthLeft,\n                  c = \"right\" === i.config.legend.position && e.dCtx.lgRect.width > 0 ? e.dCtx.lgRect.width : 0;\n                l > a.svgWidth - a.translateX - c && (a.skipLastTimelinelabel = !0), h < -(t.show && !t.floating || \"bar\" !== s.chart.type && \"candlestick\" !== s.chart.type && \"rangeBar\" !== s.chart.type && \"boxPlot\" !== s.chart.type ? 10 : o / 1.75) && (a.skipFirstTimelinelabel = !0);\n              } else \"datetime\" === r ? e.dCtx.gridPad.right < o && !a.rotateXLabels && (a.skipLastTimelinelabel = !0) : \"datetime\" !== r && e.dCtx.gridPad.right < o / 2 - e.dCtx.yAxisWidthRight && !a.rotateXLabels && !i.config.xaxis.labels.trim && (e.dCtx.xPadRight = o / 2 + 1);\n            }(t);\n          };\n        s.yaxis.forEach(function (t, i) {\n          n ? (e.dCtx.gridPad.left < o && (e.dCtx.xPadLeft = o / 2 + 1), e.dCtx.xPadRight = o / 2 + 1) : l(t, i);\n        });\n      }\n    }]), t;\n  }(),\n  lt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return s(t, [{\n      key: \"getyAxisLabelsCoords\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = [],\n          a = 10,\n          s = new M(this.dCtx.ctx);\n        return e.config.yaxis.map(function (r, o) {\n          var n = {\n              seriesIndex: o,\n              dataPointIndex: -1,\n              w: e\n            },\n            l = e.globals.yAxisScale[o],\n            h = 0;\n          if (!s.isYAxisHidden(o) && r.labels.show && void 0 !== r.labels.minWidth && (h = r.labels.minWidth), !s.isYAxisHidden(o) && r.labels.show && l.result.length) {\n            var c = e.globals.yLabelFormatters[o],\n              d = l.niceMin === Number.MIN_VALUE ? 0 : l.niceMin,\n              g = l.result.reduce(function (t, e) {\n                var i, a;\n                return (null === (i = String(c(t, n))) || void 0 === i ? void 0 : i.length) > (null === (a = String(c(e, n))) || void 0 === a ? void 0 : a.length) ? t : e;\n              }, d),\n              u = g = c(g, n);\n            if (void 0 !== g && 0 !== g.length || (g = l.niceMax), e.globals.isBarHorizontal) {\n              a = 0;\n              var f = e.globals.labels.slice();\n              g = m.getLargestStringFromArr(f), g = c(g, {\n                seriesIndex: o,\n                dataPointIndex: -1,\n                w: e\n              }), u = t.dCtx.dimHelpers.getLargestStringFromMultiArr(g, f);\n            }\n            var p = new k(t.dCtx.ctx),\n              x = \"rotate(\".concat(r.labels.rotate, \" 0 0)\"),\n              b = p.getTextRects(g, r.labels.style.fontSize, r.labels.style.fontFamily, x, !1),\n              v = b;\n            g !== u && (v = p.getTextRects(u, r.labels.style.fontSize, r.labels.style.fontFamily, x, !1)), i.push({\n              width: (h > v.width || h > b.width ? h : v.width > b.width ? v.width : b.width) + a,\n              height: v.height > b.height ? v.height : b.height\n            });\n          } else i.push({\n            width: 0,\n            height: 0\n          });\n        }), i;\n      }\n    }, {\n      key: \"getyAxisTitleCoords\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = [];\n        return e.config.yaxis.map(function (e, a) {\n          if (e.show && void 0 !== e.title.text) {\n            var s = new k(t.dCtx.ctx),\n              r = \"rotate(\".concat(e.title.rotate, \" 0 0)\"),\n              o = s.getTextRects(e.title.text, e.title.style.fontSize, e.title.style.fontFamily, r, !1);\n            i.push({\n              width: o.width,\n              height: o.height\n            });\n          } else i.push({\n            width: 0,\n            height: 0\n          });\n        }), i;\n      }\n    }, {\n      key: \"getTotalYAxisWidth\",\n      value: function () {\n        var t = this.w,\n          e = 0,\n          i = 0,\n          a = 0,\n          s = t.globals.yAxisScale.length > 1 ? 10 : 0,\n          r = new M(this.dCtx.ctx),\n          o = function (o, n) {\n            var l = t.config.yaxis[n].floating,\n              h = 0;\n            o.width > 0 && !l ? (h = o.width + s, function (e) {\n              return t.globals.ignoreYAxisIndexes.indexOf(e) > -1;\n            }(n) && (h = h - o.width - s)) : h = l || r.isYAxisHidden(n) ? 0 : 5, t.config.yaxis[n].opposite ? a += h : i += h, e += h;\n          };\n        return t.globals.yLabelsCoords.map(function (t, e) {\n          o(t, e);\n        }), t.globals.yTitleCoords.map(function (t, e) {\n          o(t, e);\n        }), t.globals.isBarHorizontal && !t.config.yaxis[0].floating && (e = t.globals.yLabelsCoords[0].width + t.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i, this.dCtx.yAxisWidthRight = a, e;\n      }\n    }]), t;\n  }(),\n  ht = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return s(t, [{\n      key: \"gridPadForColumnsInNumericAxis\",\n      value: function (t) {\n        var e = this.w,\n          i = e.config,\n          a = e.globals;\n        if (a.noData || a.collapsedSeries.length + a.ancillaryCollapsedSeries.length === i.series.length) return 0;\n        var s = function (t) {\n            return [\"bar\", \"rangeBar\", \"candlestick\", \"boxPlot\"].includes(t);\n          },\n          r = i.chart.type,\n          o = 0,\n          n = s(r) ? i.series.length : 1;\n        a.comboBarCount > 0 && (n = a.comboBarCount), a.collapsedSeries.forEach(function (t) {\n          s(t.type) && (n -= 1);\n        }), i.chart.stacked && (n = 1);\n        var l = s(r) || a.comboBarCount > 0,\n          h = Math.abs(a.initialMaxX - a.initialMinX);\n        if (l && a.isXNumeric && !a.isBarHorizontal && n > 0 && 0 !== h) {\n          h <= 3 && (h = a.dataPoints);\n          var c = h / t,\n            d = a.minXDiff && a.minXDiff / c > 0 ? a.minXDiff / c : 0;\n          d > t / 2 && (d /= 2), (o = d * parseInt(i.plotOptions.bar.columnWidth, 10) / 100) < 1 && (o = 1), a.barPadForNumericAxis = o;\n        }\n        return o;\n      }\n    }, {\n      key: \"gridPadFortitleSubtitle\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = e.globals,\n          a = this.dCtx.isSparkline || !i.axisCharts ? 0 : 10;\n        [\"title\", \"subtitle\"].forEach(function (s) {\n          void 0 !== e.config[s].text ? a += e.config[s].margin : a += t.dCtx.isSparkline || !i.axisCharts ? 0 : 5;\n        }), !e.config.legend.show || \"bottom\" !== e.config.legend.position || e.config.legend.floating || i.axisCharts || (a += 10);\n        var s = this.dCtx.dimHelpers.getTitleSubtitleCoords(\"title\"),\n          r = this.dCtx.dimHelpers.getTitleSubtitleCoords(\"subtitle\");\n        i.gridHeight -= s.height + r.height + a, i.translateY += s.height + r.height + a;\n      }\n    }, {\n      key: \"setGridXPosForDualYAxis\",\n      value: function (t, e) {\n        var i = this.w,\n          a = new M(this.dCtx.ctx);\n        i.config.yaxis.forEach(function (s, r) {\n          -1 !== i.globals.ignoreYAxisIndexes.indexOf(r) || s.floating || a.isYAxisHidden(r) || (s.opposite && (i.globals.translateX -= e[r].width + t[r].width + parseInt(s.labels.style.fontSize, 10) / 1.2 + 12), i.globals.translateX < 2 && (i.globals.translateX = 2));\n        });\n      }\n    }]), t;\n  }(),\n  ct = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new ot(this), this.dimYAxis = new lt(this), this.dimXAxis = new nt(this), this.dimGrid = new ht(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;\n    }\n    return s(t, [{\n      key: \"plotCoords\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = e.globals;\n        this.lgRect = this.dimHelpers.getLegendsRect(), this.datalabelsCoords = {\n          width: 0,\n          height: 0\n        };\n        var a = Array.isArray(e.config.stroke.width) ? Math.max.apply(Math, p(e.config.stroke.width)) : e.config.stroke.width;\n        this.isSparkline && ((e.config.markers.discrete.length > 0 || e.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function (e) {\n          var i = f(e, 2),\n            a = i[0],\n            s = i[1];\n          t.gridPad[a] = Math.max(s, t.w.globals.markers.largestSize / 1.5);\n        }), this.gridPad.top = Math.max(a / 2, this.gridPad.top), this.gridPad.bottom = Math.max(a / 2, this.gridPad.bottom)), i.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i.gridHeight = i.gridHeight - this.gridPad.top - this.gridPad.bottom, i.gridWidth = i.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;\n        var s = this.dimGrid.gridPadForColumnsInNumericAxis(i.gridWidth);\n        i.gridWidth = i.gridWidth - 2 * s, i.translateX = i.translateX + this.gridPad.left + this.xPadLeft + (s > 0 ? s : 0), i.translateY = i.translateY + this.gridPad.top;\n      }\n    }, {\n      key: \"setDimensionsForAxisCharts\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = e.globals,\n          a = this.dimYAxis.getyAxisLabelsCoords(),\n          s = this.dimYAxis.getyAxisTitleCoords();\n        i.isSlopeChart && (this.datalabelsCoords = this.dimHelpers.getDatalabelsRect()), e.globals.yLabelsCoords = [], e.globals.yTitleCoords = [], e.config.yaxis.map(function (t, i) {\n          e.globals.yLabelsCoords.push({\n            width: a[i].width,\n            index: i\n          }), e.globals.yTitleCoords.push({\n            width: s[i].width,\n            index: i\n          });\n        }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();\n        var r = this.dimXAxis.getxAxisLabelsCoords(),\n          o = this.dimXAxis.getxAxisGroupLabelsCoords(),\n          n = this.dimXAxis.getxAxisTitleCoords();\n        this.conditionalChecksForAxisCoords(r, n, o), i.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e.globals.isBarHorizontal && (i.rotateXLabels = !1, i.translateXAxisY = parseInt(e.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i.translateXAxisY = i.translateXAxisY + e.config.xaxis.labels.offsetY, i.translateXAxisX = i.translateXAxisX + e.config.xaxis.labels.offsetX;\n        var l = this.yAxisWidth,\n          h = this.xAxisHeight;\n        i.xAxisLabelsHeight = this.xAxisHeight - n.height, i.xAxisGroupLabelsHeight = i.xAxisLabelsHeight - r.height, i.xAxisLabelsWidth = this.xAxisWidth, i.xAxisHeight = this.xAxisHeight;\n        var c = 10;\n        (\"radar\" === e.config.chart.type || this.isSparkline) && (l = 0, h = 0), this.isSparkline && (this.lgRect = {\n          height: 0,\n          width: 0\n        }), (this.isSparkline || \"treemap\" === e.config.chart.type) && (l = 0, h = 0, c = 0), this.isSparkline || \"treemap\" === e.config.chart.type || this.dimXAxis.additionalPaddingXLabels(r);\n        var d = function () {\n          i.translateX = l + t.datalabelsCoords.width, i.gridHeight = i.svgHeight - t.lgRect.height - h - (t.isSparkline || \"treemap\" === e.config.chart.type ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - l - 2 * t.datalabelsCoords.width;\n        };\n        switch (\"top\" === e.config.xaxis.position && (c = i.xAxisHeight - e.config.xaxis.axisTicks.height - 5), e.config.legend.position) {\n          case \"bottom\":\n            i.translateY = c, d();\n            break;\n          case \"top\":\n            i.translateY = this.lgRect.height + c, d();\n            break;\n          case \"left\":\n            i.translateY = c, i.translateX = this.lgRect.width + l + this.datalabelsCoords.width, i.gridHeight = i.svgHeight - h - 12, i.gridWidth = i.svgWidth - this.lgRect.width - l - 2 * this.datalabelsCoords.width;\n            break;\n          case \"right\":\n            i.translateY = c, i.translateX = l + this.datalabelsCoords.width, i.gridHeight = i.svgHeight - h - 12, i.gridWidth = i.svgWidth - this.lgRect.width - l - 2 * this.datalabelsCoords.width - 5;\n            break;\n          default:\n            throw new Error(\"Legend position not supported\");\n        }\n        this.dimGrid.setGridXPosForDualYAxis(s, a), new Q(this.ctx).setYAxisXPosition(a, s);\n      }\n    }, {\n      key: \"setDimensionsForNonAxisCharts\",\n      value: function () {\n        var t = this.w,\n          e = t.globals,\n          i = t.config,\n          a = 0;\n        t.config.legend.show && !t.config.legend.floating && (a = 20);\n        var s = \"pie\" === i.chart.type || \"polarArea\" === i.chart.type || \"donut\" === i.chart.type ? \"pie\" : \"radialBar\",\n          r = i.plotOptions[s].offsetY,\n          o = i.plotOptions[s].offsetX;\n        if (!i.legend.show || i.legend.floating) {\n          e.gridHeight = e.svgHeight;\n          var n = e.dom.elWrap.getBoundingClientRect().width;\n          return e.gridWidth = Math.min(n, e.gridHeight), e.translateY = r, void (e.translateX = o + (e.svgWidth - e.gridWidth) / 2);\n        }\n        switch (i.legend.position) {\n          case \"bottom\":\n            e.gridHeight = e.svgHeight - this.lgRect.height, e.gridWidth = e.svgWidth, e.translateY = r - 10, e.translateX = o + (e.svgWidth - e.gridWidth) / 2;\n            break;\n          case \"top\":\n            e.gridHeight = e.svgHeight - this.lgRect.height, e.gridWidth = e.svgWidth, e.translateY = this.lgRect.height + r + 10, e.translateX = o + (e.svgWidth - e.gridWidth) / 2;\n            break;\n          case \"left\":\n            e.gridWidth = e.svgWidth - this.lgRect.width - a, e.gridHeight = \"auto\" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = o + this.lgRect.width + a;\n            break;\n          case \"right\":\n            e.gridWidth = e.svgWidth - this.lgRect.width - a - 5, e.gridHeight = \"auto\" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = o + 10;\n            break;\n          default:\n            throw new Error(\"Legend position not supported\");\n        }\n      }\n    }, {\n      key: \"conditionalChecksForAxisCoords\",\n      value: function (t, e, i) {\n        var a = this.w,\n          s = a.globals.hasXaxisGroups ? 2 : 1,\n          r = i.height + t.height + e.height,\n          o = a.globals.isMultiLineX ? 1.2 : a.globals.LINE_HEIGHT_RATIO,\n          n = a.globals.rotateXLabels ? 22 : 10,\n          l = a.globals.rotateXLabels && \"bottom\" === a.config.legend.position ? 10 : 0;\n        this.xAxisHeight = r * o + s * n + l, this.xAxisWidth = t.width, this.xAxisHeight - e.height > a.config.xaxis.labels.maxHeight && (this.xAxisHeight = a.config.xaxis.labels.maxHeight), a.config.xaxis.labels.minHeight && this.xAxisHeight < a.config.xaxis.labels.minHeight && (this.xAxisHeight = a.config.xaxis.labels.minHeight), a.config.xaxis.floating && (this.xAxisHeight = 0);\n        var h = 0,\n          c = 0;\n        a.config.yaxis.forEach(function (t) {\n          h += t.labels.minWidth, c += t.labels.maxWidth;\n        }), this.yAxisWidth < h && (this.yAxisWidth = h), this.yAxisWidth > c && (this.yAxisWidth = c);\n      }\n    }]), t;\n  }(),\n  dt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.lgCtx = e;\n    }\n    return s(t, [{\n      key: \"getLegendStyles\",\n      value: function () {\n        var t,\n          e,\n          i,\n          a = document.createElement(\"style\");\n        a.setAttribute(\"type\", \"text/css\");\n        var s = (null === (t = this.lgCtx.ctx) || void 0 === t || null === (e = t.opts) || void 0 === e || null === (i = e.chart) || void 0 === i ? void 0 : i.nonce) || this.w.config.chart.nonce;\n        s && a.setAttribute(\"nonce\", s);\n        var r = document.createTextNode(\"\\n      .apexcharts-flip-y {\\n        transform: scaleY(-1) translateY(-100%);\\n        transform-origin: top;\\n        transform-box: fill-box;\\n      }\\n      .apexcharts-flip-x {\\n        transform: scaleX(-1);\\n        transform-origin: center;\\n        transform-box: fill-box;\\n      }\\n      .apexcharts-legend {\\n        display: flex;\\n        overflow: auto;\\n        padding: 0 10px;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\\n        flex-wrap: wrap\\n      }\\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\n        flex-direction: column;\\n        bottom: 0;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\n        justify-content: flex-start;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\\n        justify-content: center;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\\n        justify-content: flex-end;\\n      }\\n      .apexcharts-legend-series {\\n        cursor: pointer;\\n        line-height: normal;\\n        display: flex;\\n        align-items: center;\\n      }\\n      .apexcharts-legend-text {\\n        position: relative;\\n        font-size: 14px;\\n      }\\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\\n        pointer-events: none;\\n      }\\n      .apexcharts-legend-marker {\\n        position: relative;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: pointer;\\n        margin-right: 1px;\\n      }\\n\\n      .apexcharts-legend-series.apexcharts-no-click {\\n        cursor: auto;\\n      }\\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\\n        display: none !important;\\n      }\\n      .apexcharts-inactive-legend {\\n        opacity: 0.45;\\n      }\");\n        return a.appendChild(r), a;\n      }\n    }, {\n      key: \"getLegendDimensions\",\n      value: function () {\n        var t = this.w.globals.dom.baseEl.querySelector(\".apexcharts-legend\").getBoundingClientRect(),\n          e = t.width;\n        return {\n          clwh: t.height,\n          clww: e\n        };\n      }\n    }, {\n      key: \"appendToForeignObject\",\n      value: function () {\n        this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());\n      }\n    }, {\n      key: \"toggleDataSeries\",\n      value: function (t, e) {\n        var i = this,\n          a = this.w;\n        if (a.globals.axisCharts || \"radialBar\" === a.config.chart.type) {\n          a.globals.resized = !0;\n          var s = null,\n            r = null;\n          if (a.globals.risingSeries = [], a.globals.axisCharts ? (s = a.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\")), r = parseInt(s.getAttribute(\"data:realIndex\"), 10)) : (s = a.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(t + 1, \"']\")), r = parseInt(s.getAttribute(\"rel\"), 10) - 1), e) [{\n            cs: a.globals.collapsedSeries,\n            csi: a.globals.collapsedSeriesIndices\n          }, {\n            cs: a.globals.ancillaryCollapsedSeries,\n            csi: a.globals.ancillaryCollapsedSeriesIndices\n          }].forEach(function (t) {\n            i.riseCollapsedSeries(t.cs, t.csi, r);\n          });else this.hideSeries({\n            seriesEl: s,\n            realIndex: r\n          });\n        } else {\n          var o = a.globals.dom.Paper.select(\" .apexcharts-series[rel='\".concat(t + 1, \"'] path\")),\n            n = a.config.chart.type;\n          if (\"pie\" === n || \"polarArea\" === n || \"donut\" === n) {\n            var l = a.config.plotOptions.pie.donut.labels;\n            new k(this.lgCtx.ctx).pathMouseDown(o.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o.members[0].node, l);\n          }\n          o.fire(\"click\");\n        }\n      }\n    }, {\n      key: \"getSeriesAfterCollapsing\",\n      value: function (t) {\n        var e = t.realIndex,\n          i = this.w,\n          a = i.globals,\n          s = m.clone(i.config.series);\n        if (a.axisCharts) {\n          var r = i.config.yaxis[a.seriesYAxisReverseMap[e]],\n            o = {\n              index: e,\n              data: s[e].data.slice(),\n              type: s[e].type || i.config.chart.type\n            };\n          if (r && r.show && r.showAlways) a.ancillaryCollapsedSeriesIndices.indexOf(e) < 0 && (a.ancillaryCollapsedSeries.push(o), a.ancillaryCollapsedSeriesIndices.push(e));else if (a.collapsedSeriesIndices.indexOf(e) < 0) {\n            a.collapsedSeries.push(o), a.collapsedSeriesIndices.push(e);\n            var n = a.risingSeries.indexOf(e);\n            a.risingSeries.splice(n, 1);\n          }\n        } else a.collapsedSeries.push({\n          index: e,\n          data: s[e]\n        }), a.collapsedSeriesIndices.push(e);\n        return a.allSeriesCollapsed = a.collapsedSeries.length + a.ancillaryCollapsedSeries.length === i.config.series.length, this._getSeriesBasedOnCollapsedState(s);\n      }\n    }, {\n      key: \"hideSeries\",\n      value: function (t) {\n        for (var e = t.seriesEl, i = t.realIndex, a = this.w, s = this.getSeriesAfterCollapsing({\n            realIndex: i\n          }), r = e.childNodes, o = 0; o < r.length; o++) r[o].classList.contains(\"apexcharts-series-markers-wrap\") && (r[o].classList.contains(\"apexcharts-hide\") ? r[o].classList.remove(\"apexcharts-hide\") : r[o].classList.add(\"apexcharts-hide\"));\n        this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);\n      }\n    }, {\n      key: \"riseCollapsedSeries\",\n      value: function (t, e, i) {\n        var a = this.w,\n          s = m.clone(a.config.series);\n        if (t.length > 0) {\n          for (var r = 0; r < t.length; r++) t[r].index === i && (a.globals.axisCharts ? s[i].data = t[r].data.slice() : s[i] = t[r].data, s[i].hidden = !1, t.splice(r, 1), e.splice(r, 1), a.globals.risingSeries.push(i));\n          s = this._getSeriesBasedOnCollapsedState(s), this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);\n        }\n      }\n    }, {\n      key: \"_getSeriesBasedOnCollapsedState\",\n      value: function (t) {\n        var e = this.w,\n          i = 0;\n        return e.globals.axisCharts ? t.forEach(function (a, s) {\n          e.globals.collapsedSeriesIndices.indexOf(s) < 0 && e.globals.ancillaryCollapsedSeriesIndices.indexOf(s) < 0 || (t[s].data = [], i++);\n        }) : t.forEach(function (a, s) {\n          !e.globals.collapsedSeriesIndices.indexOf(s) < 0 && (t[s] = 0, i++);\n        }), e.globals.allSeriesCollapsed = i === t.length, t;\n      }\n    }]), t;\n  }(),\n  gt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = \"bar\" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new dt(this);\n    }\n    return s(t, [{\n      key: \"init\",\n      value: function () {\n        var t = this.w,\n          e = t.globals,\n          i = t.config,\n          a = i.legend.showForSingleSeries && 1 === e.series.length || this.isBarsDistributed || e.series.length > 1;\n        if (this.legendHelpers.appendToForeignObject(), (a || !e.axisCharts) && i.legend.show) {\n          for (; e.dom.elLegendWrap.firstChild;) e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);\n          this.drawLegends(), \"bottom\" === i.legend.position || \"top\" === i.legend.position ? this.legendAlignHorizontal() : \"right\" !== i.legend.position && \"left\" !== i.legend.position || this.legendAlignVertical();\n        }\n      }\n    }, {\n      key: \"createLegendMarker\",\n      value: function (t) {\n        var e = t.i,\n          i = t.fillcolor,\n          a = this.w,\n          s = document.createElement(\"span\");\n        s.classList.add(\"apexcharts-legend-marker\");\n        var r = a.config.legend.markers.shape || a.config.markers.shape,\n          o = r;\n        Array.isArray(r) && (o = r[e]);\n        var n = Array.isArray(a.config.legend.markers.size) ? parseFloat(a.config.legend.markers.size[e]) : parseFloat(a.config.legend.markers.size),\n          l = Array.isArray(a.config.legend.markers.offsetX) ? parseFloat(a.config.legend.markers.offsetX[e]) : parseFloat(a.config.legend.markers.offsetX),\n          h = Array.isArray(a.config.legend.markers.offsetY) ? parseFloat(a.config.legend.markers.offsetY[e]) : parseFloat(a.config.legend.markers.offsetY),\n          c = Array.isArray(a.config.legend.markers.strokeWidth) ? parseFloat(a.config.legend.markers.strokeWidth[e]) : parseFloat(a.config.legend.markers.strokeWidth),\n          d = s.style;\n        if (d.height = 2 * (n + c) + \"px\", d.width = 2 * (n + c) + \"px\", d.left = l + \"px\", d.top = h + \"px\", a.config.legend.markers.customHTML) d.background = \"transparent\", d.color = i[e], Array.isArray(a.config.legend.markers.customHTML) ? a.config.legend.markers.customHTML[e] && (s.innerHTML = a.config.legend.markers.customHTML[e]()) : s.innerHTML = a.config.legend.markers.customHTML();else {\n          var u = new W(this.ctx).getMarkerConfig({\n              cssClass: \"apexcharts-legend-marker apexcharts-marker apexcharts-marker-\".concat(o),\n              seriesIndex: e,\n              strokeWidth: c,\n              size: n\n            }),\n            f = SVG(s).size(\"100%\", \"100%\"),\n            p = new k(this.ctx).drawMarker(0, 0, g(g({}, u), {}, {\n              pointFillColor: Array.isArray(i) ? i[e] : u.pointFillColor,\n              shape: o\n            }));\n          SVG.select(\".apexcharts-legend-marker.apexcharts-marker\").members.forEach(function (t) {\n            t.node.classList.contains(\"apexcharts-marker-triangle\") ? t.node.style.transform = \"translate(50%, 45%)\" : t.node.style.transform = \"translate(50%, 50%)\";\n          }), f.add(p);\n        }\n        return s;\n      }\n    }, {\n      key: \"drawLegends\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = e.config.legend.fontFamily,\n          a = e.globals.seriesNames,\n          s = e.config.legend.markers.fillColors ? e.config.legend.markers.fillColors.slice() : e.globals.colors.slice();\n        if (\"heatmap\" === e.config.chart.type) {\n          var r = e.config.plotOptions.heatmap.colorScale.ranges;\n          a = r.map(function (t) {\n            return t.name ? t.name : t.from + \" - \" + t.to;\n          }), s = r.map(function (t) {\n            return t.color;\n          });\n        } else this.isBarsDistributed && (a = e.globals.labels.slice());\n        e.config.legend.customLegendItems.length && (a = e.config.legend.customLegendItems);\n        for (var o = e.globals.legendFormatter, n = e.config.legend.inverseOrder, l = n ? a.length - 1 : 0; n ? l >= 0 : l <= a.length - 1; n ? l-- : l++) {\n          var h,\n            c = o(a[l], {\n              seriesIndex: l,\n              w: e\n            }),\n            d = !1,\n            g = !1;\n          if (e.globals.collapsedSeries.length > 0) for (var u = 0; u < e.globals.collapsedSeries.length; u++) e.globals.collapsedSeries[u].index === l && (d = !0);\n          if (e.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var f = 0; f < e.globals.ancillaryCollapsedSeriesIndices.length; f++) e.globals.ancillaryCollapsedSeriesIndices[f] === l && (g = !0);\n          var p = this.createLegendMarker({\n            i: l,\n            fillcolor: s\n          });\n          k.setAttrs(p, {\n            rel: l + 1,\n            \"data:collapsed\": d || g\n          }), (d || g) && p.classList.add(\"apexcharts-inactive-legend\");\n          var x = document.createElement(\"div\"),\n            b = document.createElement(\"span\");\n          b.classList.add(\"apexcharts-legend-text\"), b.innerHTML = Array.isArray(c) ? c.join(\" \") : c;\n          var v = e.config.legend.labels.useSeriesColors ? e.globals.colors[l] : Array.isArray(e.config.legend.labels.colors) ? null === (h = e.config.legend.labels.colors) || void 0 === h ? void 0 : h[l] : e.config.legend.labels.colors;\n          v || (v = e.config.chart.foreColor), b.style.color = v, b.style.fontSize = parseFloat(e.config.legend.fontSize) + \"px\", b.style.fontWeight = e.config.legend.fontWeight, b.style.fontFamily = i || e.config.chart.fontFamily, k.setAttrs(b, {\n            rel: l + 1,\n            i: l,\n            \"data:default-text\": encodeURIComponent(c),\n            \"data:collapsed\": d || g\n          }), x.appendChild(p), x.appendChild(b);\n          var y = new A(this.ctx);\n          if (!e.config.legend.showForZeroSeries) 0 === y.getSeriesTotalByIndex(l) && y.seriesHaveSameValues(l) && !y.isSeriesNull(l) && -1 === e.globals.collapsedSeriesIndices.indexOf(l) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(l) && x.classList.add(\"apexcharts-hidden-zero-series\");\n          e.config.legend.showForNullSeries || y.isSeriesNull(l) && -1 === e.globals.collapsedSeriesIndices.indexOf(l) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(l) && x.classList.add(\"apexcharts-hidden-null-series\"), e.globals.dom.elLegendWrap.appendChild(x), e.globals.dom.elLegendWrap.classList.add(\"apexcharts-align-\".concat(e.config.legend.horizontalAlign)), e.globals.dom.elLegendWrap.classList.add(\"apx-legend-position-\" + e.config.legend.position), x.classList.add(\"apexcharts-legend-series\"), x.style.margin = \"\".concat(e.config.legend.itemMargin.vertical, \"px \").concat(e.config.legend.itemMargin.horizontal, \"px\"), e.globals.dom.elLegendWrap.style.width = e.config.legend.width ? e.config.legend.width + \"px\" : \"\", e.globals.dom.elLegendWrap.style.height = e.config.legend.height ? e.config.legend.height + \"px\" : \"\", k.setAttrs(x, {\n            rel: l + 1,\n            seriesName: m.escapeString(a[l]),\n            \"data:collapsed\": d || g\n          }), (d || g) && x.classList.add(\"apexcharts-inactive-legend\"), e.config.legend.onItemClick.toggleDataSeries || x.classList.add(\"apexcharts-no-click\");\n        }\n        e.globals.dom.elWrap.addEventListener(\"click\", t.onLegendClick, !0), e.config.legend.onItemHover.highlightDataSeries && 0 === e.config.legend.customLegendItems.length && (e.globals.dom.elWrap.addEventListener(\"mousemove\", t.onLegendHovered, !0), e.globals.dom.elWrap.addEventListener(\"mouseout\", t.onLegendHovered, !0));\n      }\n    }, {\n      key: \"setLegendWrapXY\",\n      value: function (t, e) {\n        var i = this.w,\n          a = i.globals.dom.elLegendWrap,\n          s = a.clientHeight,\n          r = 0,\n          o = 0;\n        if (\"bottom\" === i.config.legend.position) o = i.globals.svgHeight - Math.min(s, i.globals.svgHeight / 2) - 5;else if (\"top\" === i.config.legend.position) {\n          var n = new ct(this.ctx),\n            l = n.dimHelpers.getTitleSubtitleCoords(\"title\").height,\n            h = n.dimHelpers.getTitleSubtitleCoords(\"subtitle\").height;\n          o = (l > 0 ? l - 10 : 0) + (h > 0 ? h - 10 : 0);\n        }\n        a.style.position = \"absolute\", r = r + t + i.config.legend.offsetX, o = o + e + i.config.legend.offsetY, a.style.left = r + \"px\", a.style.top = o + \"px\", \"right\" === i.config.legend.position && (a.style.left = \"auto\", a.style.right = 25 + i.config.legend.offsetX + \"px\");\n        [\"width\", \"height\"].forEach(function (t) {\n          a.style[t] && (a.style[t] = parseInt(i.config.legend[t], 10) + \"px\");\n        });\n      }\n    }, {\n      key: \"legendAlignHorizontal\",\n      value: function () {\n        var t = this.w;\n        t.globals.dom.elLegendWrap.style.right = 0;\n        var e = new ct(this.ctx),\n          i = e.dimHelpers.getTitleSubtitleCoords(\"title\"),\n          a = e.dimHelpers.getTitleSubtitleCoords(\"subtitle\"),\n          s = 0;\n        \"top\" === t.config.legend.position && (s = i.height + a.height + t.config.title.margin + t.config.subtitle.margin - 10), this.setLegendWrapXY(20, s);\n      }\n    }, {\n      key: \"legendAlignVertical\",\n      value: function () {\n        var t = this.w,\n          e = this.legendHelpers.getLegendDimensions(),\n          i = 0;\n        \"left\" === t.config.legend.position && (i = 20), \"right\" === t.config.legend.position && (i = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(i, 20);\n      }\n    }, {\n      key: \"onLegendHovered\",\n      value: function (t) {\n        var e = this.w,\n          i = t.target.classList.contains(\"apexcharts-legend-series\") || t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\");\n        if (\"heatmap\" === e.config.chart.type || this.isBarsDistributed) {\n          if (i) {\n            var a = parseInt(t.target.getAttribute(\"rel\"), 10) - 1;\n            this.ctx.events.fireEvent(\"legendHover\", [this.ctx, a, this.w]), new V(this.ctx).highlightRangeInSeries(t, t.target);\n          }\n        } else !t.target.classList.contains(\"apexcharts-inactive-legend\") && i && new V(this.ctx).toggleSeriesOnHover(t, t.target);\n      }\n    }, {\n      key: \"onLegendClick\",\n      value: function (t) {\n        var e = this.w;\n        if (!e.config.legend.customLegendItems.length && (t.target.classList.contains(\"apexcharts-legend-series\") || t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\"))) {\n          var i = parseInt(t.target.getAttribute(\"rel\"), 10) - 1,\n            a = \"true\" === t.target.getAttribute(\"data:collapsed\"),\n            s = this.w.config.chart.events.legendClick;\n          \"function\" == typeof s && s(this.ctx, i, this.w), this.ctx.events.fireEvent(\"legendClick\", [this.ctx, i, this.w]);\n          var r = this.w.config.legend.markers.onClick;\n          \"function\" == typeof r && t.target.classList.contains(\"apexcharts-legend-marker\") && (r(this.ctx, i, this.w), this.ctx.events.fireEvent(\"legendMarkerClick\", [this.ctx, i, this.w])), \"treemap\" !== e.config.chart.type && \"heatmap\" !== e.config.chart.type && !this.isBarsDistributed && e.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i, a);\n        }\n      }\n    }]), t;\n  }(),\n  ut = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n      var a = this.w;\n      this.ev = this.w.config.chart.events, this.selectedClass = \"apexcharts-selected\", this.localeValues = this.w.globals.locale.toolbar, this.minX = a.globals.minX, this.maxX = a.globals.maxX;\n    }\n    return s(t, [{\n      key: \"createToolbar\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = function () {\n            return document.createElement(\"div\");\n          },\n          a = i();\n        if (a.setAttribute(\"class\", \"apexcharts-toolbar\"), a.style.top = e.config.chart.toolbar.offsetY + \"px\", a.style.right = 3 - e.config.chart.toolbar.offsetX + \"px\", e.globals.dom.elWrap.appendChild(a), this.elZoom = i(), this.elZoomIn = i(), this.elZoomOut = i(), this.elPan = i(), this.elSelection = i(), this.elZoomReset = i(), this.elMenuIcon = i(), this.elMenu = i(), this.elCustomIcons = [], this.t = e.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for (var s = 0; s < this.t.customIcons.length; s++) this.elCustomIcons.push(i());\n        var r = [],\n          o = function (i, a, s) {\n            var o = i.toLowerCase();\n            t.t[o] && e.config.chart.zoom.enabled && r.push({\n              el: a,\n              icon: \"string\" == typeof t.t[o] ? t.t[o] : s,\n              title: t.localeValues[i],\n              class: \"apexcharts-\".concat(o, \"-icon\")\n            });\n          };\n        o(\"zoomIn\", this.elZoomIn, '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n'), o(\"zoomOut\", this.elZoomOut, '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n');\n        var n = function (i) {\n          t.t[i] && e.config.chart[i].enabled && r.push({\n            el: \"zoom\" === i ? t.elZoom : t.elSelection,\n            icon: \"string\" == typeof t.t[i] ? t.t[i] : \"zoom\" === i ? '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\\n    <path d=\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\"/>\\n</svg>' : '<svg fill=\"#6E8192\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z\"/>\\n</svg>',\n            title: t.localeValues[\"zoom\" === i ? \"selectionZoom\" : \"selection\"],\n            class: e.globals.isTouchDevice ? \"apexcharts-element-hidden\" : \"apexcharts-\".concat(i, \"-icon\")\n          });\n        };\n        n(\"zoom\"), n(\"selection\"), this.t.pan && e.config.chart.zoom.enabled && r.push({\n          el: this.elPan,\n          icon: \"string\" == typeof this.t.pan ? this.t.pan : '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <defs>\\n        <path d=\"M0 0h24v24H0z\" id=\"a\"/>\\n    </defs>\\n    <clipPath id=\"b\">\\n        <use overflow=\"visible\" xlink:href=\"#a\"/>\\n    </clipPath>\\n    <path clip-path=\"url(#b)\" d=\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\"/>\\n</svg>',\n          title: this.localeValues.pan,\n          class: e.globals.isTouchDevice ? \"apexcharts-element-hidden\" : \"apexcharts-pan-icon\"\n        }), o(\"reset\", this.elZoomReset, '<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"/>\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n</svg>'), this.t.download && r.push({\n          el: this.elMenuIcon,\n          icon: \"string\" == typeof this.t.download ? this.t.download : '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/></svg>',\n          title: this.localeValues.menu,\n          class: \"apexcharts-menu-icon\"\n        });\n        for (var l = 0; l < this.elCustomIcons.length; l++) r.push({\n          el: this.elCustomIcons[l],\n          icon: this.t.customIcons[l].icon,\n          title: this.t.customIcons[l].title,\n          index: this.t.customIcons[l].index,\n          class: \"apexcharts-toolbar-custom-icon \" + this.t.customIcons[l].class\n        });\n        r.forEach(function (t, e) {\n          t.index && m.moveIndexInArray(r, e, t.index);\n        });\n        for (var h = 0; h < r.length; h++) k.setAttrs(r[h].el, {\n          class: r[h].class,\n          title: r[h].title\n        }), r[h].el.innerHTML = r[h].icon, a.appendChild(r[h].el);\n        this._createHamburgerMenu(a), e.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();\n      }\n    }, {\n      key: \"_createHamburgerMenu\",\n      value: function (t) {\n        this.elMenuItems = [], t.appendChild(this.elMenu), k.setAttrs(this.elMenu, {\n          class: \"apexcharts-menu\"\n        });\n        for (var e = [{\n            name: \"exportSVG\",\n            title: this.localeValues.exportToSVG\n          }, {\n            name: \"exportPNG\",\n            title: this.localeValues.exportToPNG\n          }, {\n            name: \"exportCSV\",\n            title: this.localeValues.exportToCSV\n          }], i = 0; i < e.length; i++) this.elMenuItems.push(document.createElement(\"div\")), this.elMenuItems[i].innerHTML = e[i].title, k.setAttrs(this.elMenuItems[i], {\n          class: \"apexcharts-menu-item \".concat(e[i].name),\n          title: e[i].title\n        }), this.elMenu.appendChild(this.elMenuItems[i]);\n      }\n    }, {\n      key: \"addToolbarEventListeners\",\n      value: function () {\n        var t = this;\n        this.elZoomReset.addEventListener(\"click\", this.handleZoomReset.bind(this)), this.elSelection.addEventListener(\"click\", this.toggleZoomSelection.bind(this, \"selection\")), this.elZoom.addEventListener(\"click\", this.toggleZoomSelection.bind(this, \"zoom\")), this.elZoomIn.addEventListener(\"click\", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener(\"click\", this.handleZoomOut.bind(this)), this.elPan.addEventListener(\"click\", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener(\"click\", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function (e) {\n          e.classList.contains(\"exportSVG\") ? e.addEventListener(\"click\", t.handleDownload.bind(t, \"svg\")) : e.classList.contains(\"exportPNG\") ? e.addEventListener(\"click\", t.handleDownload.bind(t, \"png\")) : e.classList.contains(\"exportCSV\") && e.addEventListener(\"click\", t.handleDownload.bind(t, \"csv\"));\n        });\n        for (var e = 0; e < this.t.customIcons.length; e++) this.elCustomIcons[e].addEventListener(\"click\", this.t.customIcons[e].click.bind(this, this.ctx, this.ctx.w));\n      }\n    }, {\n      key: \"toggleZoomSelection\",\n      value: function (t) {\n        this.ctx.getSyncedCharts().forEach(function (e) {\n          e.ctx.toolbar.toggleOtherControls();\n          var i = \"selection\" === t ? e.ctx.toolbar.elSelection : e.ctx.toolbar.elZoom,\n            a = \"selection\" === t ? \"selectionEnabled\" : \"zoomEnabled\";\n          e.w.globals[a] = !e.w.globals[a], i.classList.contains(e.ctx.toolbar.selectedClass) ? i.classList.remove(e.ctx.toolbar.selectedClass) : i.classList.add(e.ctx.toolbar.selectedClass);\n        });\n      }\n    }, {\n      key: \"getToolbarIconsReference\",\n      value: function () {\n        var t = this.w;\n        this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(\".apexcharts-zoom-icon\")), this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(\".apexcharts-pan-icon\")), this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(\".apexcharts-selection-icon\"));\n      }\n    }, {\n      key: \"enableZoomPanFromToolbar\",\n      value: function (t) {\n        this.toggleOtherControls(), \"pan\" === t ? this.w.globals.panEnabled = !0 : this.w.globals.zoomEnabled = !0;\n        var e = \"pan\" === t ? this.elPan : this.elZoom,\n          i = \"pan\" === t ? this.elZoom : this.elPan;\n        e && e.classList.add(this.selectedClass), i && i.classList.remove(this.selectedClass);\n      }\n    }, {\n      key: \"togglePanning\",\n      value: function () {\n        this.ctx.getSyncedCharts().forEach(function (t) {\n          t.ctx.toolbar.toggleOtherControls(), t.w.globals.panEnabled = !t.w.globals.panEnabled, t.ctx.toolbar.elPan.classList.contains(t.ctx.toolbar.selectedClass) ? t.ctx.toolbar.elPan.classList.remove(t.ctx.toolbar.selectedClass) : t.ctx.toolbar.elPan.classList.add(t.ctx.toolbar.selectedClass);\n        });\n      }\n    }, {\n      key: \"toggleOtherControls\",\n      value: function () {\n        var t = this,\n          e = this.w;\n        e.globals.panEnabled = !1, e.globals.zoomEnabled = !1, e.globals.selectionEnabled = !1, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function (e) {\n          e && e.classList.remove(t.selectedClass);\n        });\n      }\n    }, {\n      key: \"handleZoomIn\",\n      value: function () {\n        var t = this.w;\n        t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY);\n        var e = (this.minX + this.maxX) / 2,\n          i = (this.minX + e) / 2,\n          a = (this.maxX + e) / 2,\n          s = this._getNewMinXMaxX(i, a);\n        t.globals.disableZoomIn || this.zoomUpdateOptions(s.minX, s.maxX);\n      }\n    }, {\n      key: \"handleZoomOut\",\n      value: function () {\n        var t = this.w;\n        if (t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY), !(\"datetime\" === t.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {\n          var e = (this.minX + this.maxX) / 2,\n            i = this.minX - (e - this.minX),\n            a = this.maxX - (e - this.maxX),\n            s = this._getNewMinXMaxX(i, a);\n          t.globals.disableZoomOut || this.zoomUpdateOptions(s.minX, s.maxX);\n        }\n      }\n    }, {\n      key: \"_getNewMinXMaxX\",\n      value: function (t, e) {\n        var i = this.w.config.xaxis.convertedCatToNumeric;\n        return {\n          minX: i ? Math.floor(t) : t,\n          maxX: i ? Math.floor(e) : e\n        };\n      }\n    }, {\n      key: \"zoomUpdateOptions\",\n      value: function (t, e) {\n        var i = this.w;\n        if (void 0 !== t || void 0 !== e) {\n          if (!(i.config.xaxis.convertedCatToNumeric && (t < 1 && (t = 1, e = i.globals.dataPoints), e - t < 2))) {\n            var a = {\n                min: t,\n                max: e\n              },\n              s = this.getBeforeZoomRange(a);\n            s && (a = s.xaxis);\n            var r = {\n                xaxis: a\n              },\n              o = m.clone(i.globals.initialConfig.yaxis);\n            i.config.chart.group || (r.yaxis = o), this.w.globals.zoomed = !0, this.ctx.updateHelpers._updateOptions(r, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a, o);\n          }\n        } else this.handleZoomReset();\n      }\n    }, {\n      key: \"zoomCallback\",\n      value: function (t, e) {\n        \"function\" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {\n          xaxis: t,\n          yaxis: e\n        });\n      }\n    }, {\n      key: \"getBeforeZoomRange\",\n      value: function (t, e) {\n        var i = null;\n        return \"function\" == typeof this.ev.beforeZoom && (i = this.ev.beforeZoom(this, {\n          xaxis: t,\n          yaxis: e\n        })), i;\n      }\n    }, {\n      key: \"toggleMenu\",\n      value: function () {\n        var t = this;\n        window.setTimeout(function () {\n          t.elMenu.classList.contains(\"apexcharts-menu-open\") ? t.elMenu.classList.remove(\"apexcharts-menu-open\") : t.elMenu.classList.add(\"apexcharts-menu-open\");\n        }, 0);\n      }\n    }, {\n      key: \"handleDownload\",\n      value: function (t) {\n        var e = this.w,\n          i = new U(this.ctx);\n        switch (t) {\n          case \"svg\":\n            i.exportToSVG(this.ctx);\n            break;\n          case \"png\":\n            i.exportToPng(this.ctx);\n            break;\n          case \"csv\":\n            i.exportToCSV({\n              series: e.config.series,\n              columnDelimiter: e.config.chart.toolbar.export.csv.columnDelimiter\n            });\n        }\n      }\n    }, {\n      key: \"handleZoomReset\",\n      value: function (t) {\n        this.ctx.getSyncedCharts().forEach(function (t) {\n          var e = t.w;\n          if (e.globals.lastXAxis.min = e.globals.initialConfig.xaxis.min, e.globals.lastXAxis.max = e.globals.initialConfig.xaxis.max, t.updateHelpers.revertDefaultAxisMinMax(), \"function\" == typeof e.config.chart.events.beforeResetZoom) {\n            var i = e.config.chart.events.beforeResetZoom(t, e);\n            i && t.updateHelpers.revertDefaultAxisMinMax(i);\n          }\n          \"function\" == typeof e.config.chart.events.zoomed && t.ctx.toolbar.zoomCallback({\n            min: e.config.xaxis.min,\n            max: e.config.xaxis.max\n          }), e.globals.zoomed = !1;\n          var a = t.ctx.series.emptyCollapsedSeries(m.clone(e.globals.initialSeries));\n          t.updateHelpers._updateSeries(a, e.config.chart.animations.dynamicAnimation.enabled);\n        });\n      }\n    }, {\n      key: \"destroy\",\n      value: function () {\n        this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;\n      }\n    }]), t;\n  }(),\n  ft = function (t) {\n    h(a, ut);\n    var e = o(a);\n    function a(t) {\n      var s;\n      return i(this, a), (s = e.call(this, t)).ctx = t, s.w = t.w, s.dragged = !1, s.graphics = new k(s.ctx), s.eventList = [\"mousedown\", \"mouseleave\", \"mousemove\", \"touchstart\", \"touchmove\", \"mouseup\", \"touchend\", \"wheel\"], s.clientX = 0, s.clientY = 0, s.startX = 0, s.endX = 0, s.dragX = 0, s.startY = 0, s.endY = 0, s.dragY = 0, s.moveDirection = \"none\", s.debounceTimer = null, s.debounceDelay = 100, s.wheelDelay = 400, s;\n    }\n    return s(a, [{\n      key: \"init\",\n      value: function (t) {\n        var e = this,\n          i = t.xyRatios,\n          a = this.w,\n          s = this;\n        this.xyRatios = i, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a.globals.dom.baseEl.querySelector(\".apexcharts-grid\"), this.zoomRect.node.classList.add(\"apexcharts-zoom-rect\"), this.selectionRect.node.classList.add(\"apexcharts-selection-rect\"), a.globals.dom.elGraphical.add(this.zoomRect), a.globals.dom.elGraphical.add(this.selectionRect), \"x\" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n          minX: 0,\n          minY: 0,\n          maxX: a.globals.gridWidth,\n          maxY: a.globals.gridHeight\n        }).on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")) : \"y\" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n          minX: 0,\n          maxX: a.globals.gridWidth\n        }).on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")) : this.slDraggableRect = this.selectionRect.draggable().on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")), this.preselectedSelection(), this.hoverArea = a.globals.dom.baseEl.querySelector(\"\".concat(a.globals.chartClass, \" .apexcharts-svg\")), this.hoverArea.classList.add(\"apexcharts-zoomable\"), this.eventList.forEach(function (t) {\n          e.hoverArea.addEventListener(t, s.svgMouseEvents.bind(s, i), {\n            capture: !1,\n            passive: !0\n          });\n        }), a.config.chart.zoom.allowMouseWheelZoom && this.hoverArea.addEventListener(\"wheel\", s.mouseWheelEvent.bind(s), {\n          capture: !1,\n          passive: !1\n        });\n      }\n    }, {\n      key: \"destroy\",\n      value: function () {\n        this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;\n      }\n    }, {\n      key: \"svgMouseEvents\",\n      value: function (t, e) {\n        var i = this.w,\n          a = this,\n          s = this.ctx.toolbar,\n          r = i.globals.zoomEnabled ? i.config.chart.zoom.type : i.config.chart.selection.type,\n          o = i.config.chart.toolbar.autoSelected;\n        if (e.shiftKey ? (this.shiftWasPressed = !0, s.enableZoomPanFromToolbar(\"pan\" === o ? \"zoom\" : \"pan\")) : this.shiftWasPressed && (s.enableZoomPanFromToolbar(o), this.shiftWasPressed = !1), e.target) {\n          var n,\n            l = e.target.classList;\n          if (e.target.parentNode && null !== e.target.parentNode && (n = e.target.parentNode.classList), !(l.contains(\"apexcharts-selection-rect\") || l.contains(\"apexcharts-legend-marker\") || l.contains(\"apexcharts-legend-text\") || n && n.contains(\"apexcharts-toolbar\"))) {\n            if (a.clientX = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientX : \"touchend\" === e.type ? e.changedTouches[0].clientX : e.clientX, a.clientY = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientY : \"touchend\" === e.type ? e.changedTouches[0].clientY : e.clientY, \"mousedown\" === e.type && 1 === e.which) {\n              var h = a.gridRect.getBoundingClientRect();\n              a.startX = a.clientX - h.left, a.startY = a.clientY - h.top, a.dragged = !1, a.w.globals.mousedown = !0;\n            }\n            if ((\"mousemove\" === e.type && 1 === e.which || \"touchmove\" === e.type) && (a.dragged = !0, i.globals.panEnabled ? (i.globals.selection = null, a.w.globals.mousedown && a.panDragging({\n              context: a,\n              zoomtype: r,\n              xyRatios: t\n            })) : (a.w.globals.mousedown && i.globals.zoomEnabled || a.w.globals.mousedown && i.globals.selectionEnabled) && (a.selection = a.selectionDrawing({\n              context: a,\n              zoomtype: r\n            }))), \"mouseup\" === e.type || \"touchend\" === e.type || \"mouseleave\" === e.type) {\n              var c,\n                d = null === (c = a.gridRect) || void 0 === c ? void 0 : c.getBoundingClientRect();\n              d && a.w.globals.mousedown && (a.endX = a.clientX - d.left, a.endY = a.clientY - d.top, a.dragX = Math.abs(a.endX - a.startX), a.dragY = Math.abs(a.endY - a.startY), (i.globals.zoomEnabled || i.globals.selectionEnabled) && a.selectionDrawn({\n                context: a,\n                zoomtype: r\n              }), i.globals.panEnabled && i.config.xaxis.convertedCatToNumeric && a.delayedPanScrolled()), i.globals.zoomEnabled && a.hideSelectionRect(this.selectionRect), a.dragged = !1, a.w.globals.mousedown = !1;\n            }\n            this.makeSelectionRectDraggable();\n          }\n        }\n      }\n    }, {\n      key: \"mouseWheelEvent\",\n      value: function (t) {\n        var e = this,\n          i = this.w;\n        t.preventDefault();\n        var a = Date.now();\n        a - i.globals.lastWheelExecution > this.wheelDelay && (this.executeMouseWheelZoom(t), i.globals.lastWheelExecution = a), this.debounceTimer && clearTimeout(this.debounceTimer), this.debounceTimer = setTimeout(function () {\n          a - i.globals.lastWheelExecution > e.wheelDelay && (e.executeMouseWheelZoom(t), i.globals.lastWheelExecution = a);\n        }, this.debounceDelay);\n      }\n    }, {\n      key: \"executeMouseWheelZoom\",\n      value: function (t) {\n        var e,\n          i = this.w;\n        this.minX = i.globals.isRangeBar ? i.globals.minY : i.globals.minX, this.maxX = i.globals.isRangeBar ? i.globals.maxY : i.globals.maxX;\n        var a = null === (e = this.gridRect) || void 0 === e ? void 0 : e.getBoundingClientRect();\n        if (a) {\n          var s,\n            r,\n            o,\n            n = (t.clientX - a.left) / a.width,\n            l = this.minX,\n            h = this.maxX,\n            c = h - l;\n          if (t.deltaY < 0) {\n            var d = l + n * c;\n            r = d - (s = .5 * c) / 2, o = d + s / 2;\n          } else r = l - (s = 1.5 * c) / 2, o = h + s / 2;\n          if (!i.globals.isRangeBar) {\n            r = Math.max(r, i.globals.initialMinX), o = Math.min(o, i.globals.initialMaxX);\n            var g = .01 * (i.globals.initialMaxX - i.globals.initialMinX);\n            if (o - r < g) {\n              var u = (r + o) / 2;\n              r = u - g / 2, o = u + g / 2;\n            }\n          }\n          var f = this._getNewMinXMaxX(r, o);\n          isNaN(f.minX) || isNaN(f.maxX) || this.zoomUpdateOptions(f.minX, f.maxX);\n        }\n      }\n    }, {\n      key: \"makeSelectionRectDraggable\",\n      value: function () {\n        var t = this.w;\n        if (this.selectionRect) {\n          var e = this.selectionRect.node.getBoundingClientRect();\n          e.width > 0 && e.height > 0 && this.slDraggableRect.selectize({\n            points: \"l, r\",\n            pointSize: 8,\n            pointType: \"rect\"\n          }).resize({\n            constraint: {\n              minX: 0,\n              minY: 0,\n              maxX: t.globals.gridWidth,\n              maxY: t.globals.gridHeight\n            }\n          }).on(\"resizing\", this.selectionDragging.bind(this, \"resizing\"));\n        }\n      }\n    }, {\n      key: \"preselectedSelection\",\n      value: function () {\n        var t = this.w,\n          e = this.xyRatios;\n        if (!t.globals.zoomEnabled) if (void 0 !== t.globals.selection && null !== t.globals.selection) this.drawSelectionRect(t.globals.selection);else if (void 0 !== t.config.chart.selection.xaxis.min && void 0 !== t.config.chart.selection.xaxis.max) {\n          var i = (t.config.chart.selection.xaxis.min - t.globals.minX) / e.xRatio,\n            a = t.globals.gridWidth - (t.globals.maxX - t.config.chart.selection.xaxis.max) / e.xRatio - i;\n          t.globals.isRangeBar && (i = (t.config.chart.selection.xaxis.min - t.globals.yAxisScale[0].niceMin) / e.invertedYRatio, a = (t.config.chart.selection.xaxis.max - t.config.chart.selection.xaxis.min) / e.invertedYRatio);\n          var s = {\n            x: i,\n            y: 0,\n            width: a,\n            height: t.globals.gridHeight,\n            translateX: 0,\n            translateY: 0,\n            selectionEnabled: !0\n          };\n          this.drawSelectionRect(s), this.makeSelectionRectDraggable(), \"function\" == typeof t.config.chart.events.selection && t.config.chart.events.selection(this.ctx, {\n            xaxis: {\n              min: t.config.chart.selection.xaxis.min,\n              max: t.config.chart.selection.xaxis.max\n            },\n            yaxis: {}\n          });\n        }\n      }\n    }, {\n      key: \"drawSelectionRect\",\n      value: function (t) {\n        var e = t.x,\n          i = t.y,\n          a = t.width,\n          s = t.height,\n          r = t.translateX,\n          o = void 0 === r ? 0 : r,\n          n = t.translateY,\n          l = void 0 === n ? 0 : n,\n          h = this.w,\n          c = this.zoomRect,\n          d = this.selectionRect;\n        if (this.dragged || null !== h.globals.selection) {\n          var g = {\n            transform: \"translate(\" + o + \", \" + l + \")\"\n          };\n          h.globals.zoomEnabled && this.dragged && (a < 0 && (a = 1), c.attr({\n            x: e,\n            y: i,\n            width: a,\n            height: s,\n            fill: h.config.chart.zoom.zoomedArea.fill.color,\n            \"fill-opacity\": h.config.chart.zoom.zoomedArea.fill.opacity,\n            stroke: h.config.chart.zoom.zoomedArea.stroke.color,\n            \"stroke-width\": h.config.chart.zoom.zoomedArea.stroke.width,\n            \"stroke-opacity\": h.config.chart.zoom.zoomedArea.stroke.opacity\n          }), k.setAttrs(c.node, g)), h.globals.selectionEnabled && (d.attr({\n            x: e,\n            y: i,\n            width: a > 0 ? a : 0,\n            height: s > 0 ? s : 0,\n            fill: h.config.chart.selection.fill.color,\n            \"fill-opacity\": h.config.chart.selection.fill.opacity,\n            stroke: h.config.chart.selection.stroke.color,\n            \"stroke-width\": h.config.chart.selection.stroke.width,\n            \"stroke-dasharray\": h.config.chart.selection.stroke.dashArray,\n            \"stroke-opacity\": h.config.chart.selection.stroke.opacity\n          }), k.setAttrs(d.node, g));\n        }\n      }\n    }, {\n      key: \"hideSelectionRect\",\n      value: function (t) {\n        t && t.attr({\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        });\n      }\n    }, {\n      key: \"selectionDrawing\",\n      value: function (t) {\n        var e = t.context,\n          i = t.zoomtype,\n          a = this.w,\n          s = e,\n          r = this.gridRect.getBoundingClientRect(),\n          o = s.startX - 1,\n          n = s.startY,\n          l = !1,\n          h = !1,\n          c = s.clientX - r.left - o,\n          d = s.clientY - r.top - n,\n          g = {};\n        return Math.abs(c + o) > a.globals.gridWidth ? c = a.globals.gridWidth - o : s.clientX - r.left < 0 && (c = o), o > s.clientX - r.left && (l = !0, c = Math.abs(c)), n > s.clientY - r.top && (h = !0, d = Math.abs(d)), g = \"x\" === i ? {\n          x: l ? o - c : o,\n          y: 0,\n          width: c,\n          height: a.globals.gridHeight\n        } : \"y\" === i ? {\n          x: 0,\n          y: h ? n - d : n,\n          width: a.globals.gridWidth,\n          height: d\n        } : {\n          x: l ? o - c : o,\n          y: h ? n - d : n,\n          width: c,\n          height: d\n        }, s.drawSelectionRect(g), s.selectionDragging(\"resizing\"), g;\n      }\n    }, {\n      key: \"selectionDragging\",\n      value: function (t, e) {\n        var i = this,\n          a = this.w,\n          s = this.xyRatios,\n          r = this.selectionRect,\n          o = 0;\n        \"resizing\" === t && (o = 30);\n        var n = function (t) {\n            return parseFloat(r.node.getAttribute(t));\n          },\n          l = {\n            x: n(\"x\"),\n            y: n(\"y\"),\n            width: n(\"width\"),\n            height: n(\"height\")\n          };\n        a.globals.selection = l, \"function\" == typeof a.config.chart.events.selection && a.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function () {\n          var t,\n            e,\n            o,\n            n,\n            l = i.gridRect.getBoundingClientRect(),\n            h = r.node.getBoundingClientRect();\n          a.globals.isRangeBar ? (t = a.globals.yAxisScale[0].niceMin + (h.left - l.left) * s.invertedYRatio, e = a.globals.yAxisScale[0].niceMin + (h.right - l.left) * s.invertedYRatio, o = 0, n = 1) : (t = a.globals.xAxisScale.niceMin + (h.left - l.left) * s.xRatio, e = a.globals.xAxisScale.niceMin + (h.right - l.left) * s.xRatio, o = a.globals.yAxisScale[0].niceMin + (l.bottom - h.bottom) * s.yRatio[0], n = a.globals.yAxisScale[0].niceMax - (h.top - l.top) * s.yRatio[0]);\n          var c = {\n            xaxis: {\n              min: t,\n              max: e\n            },\n            yaxis: {\n              min: o,\n              max: n\n            }\n          };\n          a.config.chart.events.selection(i.ctx, c), a.config.chart.brush.enabled && void 0 !== a.config.chart.events.brushScrolled && a.config.chart.events.brushScrolled(i.ctx, c);\n        }, o));\n      }\n    }, {\n      key: \"selectionDrawn\",\n      value: function (t) {\n        var e = t.context,\n          i = t.zoomtype,\n          a = this.w,\n          s = e,\n          r = this.xyRatios,\n          o = this.ctx.toolbar;\n        if (s.startX > s.endX) {\n          var n = s.startX;\n          s.startX = s.endX, s.endX = n;\n        }\n        if (s.startY > s.endY) {\n          var l = s.startY;\n          s.startY = s.endY, s.endY = l;\n        }\n        var h = void 0,\n          c = void 0;\n        a.globals.isRangeBar ? (h = a.globals.yAxisScale[0].niceMin + s.startX * r.invertedYRatio, c = a.globals.yAxisScale[0].niceMin + s.endX * r.invertedYRatio) : (h = a.globals.xAxisScale.niceMin + s.startX * r.xRatio, c = a.globals.xAxisScale.niceMin + s.endX * r.xRatio);\n        var d = [],\n          g = [];\n        if (a.config.yaxis.forEach(function (t, e) {\n          var i = a.globals.seriesYAxisMap[e][0];\n          d.push(a.globals.yAxisScale[e].niceMax - r.yRatio[i] * s.startY), g.push(a.globals.yAxisScale[e].niceMax - r.yRatio[i] * s.endY);\n        }), s.dragged && (s.dragX > 10 || s.dragY > 10) && h !== c) if (a.globals.zoomEnabled) {\n          var u = m.clone(a.globals.initialConfig.yaxis),\n            f = m.clone(a.globals.initialConfig.xaxis);\n          if (a.globals.zoomed = !0, a.config.xaxis.convertedCatToNumeric && (h = Math.floor(h), c = Math.floor(c), h < 1 && (h = 1, c = a.globals.dataPoints), c - h < 2 && (c = h + 1)), \"xy\" !== i && \"x\" !== i || (f = {\n            min: h,\n            max: c\n          }), \"xy\" !== i && \"y\" !== i || u.forEach(function (t, e) {\n            u[e].min = g[e], u[e].max = d[e];\n          }), o) {\n            var p = o.getBeforeZoomRange(f, u);\n            p && (f = p.xaxis ? p.xaxis : f, u = p.yaxis ? p.yaxis : u);\n          }\n          var x = {\n            xaxis: f\n          };\n          a.config.chart.group || (x.yaxis = u), s.ctx.updateHelpers._updateOptions(x, !1, s.w.config.chart.animations.dynamicAnimation.enabled), \"function\" == typeof a.config.chart.events.zoomed && o.zoomCallback(f, u);\n        } else if (a.globals.selectionEnabled) {\n          var b,\n            v = null;\n          b = {\n            min: h,\n            max: c\n          }, \"xy\" !== i && \"y\" !== i || (v = m.clone(a.config.yaxis)).forEach(function (t, e) {\n            v[e].min = g[e], v[e].max = d[e];\n          }), a.globals.selection = s.selection, \"function\" == typeof a.config.chart.events.selection && a.config.chart.events.selection(s.ctx, {\n            xaxis: b,\n            yaxis: v\n          });\n        }\n      }\n    }, {\n      key: \"panDragging\",\n      value: function (t) {\n        var e = t.context,\n          i = this.w,\n          a = e;\n        if (void 0 !== i.globals.lastClientPosition.x) {\n          var s = i.globals.lastClientPosition.x - a.clientX,\n            r = i.globals.lastClientPosition.y - a.clientY;\n          Math.abs(s) > Math.abs(r) && s > 0 ? this.moveDirection = \"left\" : Math.abs(s) > Math.abs(r) && s < 0 ? this.moveDirection = \"right\" : Math.abs(r) > Math.abs(s) && r > 0 ? this.moveDirection = \"up\" : Math.abs(r) > Math.abs(s) && r < 0 && (this.moveDirection = \"down\");\n        }\n        i.globals.lastClientPosition = {\n          x: a.clientX,\n          y: a.clientY\n        };\n        var o = i.globals.isRangeBar ? i.globals.minY : i.globals.minX,\n          n = i.globals.isRangeBar ? i.globals.maxY : i.globals.maxX;\n        i.config.xaxis.convertedCatToNumeric || a.panScrolled(o, n);\n      }\n    }, {\n      key: \"delayedPanScrolled\",\n      value: function () {\n        var t = this.w,\n          e = t.globals.minX,\n          i = t.globals.maxX,\n          a = (t.globals.maxX - t.globals.minX) / 2;\n        \"left\" === this.moveDirection ? (e = t.globals.minX + a, i = t.globals.maxX + a) : \"right\" === this.moveDirection && (e = t.globals.minX - a, i = t.globals.maxX - a), e = Math.floor(e), i = Math.floor(i), this.updateScrolledChart({\n          xaxis: {\n            min: e,\n            max: i\n          }\n        }, e, i);\n      }\n    }, {\n      key: \"panScrolled\",\n      value: function (t, e) {\n        var i = this.w,\n          a = this.xyRatios,\n          s = m.clone(i.globals.initialConfig.yaxis),\n          r = a.xRatio,\n          o = i.globals.minX,\n          n = i.globals.maxX;\n        i.globals.isRangeBar && (r = a.invertedYRatio, o = i.globals.minY, n = i.globals.maxY), \"left\" === this.moveDirection ? (t = o + i.globals.gridWidth / 15 * r, e = n + i.globals.gridWidth / 15 * r) : \"right\" === this.moveDirection && (t = o - i.globals.gridWidth / 15 * r, e = n - i.globals.gridWidth / 15 * r), i.globals.isRangeBar || (t < i.globals.initialMinX || e > i.globals.initialMaxX) && (t = o, e = n);\n        var l = {\n          xaxis: {\n            min: t,\n            max: e\n          }\n        };\n        i.config.chart.group || (l.yaxis = s), this.updateScrolledChart(l, t, e);\n      }\n    }, {\n      key: \"updateScrolledChart\",\n      value: function (t, e, i) {\n        var a = this.w;\n        this.ctx.updateHelpers._updateOptions(t, !1, !1), \"function\" == typeof a.config.chart.events.scrolled && a.config.chart.events.scrolled(this.ctx, {\n          xaxis: {\n            min: e,\n            max: i\n          }\n        });\n      }\n    }]), a;\n  }(),\n  pt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx;\n    }\n    return s(t, [{\n      key: \"getNearestValues\",\n      value: function (t) {\n        var e = t.hoverArea,\n          i = t.elGrid,\n          a = t.clientX,\n          s = t.clientY,\n          r = this.w,\n          o = i.getBoundingClientRect(),\n          n = o.width,\n          l = o.height,\n          h = n / (r.globals.dataPoints - 1),\n          c = l / r.globals.dataPoints,\n          d = this.hasBars();\n        !r.globals.comboCharts && !d || r.config.xaxis.convertedCatToNumeric || (h = n / r.globals.dataPoints);\n        var g = a - o.left - r.globals.barPadForNumericAxis,\n          u = s - o.top;\n        g < 0 || u < 0 || g > n || u > l ? (e.classList.remove(\"hovering-zoom\"), e.classList.remove(\"hovering-pan\")) : r.globals.zoomEnabled ? (e.classList.remove(\"hovering-pan\"), e.classList.add(\"hovering-zoom\")) : r.globals.panEnabled && (e.classList.remove(\"hovering-zoom\"), e.classList.add(\"hovering-pan\"));\n        var f = Math.round(g / h),\n          p = Math.floor(u / c);\n        d && !r.config.xaxis.convertedCatToNumeric && (f = Math.ceil(g / h), f -= 1);\n        var x = null,\n          b = null,\n          v = r.globals.seriesXvalues.map(function (t) {\n            return t.filter(function (t) {\n              return m.isNumber(t);\n            });\n          }),\n          y = r.globals.seriesYvalues.map(function (t) {\n            return t.filter(function (t) {\n              return m.isNumber(t);\n            });\n          });\n        if (r.globals.isXNumeric) {\n          var w = this.ttCtx.getElGrid().getBoundingClientRect(),\n            k = g * (w.width / n),\n            A = u * (w.height / l);\n          x = (b = this.closestInMultiArray(k, A, v, y)).index, f = b.j, null !== x && (v = r.globals.seriesXvalues[x], f = (b = this.closestInArray(k, v)).index);\n        }\n        return r.globals.capturedSeriesIndex = null === x ? -1 : x, (!f || f < 1) && (f = 0), r.globals.isBarHorizontal ? r.globals.capturedDataPointIndex = p : r.globals.capturedDataPointIndex = f, {\n          capturedSeries: x,\n          j: r.globals.isBarHorizontal ? p : f,\n          hoverX: g,\n          hoverY: u\n        };\n      }\n    }, {\n      key: \"closestInMultiArray\",\n      value: function (t, e, i, a) {\n        var s = this.w,\n          r = 0,\n          o = null,\n          n = -1;\n        s.globals.series.length > 1 ? r = this.getFirstActiveXArray(i) : o = 0;\n        var l = i[r][0],\n          h = Math.abs(t - l);\n        if (i.forEach(function (e) {\n          e.forEach(function (e, i) {\n            var a = Math.abs(t - e);\n            a <= h && (h = a, n = i);\n          });\n        }), -1 !== n) {\n          var c = a[r][n],\n            d = Math.abs(e - c);\n          o = r, a.forEach(function (t, i) {\n            var a = Math.abs(e - t[n]);\n            a <= d && (d = a, o = i);\n          });\n        }\n        return {\n          index: o,\n          j: n\n        };\n      }\n    }, {\n      key: \"getFirstActiveXArray\",\n      value: function (t) {\n        for (var e = this.w, i = 0, a = t.map(function (t, e) {\n            return t.length > 0 ? e : -1;\n          }), s = 0; s < a.length; s++) if (-1 !== a[s] && -1 === e.globals.collapsedSeriesIndices.indexOf(s) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(s)) {\n          i = a[s];\n          break;\n        }\n        return i;\n      }\n    }, {\n      key: \"closestInArray\",\n      value: function (t, e) {\n        for (var i = e[0], a = null, s = Math.abs(t - i), r = 0; r < e.length; r++) {\n          var o = Math.abs(t - e[r]);\n          o < s && (s = o, a = r);\n        }\n        return {\n          index: a\n        };\n      }\n    }, {\n      key: \"isXoverlap\",\n      value: function (t) {\n        var e = [],\n          i = this.w.globals.seriesX.filter(function (t) {\n            return void 0 !== t[0];\n          });\n        if (i.length > 0) for (var a = 0; a < i.length - 1; a++) void 0 !== i[a][t] && void 0 !== i[a + 1][t] && i[a][t] !== i[a + 1][t] && e.push(\"unEqual\");\n        return 0 === e.length;\n      }\n    }, {\n      key: \"isInitialSeriesSameLen\",\n      value: function () {\n        for (var t = !0, e = this.w.globals.initialSeries, i = 0; i < e.length - 1; i++) if (e[i].data.length !== e[i + 1].data.length) {\n          t = !1;\n          break;\n        }\n        return t;\n      }\n    }, {\n      key: \"getBarsHeight\",\n      value: function (t) {\n        return p(t).reduce(function (t, e) {\n          return t + e.getBBox().height;\n        }, 0);\n      }\n    }, {\n      key: \"getElMarkers\",\n      value: function (t) {\n        return \"number\" == typeof t ? this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:realIndex='\".concat(t, \"'] .apexcharts-series-markers-wrap > *\")) : this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers-wrap > *\");\n      }\n    }, {\n      key: \"getAllMarkers\",\n      value: function () {\n        var t = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers-wrap\");\n        (t = p(t)).sort(function (t, e) {\n          var i = Number(t.getAttribute(\"data:realIndex\")),\n            a = Number(e.getAttribute(\"data:realIndex\"));\n          return a < i ? 1 : a > i ? -1 : 0;\n        });\n        var e = [];\n        return t.forEach(function (t) {\n          e.push(t.querySelector(\".apexcharts-marker\"));\n        }), e;\n      }\n    }, {\n      key: \"hasMarkers\",\n      value: function (t) {\n        return this.getElMarkers(t).length > 0;\n      }\n    }, {\n      key: \"getPathFromPoint\",\n      value: function (t, e) {\n        var i = Number(t.getAttribute(\"cx\")),\n          a = Number(t.getAttribute(\"cy\")),\n          s = t.getAttribute(\"shape\");\n        return new k(this.ctx).getMarkerPath(i, a, s, e);\n      }\n    }, {\n      key: \"getElBars\",\n      value: function () {\n        return this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series\");\n      }\n    }, {\n      key: \"hasBars\",\n      value: function () {\n        return this.getElBars().length > 0;\n      }\n    }, {\n      key: \"getHoverMarkerSize\",\n      value: function (t) {\n        var e = this.w,\n          i = e.config.markers.hover.size;\n        return void 0 === i && (i = e.globals.markers.size[t] + e.config.markers.hover.sizeOffset), i;\n      }\n    }, {\n      key: \"toggleAllTooltipSeriesGroups\",\n      value: function (t) {\n        var e = this.w,\n          i = this.ttCtx;\n        0 === i.allTooltipSeriesGroups.length && (i.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-tooltip-series-group\"));\n        for (var a = i.allTooltipSeriesGroups, s = 0; s < a.length; s++) \"enable\" === t ? (a[s].classList.add(\"apexcharts-active\"), a[s].style.display = e.config.tooltip.items.display) : (a[s].classList.remove(\"apexcharts-active\"), a[s].style.display = \"none\");\n      }\n    }]), t;\n  }(),\n  xt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.ctx = e.ctx, this.ttCtx = e, this.tooltipUtil = new pt(e);\n    }\n    return s(t, [{\n      key: \"drawSeriesTexts\",\n      value: function (t) {\n        var e = t.shared,\n          i = void 0 === e || e,\n          a = t.ttItems,\n          s = t.i,\n          r = void 0 === s ? 0 : s,\n          o = t.j,\n          n = void 0 === o ? null : o,\n          l = t.y1,\n          h = t.y2,\n          c = t.e,\n          d = this.w;\n        void 0 !== d.config.tooltip.custom ? this.handleCustomTooltip({\n          i: r,\n          j: n,\n          y1: l,\n          y2: h,\n          w: d\n        }) : this.toggleActiveInactiveSeries(i, r);\n        var g = this.getValuesToPrint({\n          i: r,\n          j: n\n        });\n        this.printLabels({\n          i: r,\n          j: n,\n          values: g,\n          ttItems: a,\n          shared: i,\n          e: c\n        });\n        var u = this.ttCtx.getElTooltip();\n        this.ttCtx.tooltipRect.ttWidth = u.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u.getBoundingClientRect().height;\n      }\n    }, {\n      key: \"printLabels\",\n      value: function (t) {\n        var e,\n          i = this,\n          a = t.i,\n          s = t.j,\n          r = t.values,\n          o = t.ttItems,\n          n = t.shared,\n          l = t.e,\n          h = this.w,\n          c = [],\n          d = function (t) {\n            return h.globals.seriesGoals[t] && h.globals.seriesGoals[t][s] && Array.isArray(h.globals.seriesGoals[t][s]);\n          },\n          u = r.xVal,\n          f = r.zVal,\n          p = r.xAxisTTVal,\n          x = \"\",\n          b = h.globals.colors[a];\n        null !== s && h.config.plotOptions.bar.distributed && (b = h.globals.colors[s]);\n        for (var v = function (t, r) {\n            var v = i.getFormatters(a);\n            x = i.getSeriesName({\n              fn: v.yLbTitleFormatter,\n              index: a,\n              seriesIndex: a,\n              j: s\n            }), \"treemap\" === h.config.chart.type && (x = v.yLbTitleFormatter(String(h.config.series[a].data[s].x), {\n              series: h.globals.series,\n              seriesIndex: a,\n              dataPointIndex: s,\n              w: h\n            }));\n            var m = h.config.tooltip.inverseOrder ? r : t;\n            if (h.globals.axisCharts) {\n              var y = function (t) {\n                var e, i, a, r;\n                return h.globals.isRangeData ? v.yLbFormatter(null === (e = h.globals.seriesRangeStart) || void 0 === e || null === (i = e[t]) || void 0 === i ? void 0 : i[s], {\n                  series: h.globals.seriesRangeStart,\n                  seriesIndex: t,\n                  dataPointIndex: s,\n                  w: h\n                }) + \" - \" + v.yLbFormatter(null === (a = h.globals.seriesRangeEnd) || void 0 === a || null === (r = a[t]) || void 0 === r ? void 0 : r[s], {\n                  series: h.globals.seriesRangeEnd,\n                  seriesIndex: t,\n                  dataPointIndex: s,\n                  w: h\n                }) : v.yLbFormatter(h.globals.series[t][s], {\n                  series: h.globals.series,\n                  seriesIndex: t,\n                  dataPointIndex: s,\n                  w: h\n                });\n              };\n              if (n) v = i.getFormatters(m), x = i.getSeriesName({\n                fn: v.yLbTitleFormatter,\n                index: m,\n                seriesIndex: a,\n                j: s\n              }), b = h.globals.colors[m], e = y(m), d(m) && (c = h.globals.seriesGoals[m][s].map(function (t) {\n                return {\n                  attrs: t,\n                  val: v.yLbFormatter(t.value, {\n                    seriesIndex: m,\n                    dataPointIndex: s,\n                    w: h\n                  })\n                };\n              }));else {\n                var w,\n                  k = null == l || null === (w = l.target) || void 0 === w ? void 0 : w.getAttribute(\"fill\");\n                k && (-1 !== k.indexOf(\"url\") ? -1 !== k.indexOf(\"Pattern\") && (b = h.globals.dom.baseEl.querySelector(k.substr(4).slice(0, -1)).childNodes[0].getAttribute(\"stroke\")) : b = k), e = y(a), d(a) && Array.isArray(h.globals.seriesGoals[a][s]) && (c = h.globals.seriesGoals[a][s].map(function (t) {\n                  return {\n                    attrs: t,\n                    val: v.yLbFormatter(t.value, {\n                      seriesIndex: a,\n                      dataPointIndex: s,\n                      w: h\n                    })\n                  };\n                }));\n              }\n            }\n            null === s && (e = v.yLbFormatter(h.globals.series[a], g(g({}, h), {}, {\n              seriesIndex: a,\n              dataPointIndex: a\n            }))), i.DOMHandling({\n              i: a,\n              t: m,\n              j: s,\n              ttItems: o,\n              values: {\n                val: e,\n                goalVals: c,\n                xVal: u,\n                xAxisTTVal: p,\n                zVal: f\n              },\n              seriesName: x,\n              shared: n,\n              pColor: b\n            });\n          }, m = 0, y = h.globals.series.length - 1; m < h.globals.series.length; m++, y--) v(m, y);\n      }\n    }, {\n      key: \"getFormatters\",\n      value: function (t) {\n        var e,\n          i = this.w,\n          a = i.globals.yLabelFormatters[t];\n        return void 0 !== i.globals.ttVal ? Array.isArray(i.globals.ttVal) ? (a = i.globals.ttVal[t] && i.globals.ttVal[t].formatter, e = i.globals.ttVal[t] && i.globals.ttVal[t].title && i.globals.ttVal[t].title.formatter) : (a = i.globals.ttVal.formatter, \"function\" == typeof i.globals.ttVal.title.formatter && (e = i.globals.ttVal.title.formatter)) : e = i.config.tooltip.y.title.formatter, \"function\" != typeof a && (a = i.globals.yLabelFormatters[0] ? i.globals.yLabelFormatters[0] : function (t) {\n          return t;\n        }), \"function\" != typeof e && (e = function (t) {\n          return t;\n        }), {\n          yLbFormatter: a,\n          yLbTitleFormatter: e\n        };\n      }\n    }, {\n      key: \"getSeriesName\",\n      value: function (t) {\n        var e = t.fn,\n          i = t.index,\n          a = t.seriesIndex,\n          s = t.j,\n          r = this.w;\n        return e(String(r.globals.seriesNames[i]), {\n          series: r.globals.series,\n          seriesIndex: a,\n          dataPointIndex: s,\n          w: r\n        });\n      }\n    }, {\n      key: \"DOMHandling\",\n      value: function (t) {\n        t.i;\n        var e = t.t,\n          i = t.j,\n          a = t.ttItems,\n          s = t.values,\n          r = t.seriesName,\n          o = t.shared,\n          n = t.pColor,\n          l = this.w,\n          h = this.ttCtx,\n          c = s.val,\n          d = s.goalVals,\n          g = s.xVal,\n          u = s.xAxisTTVal,\n          f = s.zVal,\n          p = null;\n        p = a[e].children, l.config.tooltip.fillSeriesColor && (a[e].style.backgroundColor = n, p[0].style.display = \"none\"), h.showTooltipTitle && (null === h.tooltipTitle && (h.tooltipTitle = l.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-title\")), h.tooltipTitle.innerHTML = g), h.isXAxisTooltipEnabled && (h.xaxisTooltipText.innerHTML = \"\" !== u ? u : g);\n        var x = a[e].querySelector(\".apexcharts-tooltip-text-y-label\");\n        x && (x.innerHTML = r || \"\");\n        var b = a[e].querySelector(\".apexcharts-tooltip-text-y-value\");\n        b && (b.innerHTML = void 0 !== c ? c : \"\"), p[0] && p[0].classList.contains(\"apexcharts-tooltip-marker\") && (l.config.tooltip.marker.fillColors && Array.isArray(l.config.tooltip.marker.fillColors) && (n = l.config.tooltip.marker.fillColors[e]), p[0].style.backgroundColor = n), l.config.tooltip.marker.show || (p[0].style.display = \"none\");\n        var v = a[e].querySelector(\".apexcharts-tooltip-text-goals-label\"),\n          m = a[e].querySelector(\".apexcharts-tooltip-text-goals-value\");\n        if (d.length && l.globals.seriesGoals[e]) {\n          var y = function () {\n            var t = \"<div >\",\n              e = \"<div>\";\n            d.forEach(function (i, a) {\n              t += ' <div style=\"display: flex\"><span class=\"apexcharts-tooltip-marker\" style=\"background-color: '.concat(i.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;\"></span> ').concat(i.attrs.name, \"</div>\"), e += \"<div>\".concat(i.val, \"</div>\");\n            }), v.innerHTML = t + \"</div>\", m.innerHTML = e + \"</div>\";\n          };\n          o ? l.globals.seriesGoals[e][i] && Array.isArray(l.globals.seriesGoals[e][i]) ? y() : (v.innerHTML = \"\", m.innerHTML = \"\") : y();\n        } else v.innerHTML = \"\", m.innerHTML = \"\";\n        null !== f && (a[e].querySelector(\".apexcharts-tooltip-text-z-label\").innerHTML = l.config.tooltip.z.title, a[e].querySelector(\".apexcharts-tooltip-text-z-value\").innerHTML = void 0 !== f ? f : \"\");\n        if (o && p[0]) {\n          if (l.config.tooltip.hideEmptySeries) {\n            var w = a[e].querySelector(\".apexcharts-tooltip-marker\"),\n              k = a[e].querySelector(\".apexcharts-tooltip-text\");\n            0 == parseFloat(c) ? (w.style.display = \"none\", k.style.display = \"none\") : (w.style.display = \"block\", k.style.display = \"block\");\n          }\n          null == c || l.globals.ancillaryCollapsedSeriesIndices.indexOf(e) > -1 || l.globals.collapsedSeriesIndices.indexOf(e) > -1 || Array.isArray(h.tConfig.enabledOnSeries) && -1 === h.tConfig.enabledOnSeries.indexOf(e) ? p[0].parentNode.style.display = \"none\" : p[0].parentNode.style.display = l.config.tooltip.items.display;\n        } else Array.isArray(h.tConfig.enabledOnSeries) && -1 === h.tConfig.enabledOnSeries.indexOf(e) && (p[0].parentNode.style.display = \"none\");\n      }\n    }, {\n      key: \"toggleActiveInactiveSeries\",\n      value: function (t, e) {\n        var i = this.w;\n        if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups(\"enable\");else {\n          this.tooltipUtil.toggleAllTooltipSeriesGroups(\"disable\");\n          var a = i.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-series-group-\".concat(e));\n          a && (a.classList.add(\"apexcharts-active\"), a.style.display = i.config.tooltip.items.display);\n        }\n      }\n    }, {\n      key: \"getValuesToPrint\",\n      value: function (t) {\n        var e = t.i,\n          i = t.j,\n          a = this.w,\n          s = this.ctx.series.filteredSeriesX(),\n          r = \"\",\n          o = \"\",\n          n = null,\n          l = null,\n          h = {\n            series: a.globals.series,\n            seriesIndex: e,\n            dataPointIndex: i,\n            w: a\n          },\n          c = a.globals.ttZFormatter;\n        null === i ? l = a.globals.series[e] : a.globals.isXNumeric && \"treemap\" !== a.config.chart.type ? (r = s[e][i], 0 === s[e].length && (r = s[this.tooltipUtil.getFirstActiveXArray(s)][i])) : r = new _(this.ctx).isFormatXY() ? void 0 !== a.config.series[e].data[i] ? a.config.series[e].data[i].x : \"\" : void 0 !== a.globals.labels[i] ? a.globals.labels[i] : \"\";\n        var d = r;\n        a.globals.isXNumeric && \"datetime\" === a.config.xaxis.type ? r = new P(this.ctx).xLabelFormat(a.globals.ttKeyFormatter, d, d, {\n          i: void 0,\n          dateFormatter: new L(this.ctx).formatDate,\n          w: this.w\n        }) : r = a.globals.isBarHorizontal ? a.globals.yLabelFormatters[0](d, h) : a.globals.xLabelFormatter(d, h);\n        return void 0 !== a.config.tooltip.x.formatter && (r = a.globals.ttKeyFormatter(d, h)), a.globals.seriesZ.length > 0 && a.globals.seriesZ[e].length > 0 && (n = c(a.globals.seriesZ[e][i], a)), o = \"function\" == typeof a.config.xaxis.tooltip.formatter ? a.globals.xaxisTooltipFormatter(d, h) : r, {\n          val: Array.isArray(l) ? l.join(\" \") : l,\n          xVal: Array.isArray(r) ? r.join(\" \") : r,\n          xAxisTTVal: Array.isArray(o) ? o.join(\" \") : o,\n          zVal: n\n        };\n      }\n    }, {\n      key: \"handleCustomTooltip\",\n      value: function (t) {\n        var e = t.i,\n          i = t.j,\n          a = t.y1,\n          s = t.y2,\n          r = t.w,\n          o = this.ttCtx.getElTooltip(),\n          n = r.config.tooltip.custom;\n        Array.isArray(n) && n[e] && (n = n[e]), o.innerHTML = n({\n          ctx: this.ctx,\n          series: r.globals.series,\n          seriesIndex: e,\n          dataPointIndex: i,\n          y1: a,\n          y2: s,\n          w: r\n        });\n      }\n    }]), t;\n  }(),\n  bt = function () {\n    function t(e) {\n      i(this, t), this.ttCtx = e, this.ctx = e.ctx, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"moveXCrosshairs\",\n      value: function (t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n          i = this.ttCtx,\n          a = this.w,\n          s = i.getElXCrosshairs(),\n          r = t - i.xcrosshairsWidth / 2,\n          o = a.globals.labels.slice().length;\n        if (null !== e && (r = a.globals.gridWidth / o * e), null === s || a.globals.isBarHorizontal || (s.setAttribute(\"x\", r), s.setAttribute(\"x1\", r), s.setAttribute(\"x2\", r), s.setAttribute(\"y2\", a.globals.gridHeight), s.classList.add(\"apexcharts-active\")), r < 0 && (r = 0), r > a.globals.gridWidth && (r = a.globals.gridWidth), i.isXAxisTooltipEnabled) {\n          var n = r;\n          \"tickWidth\" !== a.config.xaxis.crosshairs.width && \"barWidth\" !== a.config.xaxis.crosshairs.width || (n = r + i.xcrosshairsWidth / 2), this.moveXAxisTooltip(n);\n        }\n      }\n    }, {\n      key: \"moveYCrosshairs\",\n      value: function (t) {\n        var e = this.ttCtx;\n        null !== e.ycrosshairs && k.setAttrs(e.ycrosshairs, {\n          y1: t,\n          y2: t\n        }), null !== e.ycrosshairsHidden && k.setAttrs(e.ycrosshairsHidden, {\n          y1: t,\n          y2: t\n        });\n      }\n    }, {\n      key: \"moveXAxisTooltip\",\n      value: function (t) {\n        var e = this.w,\n          i = this.ttCtx;\n        if (null !== i.xaxisTooltip && 0 !== i.xcrosshairsWidth) {\n          i.xaxisTooltip.classList.add(\"apexcharts-active\");\n          var a = i.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;\n          if (t -= i.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t)) {\n            t += e.globals.translateX;\n            var s;\n            s = new k(this.ctx).getTextRects(i.xaxisTooltipText.innerHTML), i.xaxisTooltipText.style.minWidth = s.width + \"px\", i.xaxisTooltip.style.left = t + \"px\", i.xaxisTooltip.style.top = a + \"px\";\n          }\n        }\n      }\n    }, {\n      key: \"moveYAxisTooltip\",\n      value: function (t) {\n        var e = this.w,\n          i = this.ttCtx;\n        null === i.yaxisTTEls && (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n        var a = parseInt(i.ycrosshairsHidden.getAttribute(\"y1\"), 10),\n          s = e.globals.translateY + a,\n          r = i.yaxisTTEls[t].getBoundingClientRect().height,\n          o = e.globals.translateYAxisX[t] - 2;\n        e.config.yaxis[t].opposite && (o -= 26), s -= r / 2, -1 === e.globals.ignoreYAxisIndexes.indexOf(t) ? (i.yaxisTTEls[t].classList.add(\"apexcharts-active\"), i.yaxisTTEls[t].style.top = s + \"px\", i.yaxisTTEls[t].style.left = o + e.config.yaxis[t].tooltip.offsetX + \"px\") : i.yaxisTTEls[t].classList.remove(\"apexcharts-active\");\n      }\n    }, {\n      key: \"moveTooltip\",\n      value: function (t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n          a = this.w,\n          s = this.ttCtx,\n          r = s.getElTooltip(),\n          o = s.tooltipRect,\n          n = null !== i ? parseFloat(i) : 1,\n          l = parseFloat(t) + n + 5,\n          h = parseFloat(e) + n / 2;\n        if (l > a.globals.gridWidth / 2 && (l = l - o.ttWidth - n - 10), l > a.globals.gridWidth - o.ttWidth - 10 && (l = a.globals.gridWidth - o.ttWidth), l < -20 && (l = -20), a.config.tooltip.followCursor) {\n          var c = s.getElGrid().getBoundingClientRect();\n          (l = s.e.clientX - c.left) > a.globals.gridWidth / 2 && (l -= s.tooltipRect.ttWidth), (h = s.e.clientY + a.globals.translateY - c.top) > a.globals.gridHeight / 2 && (h -= s.tooltipRect.ttHeight);\n        } else a.globals.isBarHorizontal || o.ttHeight / 2 + h > a.globals.gridHeight && (h = a.globals.gridHeight - o.ttHeight + a.globals.translateY);\n        isNaN(l) || (l += a.globals.translateX, r.style.left = l + \"px\", r.style.top = h + \"px\");\n      }\n    }, {\n      key: \"moveMarkers\",\n      value: function (t, e) {\n        var i = this.w,\n          a = this.ttCtx;\n        if (i.globals.markers.size[t] > 0) for (var s = i.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series[data\\\\:realIndex='\".concat(t, \"'] .apexcharts-marker\")), r = 0; r < s.length; r++) parseInt(s[r].getAttribute(\"rel\"), 10) === e && (a.marker.resetPointsSize(), a.marker.enlargeCurrentPoint(e, s[r]));else a.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t);\n      }\n    }, {\n      key: \"moveDynamicPointOnHover\",\n      value: function (t, e) {\n        var i,\n          a,\n          s,\n          r,\n          o = this.w,\n          n = this.ttCtx,\n          l = new k(this.ctx),\n          h = o.globals.pointsArray,\n          c = n.tooltipUtil.getHoverMarkerSize(e),\n          d = o.config.series[e].type;\n        if (!d || \"column\" !== d && \"candlestick\" !== d && \"boxPlot\" !== d) {\n          s = null === (i = h[e][t]) || void 0 === i ? void 0 : i[0], r = (null === (a = h[e][t]) || void 0 === a ? void 0 : a[1]) || 0;\n          var g = o.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(e, \"'] .apexcharts-series-markers path\"));\n          if (g && r < o.globals.gridHeight && r > 0) {\n            var u = g.getAttribute(\"shape\"),\n              f = l.getMarkerPath(s, r, u, 1.5 * c);\n            g.setAttribute(\"d\", f);\n          }\n          this.moveXCrosshairs(s), n.fixedTooltip || this.moveTooltip(s, r, c);\n        }\n      }\n    }, {\n      key: \"moveDynamicPointsOnHover\",\n      value: function (t) {\n        var e,\n          i = this.ttCtx,\n          a = i.w,\n          s = 0,\n          r = 0,\n          o = a.globals.pointsArray,\n          n = new V(this.ctx),\n          l = new k(this.ctx);\n        e = n.getActiveConfigSeriesIndex(\"asc\", [\"line\", \"area\", \"scatter\", \"bubble\"]);\n        var h = i.tooltipUtil.getHoverMarkerSize(e);\n        o[e] && (s = o[e][t][0], r = o[e][t][1]);\n        var c = i.tooltipUtil.getAllMarkers();\n        if (null !== c) for (var d = 0; d < a.globals.series.length; d++) {\n          var g = o[d];\n          if (a.globals.comboCharts && void 0 === g && c.splice(d, 0, null), g && g.length) {\n            var u = o[d][t][1],\n              f = void 0;\n            c[d].setAttribute(\"cx\", s);\n            var p = c[d].getAttribute(\"shape\");\n            if (\"rangeArea\" === a.config.chart.type && !a.globals.comboCharts) {\n              var x = t + a.globals.series[d].length;\n              f = o[d][x][1], u -= Math.abs(u - f) / 2;\n            }\n            if (null !== u && !isNaN(u) && u < a.globals.gridHeight + h && u + h > 0) {\n              var b = l.getMarkerPath(s, u, p, h);\n              c[d].setAttribute(\"d\", b);\n            } else c[d].setAttribute(\"d\", \"\");\n          }\n        }\n        this.moveXCrosshairs(s), i.fixedTooltip || this.moveTooltip(s, r || a.globals.gridHeight, h);\n      }\n    }, {\n      key: \"moveStickyTooltipOverBars\",\n      value: function (t, e) {\n        var i = this.w,\n          a = this.ttCtx,\n          s = i.globals.columnSeries ? i.globals.columnSeries.length : i.globals.series.length,\n          r = s >= 2 && s % 2 == 0 ? Math.floor(s / 2) : Math.floor(s / 2) + 1;\n        i.globals.isBarHorizontal && (r = new V(this.ctx).getActiveConfigSeriesIndex(\"desc\") + 1);\n        var o = i.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[rel='\".concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-candlestick-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-boxPlot-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-rangebar-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"']\"));\n        o || \"number\" != typeof e || (o = i.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[data\\\\:realIndex='\".concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-candlestick-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-boxPlot-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-rangebar-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"']\")));\n        var n = o ? parseFloat(o.getAttribute(\"cx\")) : 0,\n          l = o ? parseFloat(o.getAttribute(\"cy\")) : 0,\n          h = o ? parseFloat(o.getAttribute(\"barWidth\")) : 0,\n          c = a.getElGrid().getBoundingClientRect(),\n          d = o && (o.classList.contains(\"apexcharts-candlestick-area\") || o.classList.contains(\"apexcharts-boxPlot-area\"));\n        i.globals.isXNumeric ? (o && !d && (n -= s % 2 != 0 ? h / 2 : 0), o && d && i.globals.comboCharts && (n -= h / 2)) : i.globals.isBarHorizontal || (n = a.xAxisTicksPositions[t - 1] + a.dataPointsDividedWidth / 2, isNaN(n) && (n = a.xAxisTicksPositions[t] - a.dataPointsDividedWidth / 2)), i.globals.isBarHorizontal ? l -= a.tooltipRect.ttHeight : i.config.tooltip.followCursor ? l = a.e.clientY - c.top - a.tooltipRect.ttHeight / 2 : l + a.tooltipRect.ttHeight + 15 > i.globals.gridHeight && (l = i.globals.gridHeight), i.globals.isBarHorizontal || this.moveXCrosshairs(n), a.fixedTooltip || this.moveTooltip(n, l || i.globals.gridHeight);\n      }\n    }]), t;\n  }(),\n  vt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx, this.tooltipPosition = new bt(e);\n    }\n    return s(t, [{\n      key: \"drawDynamicPoints\",\n      value: function () {\n        var t = this.w,\n          e = new k(this.ctx),\n          i = new W(this.ctx),\n          a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n        a = p(a), t.config.chart.stacked && a.sort(function (t, e) {\n          return parseFloat(t.getAttribute(\"data:realIndex\")) - parseFloat(e.getAttribute(\"data:realIndex\"));\n        });\n        for (var s = 0; s < a.length; s++) {\n          var r = a[s].querySelector(\".apexcharts-series-markers-wrap\");\n          if (null !== r) {\n            var o = void 0,\n              n = \"apexcharts-marker w\".concat((Math.random() + 1).toString(36).substring(4));\n            \"line\" !== t.config.chart.type && \"area\" !== t.config.chart.type || t.globals.comboCharts || t.config.tooltip.intersect || (n += \" no-pointer-events\");\n            var l = i.getMarkerConfig({\n              cssClass: n,\n              seriesIndex: Number(r.getAttribute(\"data:realIndex\"))\n            });\n            (o = e.drawMarker(0, 0, l)).node.setAttribute(\"default-marker-size\", 0);\n            var h = document.createElementNS(t.globals.SVGNS, \"g\");\n            h.classList.add(\"apexcharts-series-markers\"), h.appendChild(o.node), r.appendChild(h);\n          }\n        }\n      }\n    }, {\n      key: \"enlargeCurrentPoint\",\n      value: function (t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n          a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n          s = this.w;\n        \"bubble\" !== s.config.chart.type && this.newPointSize(t, e);\n        var r = e.getAttribute(\"cx\"),\n          o = e.getAttribute(\"cy\");\n        if (null !== i && null !== a && (r = i, o = a), this.tooltipPosition.moveXCrosshairs(r), !this.fixedTooltip) {\n          if (\"radar\" === s.config.chart.type) {\n            var n = this.ttCtx.getElGrid().getBoundingClientRect();\n            r = this.ttCtx.e.clientX - n.left;\n          }\n          this.tooltipPosition.moveTooltip(r, o, s.config.markers.hover.size);\n        }\n      }\n    }, {\n      key: \"enlargePoints\",\n      value: function (t) {\n        for (var e = this.w, i = this, a = this.ttCtx, s = t, r = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), o = e.config.markers.hover.size, n = 0; n < r.length; n++) {\n          var l = r[n].getAttribute(\"rel\"),\n            h = r[n].getAttribute(\"index\");\n          if (void 0 === o && (o = e.globals.markers.size[h] + e.config.markers.hover.sizeOffset), s === parseInt(l, 10)) {\n            i.newPointSize(s, r[n]);\n            var c = r[n].getAttribute(\"cx\"),\n              d = r[n].getAttribute(\"cy\");\n            i.tooltipPosition.moveXCrosshairs(c), a.fixedTooltip || i.tooltipPosition.moveTooltip(c, d, o);\n          } else i.oldPointSize(r[n]);\n        }\n      }\n    }, {\n      key: \"newPointSize\",\n      value: function (t, e) {\n        var i = this.w,\n          a = i.config.markers.hover.size,\n          s = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;\n        if (\"0\" !== s.getAttribute(\"default-marker-size\")) {\n          var r = parseInt(s.getAttribute(\"index\"), 10);\n          void 0 === a && (a = i.globals.markers.size[r] + i.config.markers.hover.sizeOffset), a < 0 && (a = 0);\n          var o = this.ttCtx.tooltipUtil.getPathFromPoint(e, a);\n          e.setAttribute(\"d\", o);\n        }\n      }\n    }, {\n      key: \"oldPointSize\",\n      value: function (t) {\n        var e = parseFloat(t.getAttribute(\"default-marker-size\")),\n          i = this.ttCtx.tooltipUtil.getPathFromPoint(t, e);\n        t.setAttribute(\"d\", i);\n      }\n    }, {\n      key: \"resetPointsSize\",\n      value: function () {\n        for (var t = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), e = 0; e < t.length; e++) {\n          var i = parseFloat(t[e].getAttribute(\"default-marker-size\"));\n          if (m.isNumber(i) && i >= 0) {\n            var a = this.ttCtx.tooltipUtil.getPathFromPoint(t[e], i);\n            t[e].setAttribute(\"d\", a);\n          } else t[e].setAttribute(\"d\", \"M0,0\");\n        }\n      }\n    }]), t;\n  }(),\n  mt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w;\n      var a = this.w;\n      this.ttCtx = e, this.isVerticalGroupedRangeBar = !a.globals.isBarHorizontal && \"rangeBar\" === a.config.chart.type && a.config.plotOptions.bar.rangeBarGroupRows;\n    }\n    return s(t, [{\n      key: \"getAttr\",\n      value: function (t, e) {\n        return parseFloat(t.target.getAttribute(e));\n      }\n    }, {\n      key: \"handleHeatTreeTooltip\",\n      value: function (t) {\n        var e = t.e,\n          i = t.opt,\n          a = t.x,\n          s = t.y,\n          r = t.type,\n          o = this.ttCtx,\n          n = this.w;\n        if (e.target.classList.contains(\"apexcharts-\".concat(r, \"-rect\"))) {\n          var l = this.getAttr(e, \"i\"),\n            h = this.getAttr(e, \"j\"),\n            c = this.getAttr(e, \"cx\"),\n            d = this.getAttr(e, \"cy\"),\n            g = this.getAttr(e, \"width\"),\n            u = this.getAttr(e, \"height\");\n          if (o.tooltipLabels.drawSeriesTexts({\n            ttItems: i.ttItems,\n            i: l,\n            j: h,\n            shared: !1,\n            e: e\n          }), n.globals.capturedSeriesIndex = l, n.globals.capturedDataPointIndex = h, a = c + o.tooltipRect.ttWidth / 2 + g, s = d + o.tooltipRect.ttHeight / 2 - u / 2, o.tooltipPosition.moveXCrosshairs(c + g / 2), a > n.globals.gridWidth / 2 && (a = c - o.tooltipRect.ttWidth / 2 + g), o.w.config.tooltip.followCursor) {\n            var f = n.globals.dom.elWrap.getBoundingClientRect();\n            a = n.globals.clientX - f.left - (a > n.globals.gridWidth / 2 ? o.tooltipRect.ttWidth : 0), s = n.globals.clientY - f.top - (s > n.globals.gridHeight / 2 ? o.tooltipRect.ttHeight : 0);\n          }\n        }\n        return {\n          x: a,\n          y: s\n        };\n      }\n    }, {\n      key: \"handleMarkerTooltip\",\n      value: function (t) {\n        var e,\n          i,\n          a = t.e,\n          s = t.opt,\n          r = t.x,\n          o = t.y,\n          n = this.w,\n          l = this.ttCtx;\n        if (a.target.classList.contains(\"apexcharts-marker\")) {\n          var h = parseInt(s.paths.getAttribute(\"cx\"), 10),\n            c = parseInt(s.paths.getAttribute(\"cy\"), 10),\n            d = parseFloat(s.paths.getAttribute(\"val\"));\n          if (i = parseInt(s.paths.getAttribute(\"rel\"), 10), e = parseInt(s.paths.parentNode.parentNode.parentNode.getAttribute(\"rel\"), 10) - 1, l.intersect) {\n            var g = m.findAncestor(s.paths, \"apexcharts-series\");\n            g && (e = parseInt(g.getAttribute(\"data:realIndex\"), 10));\n          }\n          if (l.tooltipLabels.drawSeriesTexts({\n            ttItems: s.ttItems,\n            i: e,\n            j: i,\n            shared: !l.showOnIntersect && n.config.tooltip.shared,\n            e: a\n          }), \"mouseup\" === a.type && l.markerClick(a, e, i), n.globals.capturedSeriesIndex = e, n.globals.capturedDataPointIndex = i, r = h, o = c + n.globals.translateY - 1.4 * l.tooltipRect.ttHeight, l.w.config.tooltip.followCursor) {\n            var u = l.getElGrid().getBoundingClientRect();\n            o = l.e.clientY + n.globals.translateY - u.top;\n          }\n          d < 0 && (o = c), l.marker.enlargeCurrentPoint(i, s.paths, r, o);\n        }\n        return {\n          x: r,\n          y: o\n        };\n      }\n    }, {\n      key: \"handleBarTooltip\",\n      value: function (t) {\n        var e,\n          i,\n          a = t.e,\n          s = t.opt,\n          r = this.w,\n          o = this.ttCtx,\n          n = o.getElTooltip(),\n          l = 0,\n          h = 0,\n          c = 0,\n          d = this.getBarTooltipXY({\n            e: a,\n            opt: s\n          });\n        e = d.i;\n        var g = d.j;\n        r.globals.capturedSeriesIndex = e, r.globals.capturedDataPointIndex = g, r.globals.isBarHorizontal && o.tooltipUtil.hasBars() || !r.config.tooltip.shared ? (h = d.x, c = d.y, i = Array.isArray(r.config.stroke.width) ? r.config.stroke.width[e] : r.config.stroke.width, l = h) : r.globals.comboCharts || r.config.tooltip.shared || (l /= 2), isNaN(c) && (c = r.globals.svgHeight - o.tooltipRect.ttHeight);\n        var u = parseInt(s.paths.parentNode.getAttribute(\"data:realIndex\"), 10);\n        if (r.globals.isMultipleYAxis ? r.config.yaxis[u] && r.config.yaxis[u].reversed : r.config.yaxis[0].reversed, h + o.tooltipRect.ttWidth > r.globals.gridWidth ? h -= o.tooltipRect.ttWidth : h < 0 && (h = 0), o.w.config.tooltip.followCursor) {\n          var f = o.getElGrid().getBoundingClientRect();\n          c = o.e.clientY - f.top;\n        }\n        null === o.tooltip && (o.tooltip = r.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\")), r.config.tooltip.shared || (r.globals.comboBarCount > 0 ? o.tooltipPosition.moveXCrosshairs(l + i / 2) : o.tooltipPosition.moveXCrosshairs(l)), !o.fixedTooltip && (!r.config.tooltip.shared || r.globals.isBarHorizontal && o.tooltipUtil.hasBars()) && (c = c + r.globals.translateY - o.tooltipRect.ttHeight / 2, n.style.left = h + r.globals.translateX + \"px\", n.style.top = c + \"px\");\n      }\n    }, {\n      key: \"getBarTooltipXY\",\n      value: function (t) {\n        var e = this,\n          i = t.e,\n          a = t.opt,\n          s = this.w,\n          r = null,\n          o = this.ttCtx,\n          n = 0,\n          l = 0,\n          h = 0,\n          c = 0,\n          d = 0,\n          g = i.target.classList;\n        if (g.contains(\"apexcharts-bar-area\") || g.contains(\"apexcharts-candlestick-area\") || g.contains(\"apexcharts-boxPlot-area\") || g.contains(\"apexcharts-rangebar-area\")) {\n          var u = i.target,\n            f = u.getBoundingClientRect(),\n            p = a.elGrid.getBoundingClientRect(),\n            x = f.height;\n          d = f.height;\n          var b = f.width,\n            v = parseInt(u.getAttribute(\"cx\"), 10),\n            m = parseInt(u.getAttribute(\"cy\"), 10);\n          c = parseFloat(u.getAttribute(\"barWidth\"));\n          var y = \"touchmove\" === i.type ? i.touches[0].clientX : i.clientX;\n          r = parseInt(u.getAttribute(\"j\"), 10), n = parseInt(u.parentNode.getAttribute(\"rel\"), 10) - 1;\n          var w = u.getAttribute(\"data-range-y1\"),\n            k = u.getAttribute(\"data-range-y2\");\n          s.globals.comboCharts && (n = parseInt(u.parentNode.getAttribute(\"data:realIndex\"), 10));\n          var A = function (t) {\n              return s.globals.isXNumeric ? v - b / 2 : e.isVerticalGroupedRangeBar ? v + b / 2 : v - o.dataPointsDividedWidth + b / 2;\n            },\n            S = function () {\n              return m - o.dataPointsDividedHeight + x / 2 - o.tooltipRect.ttHeight / 2;\n            };\n          o.tooltipLabels.drawSeriesTexts({\n            ttItems: a.ttItems,\n            i: n,\n            j: r,\n            y1: w ? parseInt(w, 10) : null,\n            y2: k ? parseInt(k, 10) : null,\n            shared: !o.showOnIntersect && s.config.tooltip.shared,\n            e: i\n          }), s.config.tooltip.followCursor ? s.globals.isBarHorizontal ? (l = y - p.left + 15, h = S()) : (l = A(), h = i.clientY - p.top - o.tooltipRect.ttHeight / 2 - 15) : s.globals.isBarHorizontal ? ((l = v) < o.xyRatios.baseLineInvertedY && (l = v - o.tooltipRect.ttWidth), h = S()) : (l = A(), h = m);\n        }\n        return {\n          x: l,\n          y: h,\n          barHeight: d,\n          barWidth: c,\n          i: n,\n          j: r\n        };\n      }\n    }]), t;\n  }(),\n  yt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.ttCtx = e;\n    }\n    return s(t, [{\n      key: \"drawXaxisTooltip\",\n      value: function () {\n        var t = this.w,\n          e = this.ttCtx,\n          i = \"bottom\" === t.config.xaxis.position;\n        e.xaxisOffY = i ? t.globals.gridHeight + 1 : -t.globals.xAxisHeight - t.config.xaxis.axisTicks.height + 3;\n        var a = i ? \"apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom\" : \"apexcharts-xaxistooltip apexcharts-xaxistooltip-top\",\n          s = t.globals.dom.elWrap;\n        e.isXAxisTooltipEnabled && null === t.globals.dom.baseEl.querySelector(\".apexcharts-xaxistooltip\") && (e.xaxisTooltip = document.createElement(\"div\"), e.xaxisTooltip.setAttribute(\"class\", a + \" apexcharts-theme-\" + t.config.tooltip.theme), s.appendChild(e.xaxisTooltip), e.xaxisTooltipText = document.createElement(\"div\"), e.xaxisTooltipText.classList.add(\"apexcharts-xaxistooltip-text\"), e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily, e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize, e.xaxisTooltip.appendChild(e.xaxisTooltipText));\n      }\n    }, {\n      key: \"drawYaxisTooltip\",\n      value: function () {\n        for (var t = this.w, e = this.ttCtx, i = 0; i < t.config.yaxis.length; i++) {\n          var a = t.config.yaxis[i].opposite || t.config.yaxis[i].crosshairs.opposite;\n          e.yaxisOffX = a ? t.globals.gridWidth + 1 : 1;\n          var s = \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i, a ? \" apexcharts-yaxistooltip-right\" : \" apexcharts-yaxistooltip-left\"),\n            r = t.globals.dom.elWrap;\n          null === t.globals.dom.baseEl.querySelector(\".apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i)) && (e.yaxisTooltip = document.createElement(\"div\"), e.yaxisTooltip.setAttribute(\"class\", s + \" apexcharts-theme-\" + t.config.tooltip.theme), r.appendChild(e.yaxisTooltip), 0 === i && (e.yaxisTooltipText = []), e.yaxisTooltipText[i] = document.createElement(\"div\"), e.yaxisTooltipText[i].classList.add(\"apexcharts-yaxistooltip-text\"), e.yaxisTooltip.appendChild(e.yaxisTooltipText[i]));\n        }\n      }\n    }, {\n      key: \"setXCrosshairWidth\",\n      value: function () {\n        var t = this.w,\n          e = this.ttCtx,\n          i = e.getElXCrosshairs();\n        if (e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width, 10), t.globals.comboCharts) {\n          var a = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n          if (null !== a && \"barWidth\" === t.config.xaxis.crosshairs.width) {\n            var s = parseFloat(a.getAttribute(\"barWidth\"));\n            e.xcrosshairsWidth = s;\n          } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n            var r = t.globals.labels.length;\n            e.xcrosshairsWidth = t.globals.gridWidth / r;\n          }\n        } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n          var o = t.globals.labels.length;\n          e.xcrosshairsWidth = t.globals.gridWidth / o;\n        } else if (\"barWidth\" === t.config.xaxis.crosshairs.width) {\n          var n = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n          if (null !== n) {\n            var l = parseFloat(n.getAttribute(\"barWidth\"));\n            e.xcrosshairsWidth = l;\n          } else e.xcrosshairsWidth = 1;\n        }\n        t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== i && e.xcrosshairsWidth > 0 && i.setAttribute(\"width\", e.xcrosshairsWidth);\n      }\n    }, {\n      key: \"handleYCrosshair\",\n      value: function () {\n        var t = this.w,\n          e = this.ttCtx;\n        e.ycrosshairs = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs\"), e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs-hidden\");\n      }\n    }, {\n      key: \"drawYaxisTooltipText\",\n      value: function (t, e, i) {\n        var a = this.ttCtx,\n          s = this.w,\n          r = s.globals,\n          o = r.seriesYAxisMap[t];\n        if (a.yaxisTooltips[t] && o.length > 0) {\n          var n = r.yLabelFormatters[t],\n            l = a.getElGrid().getBoundingClientRect(),\n            h = o[0],\n            c = 0;\n          i.yRatio.length > 1 && (c = h);\n          var d = (e - l.top) * i.yRatio[c],\n            g = r.maxYArr[h] - r.minYArr[h],\n            u = r.minYArr[h] + (g - d);\n          s.config.yaxis[t].reversed && (u = r.maxYArr[h] - (g - d)), a.tooltipPosition.moveYCrosshairs(e - l.top), a.yaxisTooltipText[t].innerHTML = n(u), a.tooltipPosition.moveYAxisTooltip(t);\n        }\n      }\n    }]), t;\n  }(),\n  wt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n      var a = this.w;\n      this.tConfig = a.config.tooltip, this.tooltipUtil = new pt(this), this.tooltipLabels = new xt(this), this.tooltipPosition = new bt(this), this.marker = new vt(this), this.intersect = new mt(this), this.axesTooltip = new yt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !a.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();\n    }\n    return s(t, [{\n      key: \"getElTooltip\",\n      value: function (t) {\n        return t || (t = this), t.w.globals.dom.baseEl ? t.w.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\") : null;\n      }\n    }, {\n      key: \"getElXCrosshairs\",\n      value: function () {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-xcrosshairs\");\n      }\n    }, {\n      key: \"getElGrid\",\n      value: function () {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-grid\");\n      }\n    }, {\n      key: \"drawTooltip\",\n      value: function (t) {\n        var e = this.w;\n        this.xyRatios = t, this.isXAxisTooltipEnabled = e.config.xaxis.tooltip.enabled && e.globals.axisCharts, this.yaxisTooltips = e.config.yaxis.map(function (t, i) {\n          return !!(t.show && t.tooltip.enabled && e.globals.axisCharts);\n        }), this.allTooltipSeriesGroups = [], e.globals.axisCharts || (this.showTooltipTitle = !1);\n        var i = document.createElement(\"div\");\n        if (i.classList.add(\"apexcharts-tooltip\"), e.config.tooltip.cssClass && i.classList.add(e.config.tooltip.cssClass), i.classList.add(\"apexcharts-theme-\".concat(this.tConfig.theme)), e.globals.dom.elWrap.appendChild(i), e.globals.axisCharts) {\n          this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();\n          var a = new q(this.ctx);\n          this.xAxisTicksPositions = a.getXAxisTicksPositions();\n        }\n        if (!e.globals.comboCharts && !this.tConfig.intersect && \"rangeBar\" !== e.config.chart.type || this.tConfig.shared || (this.showOnIntersect = !0), 0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e.globals.collapsedSeries.length !== e.globals.series.length) {\n          this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints, this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement(\"div\"), this.tooltipTitle.classList.add(\"apexcharts-tooltip-title\"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i.appendChild(this.tooltipTitle));\n          var s = e.globals.series.length;\n          (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (s = this.showOnIntersect ? 1 : e.globals.series.length), this.legendLabels = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-legend-text\"), this.ttItems = this.createTTElements(s), this.addSVGEvents();\n        }\n      }\n    }, {\n      key: \"createTTElements\",\n      value: function (t) {\n        for (var e = this, i = this.w, a = [], s = this.getElTooltip(), r = function (r) {\n            var o = document.createElement(\"div\");\n            o.classList.add(\"apexcharts-tooltip-series-group\", \"apexcharts-tooltip-series-group-\".concat(r)), o.style.order = i.config.tooltip.inverseOrder ? t - r : r + 1;\n            var n = document.createElement(\"span\");\n            n.classList.add(\"apexcharts-tooltip-marker\"), n.style.backgroundColor = i.globals.colors[r], o.appendChild(n);\n            var l = document.createElement(\"div\");\n            l.classList.add(\"apexcharts-tooltip-text\"), l.style.fontFamily = e.tConfig.style.fontFamily || i.config.chart.fontFamily, l.style.fontSize = e.tConfig.style.fontSize, [\"y\", \"goals\", \"z\"].forEach(function (t) {\n              var e = document.createElement(\"div\");\n              e.classList.add(\"apexcharts-tooltip-\".concat(t, \"-group\"));\n              var i = document.createElement(\"span\");\n              i.classList.add(\"apexcharts-tooltip-text-\".concat(t, \"-label\")), e.appendChild(i);\n              var a = document.createElement(\"span\");\n              a.classList.add(\"apexcharts-tooltip-text-\".concat(t, \"-value\")), e.appendChild(a), l.appendChild(e);\n            }), o.appendChild(l), s.appendChild(o), a.push(o);\n          }, o = 0; o < t; o++) r(o);\n        return a;\n      }\n    }, {\n      key: \"addSVGEvents\",\n      value: function () {\n        var t = this.w,\n          e = t.config.chart.type,\n          i = this.getElTooltip(),\n          a = !(\"bar\" !== e && \"candlestick\" !== e && \"boxPlot\" !== e && \"rangeBar\" !== e),\n          s = \"area\" === e || \"line\" === e || \"scatter\" === e || \"bubble\" === e || \"radar\" === e,\n          r = t.globals.dom.Paper.node,\n          o = this.getElGrid();\n        o && (this.seriesBound = o.getBoundingClientRect());\n        var n,\n          l = [],\n          h = [],\n          c = {\n            hoverArea: r,\n            elGrid: o,\n            tooltipEl: i,\n            tooltipY: l,\n            tooltipX: h,\n            ttItems: this.ttItems\n          };\n        if (t.globals.axisCharts && (s ? n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:longestSeries='true'] .apexcharts-marker\") : a ? n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area\") : \"heatmap\" !== e && \"treemap\" !== e || (n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap\")), n && n.length)) for (var d = 0; d < n.length; d++) l.push(n[d].getAttribute(\"cy\")), h.push(n[d].getAttribute(\"cx\"));\n        if (t.globals.xyCharts && !this.showOnIntersect || t.globals.comboCharts && !this.showOnIntersect || a && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([r], c);else if (a && !t.globals.comboCharts || s && this.showOnIntersect) this.addDatapointEventsListeners(c);else if (!t.globals.axisCharts || \"heatmap\" === e || \"treemap\" === e) {\n          var g = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n          this.addPathsEventListeners(g, c);\n        }\n        if (this.showOnIntersect) {\n          var u = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker\");\n          u.length > 0 && this.addPathsEventListeners(u, c), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c);\n        }\n      }\n    }, {\n      key: \"drawFixedTooltipRect\",\n      value: function () {\n        var t = this.w,\n          e = this.getElTooltip(),\n          i = e.getBoundingClientRect(),\n          a = i.width + 10,\n          s = i.height + 10,\n          r = this.tConfig.fixed.offsetX,\n          o = this.tConfig.fixed.offsetY,\n          n = this.tConfig.fixed.position.toLowerCase();\n        return n.indexOf(\"right\") > -1 && (r = r + t.globals.svgWidth - a + 10), n.indexOf(\"bottom\") > -1 && (o = o + t.globals.svgHeight - s - 10), e.style.left = r + \"px\", e.style.top = o + \"px\", {\n          x: r,\n          y: o,\n          ttWidth: a,\n          ttHeight: s\n        };\n      }\n    }, {\n      key: \"addDatapointEventsListeners\",\n      value: function (t) {\n        var e = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area\");\n        this.addPathsEventListeners(e, t);\n      }\n    }, {\n      key: \"addPathsEventListeners\",\n      value: function (t, e) {\n        for (var i = this, a = function (a) {\n            var s = {\n              paths: t[a],\n              tooltipEl: e.tooltipEl,\n              tooltipY: e.tooltipY,\n              tooltipX: e.tooltipX,\n              elGrid: e.elGrid,\n              hoverArea: e.hoverArea,\n              ttItems: e.ttItems\n            };\n            [\"mousemove\", \"mouseup\", \"touchmove\", \"mouseout\", \"touchend\"].map(function (e) {\n              return t[a].addEventListener(e, i.onSeriesHover.bind(i, s), {\n                capture: !1,\n                passive: !0\n              });\n            });\n          }, s = 0; s < t.length; s++) a(s);\n      }\n    }, {\n      key: \"onSeriesHover\",\n      value: function (t, e) {\n        var i = this,\n          a = Date.now() - this.lastHoverTime;\n        a >= 100 ? this.seriesHover(t, e) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function () {\n          i.seriesHover(t, e);\n        }, 100 - a));\n      }\n    }, {\n      key: \"seriesHover\",\n      value: function (t, e) {\n        var i = this;\n        this.lastHoverTime = Date.now();\n        var a = [],\n          s = this.w;\n        s.config.chart.group && (a = this.ctx.getGroupedCharts()), s.globals.axisCharts && (s.globals.minX === -1 / 0 && s.globals.maxX === 1 / 0 || 0 === s.globals.dataPoints) || (a.length ? a.forEach(function (a) {\n          var s = i.getElTooltip(a),\n            r = {\n              paths: t.paths,\n              tooltipEl: s,\n              tooltipY: t.tooltipY,\n              tooltipX: t.tooltipX,\n              elGrid: t.elGrid,\n              hoverArea: t.hoverArea,\n              ttItems: a.w.globals.tooltip.ttItems\n            };\n          a.w.globals.minX === i.w.globals.minX && a.w.globals.maxX === i.w.globals.maxX && a.w.globals.tooltip.seriesHoverByContext({\n            chartCtx: a,\n            ttCtx: a.w.globals.tooltip,\n            opt: r,\n            e: e\n          });\n        }) : this.seriesHoverByContext({\n          chartCtx: this.ctx,\n          ttCtx: this.w.globals.tooltip,\n          opt: t,\n          e: e\n        }));\n      }\n    }, {\n      key: \"seriesHoverByContext\",\n      value: function (t) {\n        var e = t.chartCtx,\n          i = t.ttCtx,\n          a = t.opt,\n          s = t.e,\n          r = e.w,\n          o = this.getElTooltip(e);\n        if (o) {\n          if (i.tooltipRect = {\n            x: 0,\n            y: 0,\n            ttWidth: o.getBoundingClientRect().width,\n            ttHeight: o.getBoundingClientRect().height\n          }, i.e = s, i.tooltipUtil.hasBars() && !r.globals.comboCharts && !i.isBarShared) if (this.tConfig.onDatasetHover.highlightDataSeries) new V(e).toggleSeriesOnHover(s, s.target.parentNode);\n          i.fixedTooltip && i.drawFixedTooltipRect(), r.globals.axisCharts ? i.axisChartsTooltips({\n            e: s,\n            opt: a,\n            tooltipRect: i.tooltipRect\n          }) : i.nonAxisChartsTooltips({\n            e: s,\n            opt: a,\n            tooltipRect: i.tooltipRect\n          });\n        }\n      }\n    }, {\n      key: \"axisChartsTooltips\",\n      value: function (t) {\n        var e,\n          i,\n          a = t.e,\n          s = t.opt,\n          r = this.w,\n          o = s.elGrid.getBoundingClientRect(),\n          n = \"touchmove\" === a.type ? a.touches[0].clientX : a.clientX,\n          l = \"touchmove\" === a.type ? a.touches[0].clientY : a.clientY;\n        if (this.clientY = l, this.clientX = n, r.globals.capturedSeriesIndex = -1, r.globals.capturedDataPointIndex = -1, l < o.top || l > o.top + o.height) this.handleMouseOut(s);else {\n          if (Array.isArray(this.tConfig.enabledOnSeries) && !r.config.tooltip.shared) {\n            var h = parseInt(s.paths.getAttribute(\"index\"), 10);\n            if (this.tConfig.enabledOnSeries.indexOf(h) < 0) return void this.handleMouseOut(s);\n          }\n          var c = this.getElTooltip(),\n            d = this.getElXCrosshairs(),\n            g = [];\n          r.config.chart.group && (g = this.ctx.getSyncedCharts());\n          var u = r.globals.xyCharts || \"bar\" === r.config.chart.type && !r.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r.globals.comboCharts && this.tooltipUtil.hasBars();\n          if (\"mousemove\" === a.type || \"touchmove\" === a.type || \"mouseup\" === a.type) {\n            if (r.globals.collapsedSeries.length + r.globals.ancillaryCollapsedSeries.length === r.globals.series.length) return;\n            null !== d && d.classList.add(\"apexcharts-active\");\n            var f = this.yaxisTooltips.filter(function (t) {\n              return !0 === t;\n            });\n            if (null !== this.ycrosshairs && f.length && this.ycrosshairs.classList.add(\"apexcharts-active\"), u && !this.showOnIntersect || g.length > 1) this.handleStickyTooltip(a, n, l, s);else if (\"heatmap\" === r.config.chart.type || \"treemap\" === r.config.chart.type) {\n              var p = this.intersect.handleHeatTreeTooltip({\n                e: a,\n                opt: s,\n                x: e,\n                y: i,\n                type: r.config.chart.type\n              });\n              e = p.x, i = p.y, c.style.left = e + \"px\", c.style.top = i + \"px\";\n            } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({\n              e: a,\n              opt: s\n            }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({\n              e: a,\n              opt: s,\n              x: e,\n              y: i\n            });\n            if (this.yaxisTooltips.length) for (var x = 0; x < r.config.yaxis.length; x++) this.axesTooltip.drawYaxisTooltipText(x, l, this.xyRatios);\n            r.globals.dom.baseEl.classList.add(\"apexcharts-tooltip-active\"), s.tooltipEl.classList.add(\"apexcharts-active\");\n          } else \"mouseout\" !== a.type && \"touchend\" !== a.type || this.handleMouseOut(s);\n        }\n      }\n    }, {\n      key: \"nonAxisChartsTooltips\",\n      value: function (t) {\n        var e = t.e,\n          i = t.opt,\n          a = t.tooltipRect,\n          s = this.w,\n          r = i.paths.getAttribute(\"rel\"),\n          o = this.getElTooltip(),\n          n = s.globals.dom.elWrap.getBoundingClientRect();\n        if (\"mousemove\" === e.type || \"touchmove\" === e.type) {\n          s.globals.dom.baseEl.classList.add(\"apexcharts-tooltip-active\"), o.classList.add(\"apexcharts-active\"), this.tooltipLabels.drawSeriesTexts({\n            ttItems: i.ttItems,\n            i: parseInt(r, 10) - 1,\n            shared: !1\n          });\n          var l = s.globals.clientX - n.left - a.ttWidth / 2,\n            h = s.globals.clientY - n.top - a.ttHeight - 10;\n          if (o.style.left = l + \"px\", o.style.top = h + \"px\", s.config.legend.tooltipHoverFormatter) {\n            var c = r - 1,\n              d = (0, s.config.legend.tooltipHoverFormatter)(this.legendLabels[c].getAttribute(\"data:default-text\"), {\n                seriesIndex: c,\n                dataPointIndex: c,\n                w: s\n              });\n            this.legendLabels[c].innerHTML = d;\n          }\n        } else \"mouseout\" !== e.type && \"touchend\" !== e.type || (o.classList.remove(\"apexcharts-active\"), s.globals.dom.baseEl.classList.remove(\"apexcharts-tooltip-active\"), s.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function (t) {\n          var e = t.getAttribute(\"data:default-text\");\n          t.innerHTML = decodeURIComponent(e);\n        }));\n      }\n    }, {\n      key: \"handleStickyTooltip\",\n      value: function (t, e, i, a) {\n        var s = this.w,\n          r = this.tooltipUtil.getNearestValues({\n            context: this,\n            hoverArea: a.hoverArea,\n            elGrid: a.elGrid,\n            clientX: e,\n            clientY: i\n          }),\n          o = r.j,\n          n = r.capturedSeries;\n        s.globals.collapsedSeriesIndices.includes(n) && (n = null);\n        var l = a.elGrid.getBoundingClientRect();\n        if (r.hoverX < 0 || r.hoverX > l.width) this.handleMouseOut(a);else if (null !== n) this.handleStickyCapturedSeries(t, n, a, o);else if (this.tooltipUtil.isXoverlap(o) || s.globals.isBarHorizontal) {\n          var h = s.globals.series.findIndex(function (t, e) {\n            return !s.globals.collapsedSeriesIndices.includes(e);\n          });\n          this.create(t, this, h, o, a.ttItems);\n        }\n      }\n    }, {\n      key: \"handleStickyCapturedSeries\",\n      value: function (t, e, i, a) {\n        var s = this.w;\n        if (!this.tConfig.shared && null === s.globals.series[e][a]) return void this.handleMouseOut(i);\n        if (void 0 !== s.globals.series[e][a]) this.tConfig.shared && this.tooltipUtil.isXoverlap(a) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t, this, e, a, i.ttItems) : this.create(t, this, e, a, i.ttItems, !1);else if (this.tooltipUtil.isXoverlap(a)) {\n          var r = s.globals.series.findIndex(function (t, e) {\n            return !s.globals.collapsedSeriesIndices.includes(e);\n          });\n          this.create(t, this, r, a, i.ttItems);\n        }\n      }\n    }, {\n      key: \"deactivateHoverFilter\",\n      value: function () {\n        for (var t = this.w, e = new k(this.ctx), i = t.globals.dom.Paper.select(\".apexcharts-bar-area\"), a = 0; a < i.length; a++) e.pathMouseLeave(i[a]);\n      }\n    }, {\n      key: \"handleMouseOut\",\n      value: function (t) {\n        var e = this.w,\n          i = this.getElXCrosshairs();\n        if (e.globals.dom.baseEl.classList.remove(\"apexcharts-tooltip-active\"), t.tooltipEl.classList.remove(\"apexcharts-active\"), this.deactivateHoverFilter(), \"bubble\" !== e.config.chart.type && this.marker.resetPointsSize(), null !== i && i.classList.remove(\"apexcharts-active\"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove(\"apexcharts-active\"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove(\"apexcharts-active\"), this.yaxisTooltips.length) {\n          null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n          for (var a = 0; a < this.yaxisTTEls.length; a++) this.yaxisTTEls[a].classList.remove(\"apexcharts-active\");\n        }\n        e.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function (t) {\n          var e = t.getAttribute(\"data:default-text\");\n          t.innerHTML = decodeURIComponent(e);\n        });\n      }\n    }, {\n      key: \"markerClick\",\n      value: function (t, e, i) {\n        var a = this.w;\n        \"function\" == typeof a.config.chart.events.markerClick && a.config.chart.events.markerClick(t, this.ctx, {\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: a\n        }), this.ctx.events.fireEvent(\"markerClick\", [t, this.ctx, {\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: a\n        }]);\n      }\n    }, {\n      key: \"create\",\n      value: function (t, e, i, a, s) {\n        var r,\n          o,\n          n,\n          l,\n          h,\n          c,\n          d,\n          u,\n          f,\n          p,\n          x,\n          b,\n          v,\n          m,\n          y,\n          w,\n          A = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,\n          S = this.w,\n          C = e;\n        \"mouseup\" === t.type && this.markerClick(t, i, a), null === A && (A = this.tConfig.shared);\n        var L = this.tooltipUtil.hasMarkers(i),\n          P = this.tooltipUtil.getElBars();\n        if (S.config.legend.tooltipHoverFormatter) {\n          var M = S.config.legend.tooltipHoverFormatter,\n            I = Array.from(this.legendLabels);\n          I.forEach(function (t) {\n            var e = t.getAttribute(\"data:default-text\");\n            t.innerHTML = decodeURIComponent(e);\n          });\n          for (var T = 0; T < I.length; T++) {\n            var z = I[T],\n              X = parseInt(z.getAttribute(\"i\"), 10),\n              E = decodeURIComponent(z.getAttribute(\"data:default-text\")),\n              Y = M(E, {\n                seriesIndex: A ? X : i,\n                dataPointIndex: a,\n                w: S\n              });\n            if (A) z.innerHTML = S.globals.collapsedSeriesIndices.indexOf(X) < 0 ? Y : E;else if (z.innerHTML = X === i ? Y : E, i === X) break;\n          }\n        }\n        var R = g(g({\n          ttItems: s,\n          i: i,\n          j: a\n        }, void 0 !== (null === (r = S.globals.seriesRange) || void 0 === r || null === (o = r[i]) || void 0 === o || null === (n = o[a]) || void 0 === n || null === (l = n.y[0]) || void 0 === l ? void 0 : l.y1) && {\n          y1: null === (h = S.globals.seriesRange) || void 0 === h || null === (c = h[i]) || void 0 === c || null === (d = c[a]) || void 0 === d || null === (u = d.y[0]) || void 0 === u ? void 0 : u.y1\n        }), void 0 !== (null === (f = S.globals.seriesRange) || void 0 === f || null === (p = f[i]) || void 0 === p || null === (x = p[a]) || void 0 === x || null === (b = x.y[0]) || void 0 === b ? void 0 : b.y2) && {\n          y2: null === (v = S.globals.seriesRange) || void 0 === v || null === (m = v[i]) || void 0 === m || null === (y = m[a]) || void 0 === y || null === (w = y.y[0]) || void 0 === w ? void 0 : w.y2\n        });\n        if (A) {\n          if (C.tooltipLabels.drawSeriesTexts(g(g({}, R), {}, {\n            shared: !this.showOnIntersect && this.tConfig.shared\n          })), L) S.globals.markers.largestSize > 0 ? C.marker.enlargePoints(a) : C.tooltipPosition.moveDynamicPointsOnHover(a);else if (this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(P), this.barSeriesHeight > 0)) {\n            var F = new k(this.ctx),\n              D = S.globals.dom.Paper.select(\".apexcharts-bar-area[j='\".concat(a, \"']\"));\n            this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a, i);\n            for (var H = 0; H < D.length; H++) F.pathMouseEnter(D[H]);\n          }\n        } else C.tooltipLabels.drawSeriesTexts(g({\n          shared: !1\n        }, R)), this.tooltipUtil.hasBars() && C.tooltipPosition.moveStickyTooltipOverBars(a, i), L && C.tooltipPosition.moveMarkers(i, a);\n      }\n    }]), t;\n  }(),\n  kt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.barCtx = e, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);\n    }\n    return s(t, [{\n      key: \"handleBarDataLabels\",\n      value: function (t) {\n        var e,\n          i,\n          a = t.x,\n          s = t.y,\n          r = t.y1,\n          o = t.y2,\n          n = t.i,\n          l = t.j,\n          h = t.realIndex,\n          c = t.columnGroupIndex,\n          d = t.series,\n          u = t.barHeight,\n          f = t.barWidth,\n          p = t.barXPosition,\n          x = t.barYPosition,\n          b = t.visibleSeries,\n          v = t.renderedPath,\n          m = this.w,\n          y = new k(this.barCtx.ctx),\n          w = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[h] : this.barCtx.strokeWidth;\n        m.globals.isXNumeric && !m.globals.isBarHorizontal ? (e = a + parseFloat(f * (b + 1)), i = s + parseFloat(u * (b + 1)) - w) : (e = a + parseFloat(f * b), i = s + parseFloat(u * b));\n        var A,\n          S = null,\n          C = a,\n          L = s,\n          P = {},\n          M = m.config.dataLabels,\n          I = this.barCtx.barOptions.dataLabels,\n          T = this.barCtx.barOptions.dataLabels.total;\n        void 0 !== x && this.barCtx.isRangeBar && (i = x, L = x), void 0 !== p && this.barCtx.isVerticalGroupedRangeBar && (e = p, C = p);\n        var z = M.offsetX,\n          X = M.offsetY,\n          E = {\n            width: 0,\n            height: 0\n          };\n        if (m.config.dataLabels.enabled) {\n          var Y = m.globals.series[n][l];\n          E = y.getTextRects(m.config.dataLabels.formatter ? m.config.dataLabels.formatter(Y, g(g({}, m), {}, {\n            seriesIndex: n,\n            dataPointIndex: l,\n            w: m\n          })) : m.globals.yLabelFormatters[0](Y), parseFloat(M.style.fontSize));\n        }\n        var R = {\n          x: a,\n          y: s,\n          i: n,\n          j: l,\n          realIndex: h,\n          columnGroupIndex: c,\n          renderedPath: v,\n          bcx: e,\n          bcy: i,\n          barHeight: u,\n          barWidth: f,\n          textRects: E,\n          strokeWidth: w,\n          dataLabelsX: C,\n          dataLabelsY: L,\n          dataLabelsConfig: M,\n          barDataLabelsConfig: I,\n          barTotalDataLabelsConfig: T,\n          offX: z,\n          offY: X\n        };\n        return P = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(R) : this.calculateColumnsDataLabelsPosition(R), v.attr({\n          cy: P.bcy,\n          cx: P.bcx,\n          j: l,\n          val: m.globals.series[n][l],\n          barHeight: u,\n          barWidth: f\n        }), A = this.drawCalculatedDataLabels({\n          x: P.dataLabelsX,\n          y: P.dataLabelsY,\n          val: this.barCtx.isRangeBar ? [r, o] : \"100%\" === m.config.chart.stackType ? d[h][l] : m.globals.series[h][l],\n          i: h,\n          j: l,\n          barWidth: f,\n          barHeight: u,\n          textRects: E,\n          dataLabelsConfig: M\n        }), m.config.chart.stacked && T.enabled && (S = this.drawTotalDataLabels({\n          x: P.totalDataLabelsX,\n          y: P.totalDataLabelsY,\n          barWidth: f,\n          barHeight: u,\n          realIndex: h,\n          textAnchor: P.totalDataLabelsAnchor,\n          val: this.getStackedTotalDataLabel({\n            realIndex: h,\n            j: l\n          }),\n          dataLabelsConfig: M,\n          barTotalDataLabelsConfig: T\n        })), {\n          dataLabels: A,\n          totalDataLabels: S\n        };\n      }\n    }, {\n      key: \"getStackedTotalDataLabel\",\n      value: function (t) {\n        var e = t.realIndex,\n          i = t.j,\n          a = this.w,\n          s = this.barCtx.stackedSeriesTotals[i];\n        return this.totalFormatter && (s = this.totalFormatter(s, g(g({}, a), {}, {\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: a\n        }))), s;\n      }\n    }, {\n      key: \"calculateColumnsDataLabelsPosition\",\n      value: function (t) {\n        var e = this.w,\n          i = t.i,\n          a = t.j,\n          s = t.realIndex;\n        t.columnGroupIndex;\n        var r,\n          o,\n          n = t.y,\n          l = t.bcx,\n          h = t.barWidth,\n          c = t.barHeight,\n          d = t.textRects,\n          g = t.dataLabelsX,\n          u = t.dataLabelsY,\n          f = t.dataLabelsConfig,\n          p = t.barDataLabelsConfig,\n          x = t.barTotalDataLabelsConfig,\n          b = t.strokeWidth,\n          v = t.offX,\n          m = t.offY,\n          y = l;\n        c = Math.abs(c);\n        var w = \"vertical\" === e.config.plotOptions.bar.dataLabels.orientation,\n          A = this.barCtx.barHelpers.getZeroValueEncounters({\n            i: i,\n            j: a\n          }).zeroEncounters;\n        l -= b / 2;\n        var S = e.globals.gridWidth / e.globals.dataPoints;\n        if (this.barCtx.isVerticalGroupedRangeBar ? g += h / 2 : (g = e.globals.isXNumeric ? l - h / 2 + v : l - S + h / 2 + v, A > 0 && e.config.plotOptions.bar.hideZeroBarsWhenGrouped && (g -= h * A)), w) {\n          g = g + d.height / 2 - b / 2 - 2;\n        }\n        var C = e.globals.series[i][a] < 0,\n          L = n;\n        switch (this.barCtx.isReversed && (L = n + (C ? c : -c)), p.position) {\n          case \"center\":\n            u = w ? C ? L - c / 2 + m : L + c / 2 - m : C ? L - c / 2 + d.height / 2 + m : L + c / 2 + d.height / 2 - m;\n            break;\n          case \"bottom\":\n            u = w ? C ? L - c + m : L + c - m : C ? L - c + d.height + b + m : L + c - d.height / 2 + b - m;\n            break;\n          case \"top\":\n            u = w ? C ? L + m : L - m : C ? L - d.height / 2 - m : L + d.height + m;\n        }\n        if (this.barCtx.lastActiveBarSerieIndex === s && x.enabled) {\n          var P = new k(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({\n            realIndex: s,\n            j: a\n          }), f.fontSize);\n          r = C ? L - P.height / 2 - m - x.offsetY + 18 : L + P.height + m + x.offsetY - 18;\n          var M = S;\n          o = y + (e.globals.isXNumeric ? -h * e.globals.barGroups.length / 2 : e.globals.barGroups.length * h / 2 - (e.globals.barGroups.length - 1) * h - M) + x.offsetX;\n        }\n        return e.config.chart.stacked || (u < 0 ? u = 0 + b : u + d.height / 3 > e.globals.gridHeight && (u = e.globals.gridHeight - b)), {\n          bcx: l,\n          bcy: n,\n          dataLabelsX: g,\n          dataLabelsY: u,\n          totalDataLabelsX: o,\n          totalDataLabelsY: r,\n          totalDataLabelsAnchor: \"middle\"\n        };\n      }\n    }, {\n      key: \"calculateBarsDataLabelsPosition\",\n      value: function (t) {\n        var e = this.w,\n          i = t.x,\n          a = t.i,\n          s = t.j,\n          r = t.realIndex,\n          o = t.bcy,\n          n = t.barHeight,\n          l = t.barWidth,\n          h = t.textRects,\n          c = t.dataLabelsX,\n          d = t.strokeWidth,\n          g = t.dataLabelsConfig,\n          u = t.barDataLabelsConfig,\n          f = t.barTotalDataLabelsConfig,\n          p = t.offX,\n          x = t.offY,\n          b = e.globals.gridHeight / e.globals.dataPoints;\n        l = Math.abs(l);\n        var v,\n          m,\n          y = o - (this.barCtx.isRangeBar ? 0 : b) + n / 2 + h.height / 2 + x - 3,\n          w = \"start\",\n          A = e.globals.series[a][s] < 0,\n          S = i;\n        switch (this.barCtx.isReversed && (S = i + (A ? -l : l), w = A ? \"start\" : \"end\"), u.position) {\n          case \"center\":\n            c = A ? S + l / 2 - p : Math.max(h.width / 2, S - l / 2) + p;\n            break;\n          case \"bottom\":\n            c = A ? S + l - d - p : S - l + d + p;\n            break;\n          case \"top\":\n            c = A ? S - d - p : S - d + p;\n        }\n        if (this.barCtx.lastActiveBarSerieIndex === r && f.enabled) {\n          var C = new k(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({\n            realIndex: r,\n            j: s\n          }), g.fontSize);\n          A ? (v = S - d - p - f.offsetX, w = \"end\") : v = S + p + f.offsetX + (this.barCtx.isReversed ? -(l + d) : d), m = y - h.height / 2 + C.height / 2 + f.offsetY + d;\n        }\n        return e.config.chart.stacked || (\"start\" === g.textAnchor ? c - h.width < 0 ? c = A ? h.width + d : d : c + h.width > e.globals.gridWidth && (c = A ? e.globals.gridWidth - d : e.globals.gridWidth - h.width - d) : \"middle\" === g.textAnchor ? c - h.width / 2 < 0 ? c = h.width / 2 + d : c + h.width / 2 > e.globals.gridWidth && (c = e.globals.gridWidth - h.width / 2 - d) : \"end\" === g.textAnchor && (c < 1 ? c = h.width + d : c + 1 > e.globals.gridWidth && (c = e.globals.gridWidth - h.width - d))), {\n          bcx: i,\n          bcy: o,\n          dataLabelsX: c,\n          dataLabelsY: y,\n          totalDataLabelsX: v,\n          totalDataLabelsY: m,\n          totalDataLabelsAnchor: w\n        };\n      }\n    }, {\n      key: \"drawCalculatedDataLabels\",\n      value: function (t) {\n        var e = t.x,\n          i = t.y,\n          a = t.val,\n          s = t.i,\n          r = t.j,\n          o = t.textRects,\n          n = t.barHeight,\n          l = t.barWidth,\n          h = t.dataLabelsConfig,\n          c = this.w,\n          d = \"rotate(0)\";\n        \"vertical\" === c.config.plotOptions.bar.dataLabels.orientation && (d = \"rotate(-90, \".concat(e, \", \").concat(i, \")\"));\n        var u = new G(this.barCtx.ctx),\n          f = new k(this.barCtx.ctx),\n          p = h.formatter,\n          x = null,\n          b = c.globals.collapsedSeriesIndices.indexOf(s) > -1;\n        if (h.enabled && !b) {\n          x = f.group({\n            class: \"apexcharts-data-labels\",\n            transform: d\n          });\n          var v = \"\";\n          void 0 !== a && (v = p(a, g(g({}, c), {}, {\n            seriesIndex: s,\n            dataPointIndex: r,\n            w: c\n          }))), !a && c.config.plotOptions.bar.hideZeroBarsWhenGrouped && (v = \"\");\n          var m = c.globals.series[s][r] < 0,\n            y = c.config.plotOptions.bar.dataLabels.position;\n          if (\"vertical\" === c.config.plotOptions.bar.dataLabels.orientation && (\"top\" === y && (h.textAnchor = m ? \"end\" : \"start\"), \"center\" === y && (h.textAnchor = \"middle\"), \"bottom\" === y && (h.textAnchor = m ? \"end\" : \"start\")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) l < f.getTextRects(v, parseFloat(h.style.fontSize)).width && (v = \"\");\n          c.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? o.width / 1.6 > Math.abs(l) && (v = \"\") : o.height / 1.6 > Math.abs(n) && (v = \"\"));\n          var w = g({}, h);\n          this.barCtx.isHorizontal && a < 0 && (\"start\" === h.textAnchor ? w.textAnchor = \"end\" : \"end\" === h.textAnchor && (w.textAnchor = \"start\")), u.plotDataLabelsText({\n            x: e,\n            y: i,\n            text: v,\n            i: s,\n            j: r,\n            parent: x,\n            dataLabelsConfig: w,\n            alwaysDrawDataLabel: !0,\n            offsetCorrection: !0\n          });\n        }\n        return x;\n      }\n    }, {\n      key: \"drawTotalDataLabels\",\n      value: function (t) {\n        var e = t.x,\n          i = t.y,\n          a = t.val,\n          s = t.realIndex,\n          r = t.textAnchor,\n          o = t.barTotalDataLabelsConfig;\n        this.w;\n        var n,\n          l = new k(this.barCtx.ctx);\n        return o.enabled && void 0 !== e && void 0 !== i && this.barCtx.lastActiveBarSerieIndex === s && (n = l.drawText({\n          x: e,\n          y: i,\n          foreColor: o.style.color,\n          text: a,\n          textAnchor: r,\n          fontFamily: o.style.fontFamily,\n          fontSize: o.style.fontSize,\n          fontWeight: o.style.fontWeight\n        })), n;\n      }\n    }]), t;\n  }(),\n  At = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.barCtx = e;\n    }\n    return s(t, [{\n      key: \"initVariables\",\n      value: function (t) {\n        var e = this.w;\n        this.barCtx.series = t, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;\n        for (var i = 0; i < t.length; i++) if (t[i].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t[i].length), e.globals.isXNumeric) for (var a = 0; a < t[i].length; a++) e.globals.seriesX[i][a] > e.globals.minX && e.globals.seriesX[i][a] < e.globals.maxX && this.barCtx.visibleItems++;else this.barCtx.visibleItems = e.globals.dataPoints;\n        this.arrBorderRadius = this.createBorderRadiusArr(e.globals.series), 0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], e.globals.comboCharts || this.checkZeroSeries({\n          series: t\n        });\n      }\n    }, {\n      key: \"initialPositions\",\n      value: function () {\n        var t,\n          e,\n          i,\n          a,\n          s,\n          r,\n          o,\n          n,\n          l = this.w,\n          h = l.globals.dataPoints;\n        this.barCtx.isRangeBar && (h = l.globals.labels.length);\n        var c = this.barCtx.seriesLen;\n        if (l.config.plotOptions.bar.rangeBarGroupRows && (c = 1), this.barCtx.isHorizontal) s = (i = l.globals.gridHeight / h) / c, l.globals.isXNumeric && (s = (i = l.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s = s * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, -1 === String(this.barCtx.barOptions.barHeight).indexOf(\"%\") && (s = parseInt(this.barCtx.barOptions.barHeight, 10)), n = this.barCtx.baseLineInvertedY + l.globals.padHorizontal + (this.barCtx.isReversed ? l.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), this.barCtx.isFunnel && (n = l.globals.gridWidth / 2), e = (i - s * this.barCtx.seriesLen) / 2;else {\n          if (a = l.globals.gridWidth / this.barCtx.visibleItems, l.config.xaxis.convertedCatToNumeric && (a = l.globals.gridWidth / l.globals.dataPoints), r = a / c * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l.globals.isXNumeric) {\n            var d = this.barCtx.xRatio;\n            l.globals.minXDiff && .5 !== l.globals.minXDiff && l.globals.minXDiff / d > 0 && (a = l.globals.minXDiff / d), (r = a / c * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r = 1);\n          }\n          -1 === String(this.barCtx.barOptions.columnWidth).indexOf(\"%\") && (r = parseInt(this.barCtx.barOptions.columnWidth, 10)), o = l.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.translationsIndex] - (this.barCtx.isReversed ? l.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.translationsIndex] : 0), t = l.globals.padHorizontal + (a - r * this.barCtx.seriesLen) / 2;\n        }\n        return l.globals.barHeight = s, l.globals.barWidth = r, {\n          x: t,\n          y: e,\n          yDivision: i,\n          xDivision: a,\n          barHeight: s,\n          barWidth: r,\n          zeroH: o,\n          zeroW: n\n        };\n      }\n    }, {\n      key: \"initializeStackedPrevVars\",\n      value: function (t) {\n        t.w.globals.seriesGroups.forEach(function (e) {\n          t[e] || (t[e] = {}), t[e].prevY = [], t[e].prevX = [], t[e].prevYF = [], t[e].prevXF = [], t[e].prevYVal = [], t[e].prevXVal = [];\n        });\n      }\n    }, {\n      key: \"initializeStackedXYVars\",\n      value: function (t) {\n        t.w.globals.seriesGroups.forEach(function (e) {\n          t[e] || (t[e] = {}), t[e].xArrj = [], t[e].xArrjF = [], t[e].xArrjVal = [], t[e].yArrj = [], t[e].yArrjF = [], t[e].yArrjVal = [];\n        });\n      }\n    }, {\n      key: \"getPathFillColor\",\n      value: function (t, e, i, a) {\n        var s,\n          r,\n          o,\n          n,\n          l,\n          h = this.w,\n          c = this.barCtx.ctx.fill,\n          d = null,\n          g = this.barCtx.barOptions.distributed ? i : e;\n        this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function (a) {\n          t[e][i] >= a.from && t[e][i] <= a.to && (d = a.color);\n        });\n        return null !== (s = h.config.series[e].data[i]) && void 0 !== s && s.fillColor && (d = h.config.series[e].data[i].fillColor), c.fillPath({\n          seriesNumber: this.barCtx.barOptions.distributed ? g : a,\n          dataPointIndex: i,\n          color: d,\n          value: t[e][i],\n          fillConfig: null === (r = h.config.series[e].data[i]) || void 0 === r ? void 0 : r.fill,\n          fillType: null !== (o = h.config.series[e].data[i]) && void 0 !== o && null !== (n = o.fill) && void 0 !== n && n.type ? null === (l = h.config.series[e].data[i]) || void 0 === l ? void 0 : l.fill.type : Array.isArray(h.config.fill.type) ? h.config.fill.type[a] : h.config.fill.type\n        });\n      }\n    }, {\n      key: \"getStrokeWidth\",\n      value: function (t, e, i) {\n        var a = 0,\n          s = this.w;\n        return this.barCtx.series[t][e] ? this.barCtx.isNullValue = !1 : this.barCtx.isNullValue = !0, s.config.stroke.show && (this.barCtx.isNullValue || (a = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i] : this.barCtx.strokeWidth)), a;\n      }\n    }, {\n      key: \"createBorderRadiusArr\",\n      value: function (t) {\n        var e = this.w,\n          i = !this.w.config.chart.stacked || \"last\" !== e.config.plotOptions.bar.borderRadiusWhenStacked || e.config.plotOptions.bar.borderRadius <= 0,\n          a = t.length,\n          s = t[0].length,\n          o = Array.from({\n            length: a\n          }, function () {\n            return Array(s).fill(i ? \"top\" : \"none\");\n          });\n        if (i) return o;\n        for (var n = 0; n < s; n++) {\n          for (var l = [], h = [], c = 0, d = 0; d < a; d++) {\n            var g = t[d][n];\n            g > 0 ? (l.push(d), c++) : g < 0 && (h.push(d), c++);\n          }\n          if (l.length > 0 && 0 === h.length) {\n            if (1 === l.length) o[l[0]][n] = \"both\";else {\n              var u,\n                f = l[0],\n                p = l[l.length - 1],\n                x = r(l);\n              try {\n                for (x.s(); !(u = x.n()).done;) {\n                  var b = u.value;\n                  o[b][n] = b === f ? \"bottom\" : b === p ? \"top\" : \"none\";\n                }\n              } catch (t) {\n                x.e(t);\n              } finally {\n                x.f();\n              }\n            }\n          } else if (h.length > 0 && 0 === l.length) {\n            if (1 === h.length) o[h[0]][n] = \"both\";else {\n              var v,\n                m = h[0],\n                y = h[h.length - 1],\n                w = r(h);\n              try {\n                for (w.s(); !(v = w.n()).done;) {\n                  var k = v.value;\n                  o[k][n] = k === m ? \"bottom\" : k === y ? \"top\" : \"none\";\n                }\n              } catch (t) {\n                w.e(t);\n              } finally {\n                w.f();\n              }\n            }\n          } else if (l.length > 0 && h.length > 0) {\n            var A,\n              S = l[l.length - 1],\n              C = r(l);\n            try {\n              for (C.s(); !(A = C.n()).done;) {\n                var L = A.value;\n                o[L][n] = L === S ? \"top\" : \"none\";\n              }\n            } catch (t) {\n              C.e(t);\n            } finally {\n              C.f();\n            }\n            var P,\n              M = h[h.length - 1],\n              I = r(h);\n            try {\n              for (I.s(); !(P = I.n()).done;) {\n                var T = P.value;\n                o[T][n] = T === M ? \"bottom\" : \"none\";\n              }\n            } catch (t) {\n              I.e(t);\n            } finally {\n              I.f();\n            }\n          } else if (1 === c) {\n            o[l[0] || h[0]][n] = \"both\";\n          }\n        }\n        return o;\n      }\n    }, {\n      key: \"barBackground\",\n      value: function (t) {\n        var e = t.j,\n          i = t.i,\n          a = t.x1,\n          s = t.x2,\n          r = t.y1,\n          o = t.y2,\n          n = t.elSeries,\n          l = this.w,\n          h = new k(this.barCtx.ctx),\n          c = new V(this.barCtx.ctx).getActiveConfigSeriesIndex();\n        if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c === i) {\n          e >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e %= this.barCtx.barOptions.colors.backgroundBarColors.length);\n          var d = this.barCtx.barOptions.colors.backgroundBarColors[e],\n            g = h.drawRect(void 0 !== a ? a : 0, void 0 !== r ? r : 0, void 0 !== s ? s : l.globals.gridWidth, void 0 !== o ? o : l.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d, this.barCtx.barOptions.colors.backgroundBarOpacity);\n          n.add(g), g.node.classList.add(\"apexcharts-backgroundBar\");\n        }\n      }\n    }, {\n      key: \"getColumnPaths\",\n      value: function (t) {\n        var e,\n          i = t.barWidth,\n          a = t.barXPosition,\n          s = t.y1,\n          r = t.y2,\n          o = t.strokeWidth,\n          n = t.isReversed,\n          l = t.series,\n          h = t.seriesGroup,\n          c = t.realIndex,\n          d = t.i,\n          g = t.j,\n          u = t.w,\n          f = new k(this.barCtx.ctx);\n        (o = Array.isArray(o) ? o[c] : o) || (o = 0);\n        var p = i,\n          x = a;\n        null !== (e = u.config.series[c].data[g]) && void 0 !== e && e.columnWidthOffset && (x = a - u.config.series[c].data[g].columnWidthOffset / 2, p = i + u.config.series[c].data[g].columnWidthOffset);\n        var b = o / 2,\n          v = x + b,\n          m = x + p - b,\n          y = (l[d][g] >= 0 ? 1 : -1) * (n ? -1 : 1);\n        s += .001 - b * y, r += .001 + b * y;\n        var w = f.move(v, s),\n          A = f.move(v, s),\n          S = f.line(m, s);\n        if (u.globals.previousPaths.length > 0 && (A = this.barCtx.getPreviousPath(c, g, !1)), w = w + f.line(v, r) + f.line(m, r) + S + (\"around\" === u.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[c][g] ? \" Z\" : \" z\"), A = A + f.line(v, s) + S + S + S + S + S + f.line(v, s) + (\"around\" === u.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[c][g] ? \" Z\" : \" z\"), \"none\" !== this.arrBorderRadius[c][g] && (w = f.roundPathCorners(w, u.config.plotOptions.bar.borderRadius)), u.config.chart.stacked) {\n          var C = this.barCtx;\n          (C = this.barCtx[h]).yArrj.push(r - b * y), C.yArrjF.push(Math.abs(s - r + o * y)), C.yArrjVal.push(this.barCtx.series[d][g]);\n        }\n        return {\n          pathTo: w,\n          pathFrom: A\n        };\n      }\n    }, {\n      key: \"getBarpaths\",\n      value: function (t) {\n        var e,\n          i = t.barYPosition,\n          a = t.barHeight,\n          s = t.x1,\n          r = t.x2,\n          o = t.strokeWidth,\n          n = t.isReversed,\n          l = t.series,\n          h = t.seriesGroup,\n          c = t.realIndex,\n          d = t.i,\n          g = t.j,\n          u = t.w,\n          f = new k(this.barCtx.ctx);\n        (o = Array.isArray(o) ? o[c] : o) || (o = 0);\n        var p = i,\n          x = a;\n        null !== (e = u.config.series[c].data[g]) && void 0 !== e && e.barHeightOffset && (p = i - u.config.series[c].data[g].barHeightOffset / 2, x = a + u.config.series[c].data[g].barHeightOffset);\n        var b = o / 2,\n          v = p + b,\n          m = p + x - b,\n          y = (l[d][g] >= 0 ? 1 : -1) * (n ? -1 : 1);\n        s += .001 + b * y, r += .001 - b * y;\n        var w = f.move(s, v),\n          A = f.move(s, v);\n        u.globals.previousPaths.length > 0 && (A = this.barCtx.getPreviousPath(c, g, !1));\n        var S = f.line(s, m);\n        if (w = w + f.line(r, v) + f.line(r, m) + S + (\"around\" === u.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[c][g] ? \" Z\" : \" z\"), A = A + f.line(s, v) + S + S + S + S + S + f.line(s, v) + (\"around\" === u.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[c][g] ? \" Z\" : \" z\"), \"none\" !== this.arrBorderRadius[c][g] && (w = f.roundPathCorners(w, u.config.plotOptions.bar.borderRadius)), u.config.chart.stacked) {\n          var C = this.barCtx;\n          (C = this.barCtx[h]).xArrj.push(r + b * y), C.xArrjF.push(Math.abs(s - r - o * y)), C.xArrjVal.push(this.barCtx.series[d][g]);\n        }\n        return {\n          pathTo: w,\n          pathFrom: A\n        };\n      }\n    }, {\n      key: \"checkZeroSeries\",\n      value: function (t) {\n        for (var e = t.series, i = this.w, a = 0; a < e.length; a++) {\n          for (var s = 0, r = 0; r < e[i.globals.maxValsInArrayIndex].length; r++) s += e[a][r];\n          0 === s && this.barCtx.zeroSerieses.push(a);\n        }\n      }\n    }, {\n      key: \"getXForValue\",\n      value: function (t, e) {\n        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e : null;\n        return null != t && (i = e + t / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t / this.barCtx.invertedYRatio : 0)), i;\n      }\n    }, {\n      key: \"getYForValue\",\n      value: function (t, e, i) {\n        var a = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3] ? e : null;\n        return null != t && (a = e - t / this.barCtx.yRatio[i] + 2 * (this.barCtx.isReversed ? t / this.barCtx.yRatio[i] : 0)), a;\n      }\n    }, {\n      key: \"getGoalValues\",\n      value: function (t, e, i, a, s, r) {\n        var o = this,\n          l = this.w,\n          h = [],\n          c = function (a, s) {\n            var l;\n            h.push((n(l = {}, t, \"x\" === t ? o.getXForValue(a, e, !1) : o.getYForValue(a, i, r, !1)), n(l, \"attrs\", s), l));\n          };\n        if (l.globals.seriesGoals[a] && l.globals.seriesGoals[a][s] && Array.isArray(l.globals.seriesGoals[a][s]) && l.globals.seriesGoals[a][s].forEach(function (t) {\n          c(t.value, t);\n        }), this.barCtx.barOptions.isDumbbell && l.globals.seriesRange.length) {\n          var d = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : l.globals.colors,\n            u = {\n              strokeHeight: \"x\" === t ? 0 : l.globals.markers.size[a],\n              strokeWidth: \"x\" === t ? l.globals.markers.size[a] : 0,\n              strokeDashArray: 0,\n              strokeLineCap: \"round\",\n              strokeColor: Array.isArray(d[a]) ? d[a][0] : d[a]\n            };\n          c(l.globals.seriesRangeStart[a][s], u), c(l.globals.seriesRangeEnd[a][s], g(g({}, u), {}, {\n            strokeColor: Array.isArray(d[a]) ? d[a][1] : d[a]\n          }));\n        }\n        return h;\n      }\n    }, {\n      key: \"drawGoalLine\",\n      value: function (t) {\n        var e = t.barXPosition,\n          i = t.barYPosition,\n          a = t.goalX,\n          s = t.goalY,\n          r = t.barWidth,\n          o = t.barHeight,\n          n = new k(this.barCtx.ctx),\n          l = n.group({\n            className: \"apexcharts-bar-goals-groups\"\n          });\n        l.node.classList.add(\"apexcharts-element-hidden\"), this.barCtx.w.globals.delayedElements.push({\n          el: l.node\n        }), l.attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(this.barCtx.w.globals.cuid, \")\"));\n        var h = null;\n        return this.barCtx.isHorizontal ? Array.isArray(a) && a.forEach(function (t) {\n          if (t.x >= -1 && t.x <= n.w.globals.gridWidth + 1) {\n            var e = void 0 !== t.attrs.strokeHeight ? t.attrs.strokeHeight : o / 2,\n              a = i + e + o / 2;\n            h = n.drawLine(t.x, a - 2 * e, t.x, a, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeWidth ? t.attrs.strokeWidth : 2, t.attrs.strokeLineCap), l.add(h);\n          }\n        }) : Array.isArray(s) && s.forEach(function (t) {\n          if (t.y >= -1 && t.y <= n.w.globals.gridHeight + 1) {\n            var i = void 0 !== t.attrs.strokeWidth ? t.attrs.strokeWidth : r / 2,\n              a = e + i + r / 2;\n            h = n.drawLine(a - 2 * i, t.y, a, t.y, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeHeight ? t.attrs.strokeHeight : 2, t.attrs.strokeLineCap), l.add(h);\n          }\n        }), l;\n      }\n    }, {\n      key: \"drawBarShadow\",\n      value: function (t) {\n        var e = t.prevPaths,\n          i = t.currPaths,\n          a = t.color,\n          s = this.w,\n          r = e.x,\n          o = e.x1,\n          n = e.barYPosition,\n          l = i.x,\n          h = i.x1,\n          c = i.barYPosition,\n          d = n + i.barHeight,\n          g = new k(this.barCtx.ctx),\n          u = new m(),\n          f = g.move(o, d) + g.line(r, d) + g.line(l, c) + g.line(h, c) + g.line(o, d) + (\"around\" === s.config.plotOptions.bar.borderRadiusApplication || \"both\" === this.arrBorderRadius[realIndex][j] ? \" Z\" : \" z\");\n        return g.drawPath({\n          d: f,\n          fill: u.shadeColor(.5, m.rgb2hex(a)),\n          stroke: \"none\",\n          strokeWidth: 0,\n          fillOpacity: 1,\n          classes: \"apexcharts-bar-shadows\"\n        });\n      }\n    }, {\n      key: \"getZeroValueEncounters\",\n      value: function (t) {\n        var e,\n          i = t.i,\n          a = t.j,\n          s = this.w,\n          r = 0,\n          o = 0;\n        return (s.config.plotOptions.bar.horizontal ? s.globals.series.map(function (t, e) {\n          return e;\n        }) : (null === (e = s.globals.columnSeries) || void 0 === e ? void 0 : e.i.map(function (t) {\n          return t;\n        })) || []).forEach(function (t) {\n          var e = s.globals.seriesPercent[t][a];\n          e && r++, t < i && 0 === e && o++;\n        }), {\n          nonZeroColumns: r,\n          zeroEncounters: o\n        };\n      }\n    }, {\n      key: \"getGroupIndex\",\n      value: function (t) {\n        var e = this.w,\n          i = e.globals.seriesGroups.findIndex(function (i) {\n            return i.indexOf(e.globals.seriesNames[t]) > -1;\n          }),\n          a = this.barCtx.columnGroupIndices,\n          s = a.indexOf(i);\n        return s < 0 && (a.push(i), s = a.length - 1), {\n          groupIndex: i,\n          columnGroupIndex: s\n        };\n      }\n    }]), t;\n  }(),\n  St = function () {\n    function t(e, a) {\n      i(this, t), this.ctx = e, this.w = e.w;\n      var s = this.w;\n      this.barOptions = s.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s.config.stroke.width, this.isNullValue = !1, this.isRangeBar = s.globals.seriesRange.length && this.isHorizontal, this.isVerticalGroupedRangeBar = !s.globals.isBarHorizontal && s.globals.seriesRange.length && s.config.plotOptions.bar.rangeBarGroupRows, this.isFunnel = this.barOptions.isFunnel, this.xyRatios = a, null !== this.xyRatios && (this.xRatio = a.xRatio, this.yRatio = a.yRatio, this.invertedXRatio = a.invertedXRatio, this.invertedYRatio = a.invertedYRatio, this.baseLineY = a.baseLineY, this.baseLineInvertedY = a.baseLineInvertedY), this.yaxisIndex = 0, this.translationsIndex = 0, this.seriesLen = 0, this.pathArr = [];\n      var r = new V(this.ctx);\n      this.lastActiveBarSerieIndex = r.getActiveConfigSeriesIndex(\"desc\", [\"bar\", \"column\"]), this.columnGroupIndices = [];\n      var o = r.getBarSeriesIndices(),\n        n = new A(this.ctx);\n      this.stackedSeriesTotals = n.getStackedSeriesTotals(this.w.config.series.map(function (t, e) {\n        return -1 === o.indexOf(e) ? e : -1;\n      }).filter(function (t) {\n        return -1 !== t;\n      })), this.barHelpers = new At(this);\n    }\n    return s(t, [{\n      key: \"draw\",\n      value: function (t, e) {\n        var i = this.w,\n          a = new k(this.ctx),\n          s = new A(this.ctx, i);\n        t = s.getLogSeries(t), this.series = t, this.yRatio = s.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);\n        var r = a.group({\n          class: \"apexcharts-bar-series apexcharts-plot-series\"\n        });\n        i.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn(\"WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts\");\n        for (var o = 0, n = 0; o < t.length; o++, n++) {\n          var l,\n            h,\n            c,\n            d,\n            u = void 0,\n            f = void 0,\n            p = [],\n            x = [],\n            b = i.globals.comboCharts ? e[o] : o,\n            v = this.barHelpers.getGroupIndex(b).columnGroupIndex,\n            y = a.group({\n              class: \"apexcharts-series\",\n              rel: o + 1,\n              seriesName: m.escapeString(i.globals.seriesNames[b]),\n              \"data:realIndex\": b\n            });\n          this.ctx.series.addCollapsedClassToSeries(y, b), t[o].length > 0 && (this.visibleI = this.visibleI + 1);\n          var w = 0,\n            S = 0;\n          this.yRatio.length > 1 && (this.yaxisIndex = i.globals.seriesYAxisReverseMap[b], this.translationsIndex = b);\n          var C = this.translationsIndex;\n          this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed;\n          var L = this.barHelpers.initialPositions();\n          f = L.y, w = L.barHeight, h = L.yDivision, d = L.zeroW, u = L.x, S = L.barWidth, l = L.xDivision, c = L.zeroH, this.horizontal || x.push(u + S / 2);\n          var P = a.group({\n            class: \"apexcharts-datalabels\",\n            \"data:realIndex\": b\n          });\n          i.globals.delayedElements.push({\n            el: P.node\n          }), P.node.classList.add(\"apexcharts-element-hidden\");\n          var M = a.group({\n              class: \"apexcharts-bar-goals-markers\"\n            }),\n            I = a.group({\n              class: \"apexcharts-bar-shadows\"\n            });\n          i.globals.delayedElements.push({\n            el: I.node\n          }), I.node.classList.add(\"apexcharts-element-hidden\");\n          for (var T = 0; T < t[o].length; T++) {\n            var z = this.barHelpers.getStrokeWidth(o, T, b),\n              X = null,\n              E = {\n                indexes: {\n                  i: o,\n                  j: T,\n                  realIndex: b,\n                  translationsIndex: C,\n                  bc: n\n                },\n                x: u,\n                y: f,\n                strokeWidth: z,\n                elSeries: y\n              };\n            this.isHorizontal ? (X = this.drawBarPaths(g(g({}, E), {}, {\n              barHeight: w,\n              zeroW: d,\n              yDivision: h\n            })), S = this.series[o][T] / this.invertedYRatio) : (X = this.drawColumnPaths(g(g({}, E), {}, {\n              xDivision: l,\n              barWidth: S,\n              zeroH: c\n            })), w = this.series[o][T] / this.yRatio[C]);\n            var Y = this.barHelpers.getPathFillColor(t, o, T, b);\n            if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && T > 0) {\n              var R = this.barHelpers.drawBarShadow({\n                color: \"string\" == typeof Y && -1 === (null == Y ? void 0 : Y.indexOf(\"url\")) ? Y : m.hexToRgba(i.globals.colors[o]),\n                prevPaths: this.pathArr[this.pathArr.length - 1],\n                currPaths: X\n              });\n              R && I.add(R);\n            }\n            this.pathArr.push(X);\n            var F = this.barHelpers.drawGoalLine({\n              barXPosition: X.barXPosition,\n              barYPosition: X.barYPosition,\n              goalX: X.goalX,\n              goalY: X.goalY,\n              barHeight: w,\n              barWidth: S\n            });\n            F && M.add(F), f = X.y, u = X.x, T > 0 && x.push(u + S / 2), p.push(f), this.renderSeries({\n              realIndex: b,\n              pathFill: Y,\n              j: T,\n              i: o,\n              columnGroupIndex: v,\n              pathFrom: X.pathFrom,\n              pathTo: X.pathTo,\n              strokeWidth: z,\n              elSeries: y,\n              x: u,\n              y: f,\n              series: t,\n              barHeight: Math.abs(X.barHeight ? X.barHeight : w),\n              barWidth: Math.abs(X.barWidth ? X.barWidth : S),\n              elDataLabelsWrap: P,\n              elGoalsMarkers: M,\n              elBarShadows: I,\n              visibleSeries: this.visibleI,\n              type: \"bar\"\n            });\n          }\n          i.globals.seriesXvalues[b] = x, i.globals.seriesYvalues[b] = p, r.add(y);\n        }\n        return r;\n      }\n    }, {\n      key: \"renderSeries\",\n      value: function (t) {\n        var e = t.realIndex,\n          i = t.pathFill,\n          a = t.lineFill,\n          s = t.j,\n          r = t.i,\n          o = t.columnGroupIndex,\n          n = t.pathFrom,\n          l = t.pathTo,\n          h = t.strokeWidth,\n          c = t.elSeries,\n          d = t.x,\n          g = t.y,\n          u = t.y1,\n          f = t.y2,\n          p = t.series,\n          x = t.barHeight,\n          b = t.barWidth,\n          v = t.barXPosition,\n          m = t.barYPosition,\n          y = t.elDataLabelsWrap,\n          A = t.elGoalsMarkers,\n          S = t.elBarShadows,\n          C = t.visibleSeries,\n          L = t.type,\n          P = t.classes,\n          M = this.w,\n          I = new k(this.ctx);\n        if (!a) {\n          var T = \"function\" == typeof M.globals.stroke.colors[e] ? function (t) {\n            var e,\n              i = M.config.stroke.colors;\n            return Array.isArray(i) && i.length > 0 && ((e = i[t]) || (e = \"\"), \"function\" == typeof e) ? e({\n              value: M.globals.series[t][s],\n              dataPointIndex: s,\n              w: M\n            }) : e;\n          }(e) : M.globals.stroke.colors[e];\n          a = this.barOptions.distributed ? M.globals.stroke.colors[s] : T;\n        }\n        M.config.series[r].data[s] && M.config.series[r].data[s].strokeColor && (a = M.config.series[r].data[s].strokeColor), this.isNullValue && (i = \"none\");\n        var z = s / M.config.chart.animations.animateGradually.delay * (M.config.chart.animations.speed / M.globals.dataPoints) / 2.4,\n          X = I.renderPaths({\n            i: r,\n            j: s,\n            realIndex: e,\n            pathFrom: n,\n            pathTo: l,\n            stroke: a,\n            strokeWidth: h,\n            strokeLineCap: M.config.stroke.lineCap,\n            fill: i,\n            animationDelay: z,\n            initialSpeed: M.config.chart.animations.speed,\n            dataChangeSpeed: M.config.chart.animations.dynamicAnimation.speed,\n            className: \"apexcharts-\".concat(L, \"-area \").concat(P),\n            chartType: L\n          });\n        X.attr(\"clip-path\", \"url(#gridRectBarMask\".concat(M.globals.cuid, \")\"));\n        var E = M.config.forecastDataPoints;\n        E.count > 0 && s >= M.globals.dataPoints - E.count && (X.node.setAttribute(\"stroke-dasharray\", E.dashArray), X.node.setAttribute(\"stroke-width\", E.strokeWidth), X.node.setAttribute(\"fill-opacity\", E.fillOpacity)), void 0 !== u && void 0 !== f && (X.attr(\"data-range-y1\", u), X.attr(\"data-range-y2\", f)), new w(this.ctx).setSelectionFilter(X, e, s), c.add(X);\n        var Y = new kt(this).handleBarDataLabels({\n          x: d,\n          y: g,\n          y1: u,\n          y2: f,\n          i: r,\n          j: s,\n          series: p,\n          realIndex: e,\n          columnGroupIndex: o,\n          barHeight: x,\n          barWidth: b,\n          barXPosition: v,\n          barYPosition: m,\n          renderedPath: X,\n          visibleSeries: C\n        });\n        return null !== Y.dataLabels && y.add(Y.dataLabels), Y.totalDataLabels && y.add(Y.totalDataLabels), c.add(y), A && c.add(A), S && c.add(S), c;\n      }\n    }, {\n      key: \"drawBarPaths\",\n      value: function (t) {\n        var e,\n          i = t.indexes,\n          a = t.barHeight,\n          s = t.strokeWidth,\n          r = t.zeroW,\n          o = t.x,\n          n = t.y,\n          l = t.yDivision,\n          h = t.elSeries,\n          c = this.w,\n          d = i.i,\n          g = i.j;\n        if (c.globals.isXNumeric) e = (n = (c.globals.seriesX[d][g] - c.globals.minX) / this.invertedXRatio - a) + a * this.visibleI;else if (c.config.plotOptions.bar.hideZeroBarsWhenGrouped) {\n          var u = 0,\n            f = 0;\n          c.globals.seriesPercent.forEach(function (t, e) {\n            t[g] && u++, e < d && 0 === t[g] && f++;\n          }), u > 0 && (a = this.seriesLen * a / u), e = n + a * this.visibleI, e -= a * f;\n        } else e = n + a * this.visibleI;\n        this.isFunnel && (r -= (this.barHelpers.getXForValue(this.series[d][g], r) - r) / 2), o = this.barHelpers.getXForValue(this.series[d][g], r);\n        var p = this.barHelpers.getBarpaths({\n          barYPosition: e,\n          barHeight: a,\n          x1: r,\n          x2: o,\n          strokeWidth: s,\n          isReversed: this.isReversed,\n          series: this.series,\n          realIndex: i.realIndex,\n          i: d,\n          j: g,\n          w: c\n        });\n        return c.globals.isXNumeric || (n += l), this.barHelpers.barBackground({\n          j: g,\n          i: d,\n          y1: e - a * this.visibleI,\n          y2: a * this.seriesLen,\n          elSeries: h\n        }), {\n          pathTo: p.pathTo,\n          pathFrom: p.pathFrom,\n          x1: r,\n          x: o,\n          y: n,\n          goalX: this.barHelpers.getGoalValues(\"x\", r, null, d, g),\n          barYPosition: e,\n          barHeight: a\n        };\n      }\n    }, {\n      key: \"drawColumnPaths\",\n      value: function (t) {\n        var e,\n          i = t.indexes,\n          a = t.x,\n          s = t.y,\n          r = t.xDivision,\n          o = t.barWidth,\n          n = t.zeroH,\n          l = t.strokeWidth,\n          h = t.elSeries,\n          c = this.w,\n          d = i.realIndex,\n          g = i.translationsIndex,\n          u = i.i,\n          f = i.j,\n          p = i.bc;\n        if (c.globals.isXNumeric) {\n          var x = this.getBarXForNumericXAxis({\n            x: a,\n            j: f,\n            realIndex: d,\n            barWidth: o\n          });\n          a = x.x, e = x.barXPosition;\n        } else if (c.config.plotOptions.bar.hideZeroBarsWhenGrouped) {\n          var b = this.barHelpers.getZeroValueEncounters({\n              i: u,\n              j: f\n            }),\n            v = b.nonZeroColumns,\n            m = b.zeroEncounters;\n          v > 0 && (o = this.seriesLen * o / v), e = a + o * this.visibleI, e -= o * m;\n        } else e = a + o * this.visibleI;\n        s = this.barHelpers.getYForValue(this.series[u][f], n, g);\n        var y = this.barHelpers.getColumnPaths({\n          barXPosition: e,\n          barWidth: o,\n          y1: n,\n          y2: s,\n          strokeWidth: l,\n          isReversed: this.isReversed,\n          series: this.series,\n          realIndex: d,\n          i: u,\n          j: f,\n          w: c\n        });\n        return c.globals.isXNumeric || (a += r), this.barHelpers.barBackground({\n          bc: p,\n          j: f,\n          i: u,\n          x1: e - l / 2 - o * this.visibleI,\n          x2: o * this.seriesLen + l / 2,\n          elSeries: h\n        }), {\n          pathTo: y.pathTo,\n          pathFrom: y.pathFrom,\n          x: a,\n          y: s,\n          goalY: this.barHelpers.getGoalValues(\"y\", null, n, u, f, g),\n          barXPosition: e,\n          barWidth: o\n        };\n      }\n    }, {\n      key: \"getBarXForNumericXAxis\",\n      value: function (t) {\n        var e = t.x,\n          i = t.barWidth,\n          a = t.realIndex,\n          s = t.j,\n          r = this.w,\n          o = a;\n        return r.globals.seriesX[a].length || (o = r.globals.maxValsInArrayIndex), r.globals.seriesX[o][s] && (e = (r.globals.seriesX[o][s] - r.globals.minX) / this.xRatio - i * this.seriesLen / 2), {\n          barXPosition: e + i * this.visibleI,\n          x: e\n        };\n      }\n    }, {\n      key: \"getPreviousPath\",\n      value: function (t, e) {\n        for (var i, a = this.w, s = 0; s < a.globals.previousPaths.length; s++) {\n          var r = a.globals.previousPaths[s];\n          r.paths && r.paths.length > 0 && parseInt(r.realIndex, 10) === parseInt(t, 10) && void 0 !== a.globals.previousPaths[s].paths[e] && (i = a.globals.previousPaths[s].paths[e].d);\n        }\n        return i;\n      }\n    }]), t;\n  }(),\n  Ct = function (t) {\n    h(a, St);\n    var e = o(a);\n    function a() {\n      return i(this, a), e.apply(this, arguments);\n    }\n    return s(a, [{\n      key: \"draw\",\n      value: function (t, e) {\n        var i = this,\n          a = this.w;\n        this.graphics = new k(this.ctx), this.bar = new St(this.ctx, this.xyRatios);\n        var s = new A(this.ctx, a);\n        t = s.getLogSeries(t), this.yRatio = s.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t), \"100%\" === a.config.chart.stackType && (t = a.globals.comboCharts ? e.map(function (t) {\n          return a.globals.seriesPercent[t];\n        }) : a.globals.seriesPercent.slice()), this.series = t, this.barHelpers.initializeStackedPrevVars(this);\n        for (var r = this.graphics.group({\n            class: \"apexcharts-bar-series apexcharts-plot-series\"\n          }), o = 0, n = 0, l = function (s, l) {\n            var h = void 0,\n              c = void 0,\n              d = void 0,\n              u = void 0,\n              f = a.globals.comboCharts ? e[s] : s,\n              p = i.barHelpers.getGroupIndex(f),\n              x = p.groupIndex,\n              b = p.columnGroupIndex;\n            i.groupCtx = i[a.globals.seriesGroups[x]];\n            var v = [],\n              y = [],\n              w = 0;\n            i.yRatio.length > 1 && (i.yaxisIndex = a.globals.seriesYAxisReverseMap[f][0], w = f), i.isReversed = a.config.yaxis[i.yaxisIndex] && a.config.yaxis[i.yaxisIndex].reversed;\n            var k = i.graphics.group({\n              class: \"apexcharts-series\",\n              seriesName: m.escapeString(a.globals.seriesNames[f]),\n              rel: s + 1,\n              \"data:realIndex\": f\n            });\n            i.ctx.series.addCollapsedClassToSeries(k, f);\n            var A = i.graphics.group({\n                class: \"apexcharts-datalabels\",\n                \"data:realIndex\": f\n              }),\n              S = i.graphics.group({\n                class: \"apexcharts-bar-goals-markers\"\n              }),\n              C = 0,\n              L = 0,\n              P = i.initialPositions(o, n, h, c, d, u, w);\n            n = P.y, C = P.barHeight, c = P.yDivision, u = P.zeroW, o = P.x, L = P.barWidth, h = P.xDivision, d = P.zeroH, a.globals.barHeight = C, a.globals.barWidth = L, i.barHelpers.initializeStackedXYVars(i), 1 === i.groupCtx.prevY.length && i.groupCtx.prevY[0].every(function (t) {\n              return isNaN(t);\n            }) && (i.groupCtx.prevY[0] = i.groupCtx.prevY[0].map(function () {\n              return d;\n            }), i.groupCtx.prevYF[0] = i.groupCtx.prevYF[0].map(function () {\n              return 0;\n            }));\n            for (var M = 0; M < a.globals.dataPoints; M++) {\n              var I = i.barHelpers.getStrokeWidth(s, M, f),\n                T = {\n                  indexes: {\n                    i: s,\n                    j: M,\n                    realIndex: f,\n                    translationsIndex: w,\n                    bc: l\n                  },\n                  strokeWidth: I,\n                  x: o,\n                  y: n,\n                  elSeries: k,\n                  columnGroupIndex: b,\n                  seriesGroup: a.globals.seriesGroups[x]\n                },\n                z = null;\n              i.isHorizontal ? (z = i.drawStackedBarPaths(g(g({}, T), {}, {\n                zeroW: u,\n                barHeight: C,\n                yDivision: c\n              })), L = i.series[s][M] / i.invertedYRatio) : (z = i.drawStackedColumnPaths(g(g({}, T), {}, {\n                xDivision: h,\n                barWidth: L,\n                zeroH: d\n              })), C = i.series[s][M] / i.yRatio[w]);\n              var X = i.barHelpers.drawGoalLine({\n                barXPosition: z.barXPosition,\n                barYPosition: z.barYPosition,\n                goalX: z.goalX,\n                goalY: z.goalY,\n                barHeight: C,\n                barWidth: L\n              });\n              X && S.add(X), n = z.y, o = z.x, v.push(o), y.push(n);\n              var E = i.barHelpers.getPathFillColor(t, s, M, f),\n                Y = \"\";\n              a.globals.isBarHorizontal ? \"bottom\" === i.barHelpers.arrBorderRadius[f][M] && a.globals.series[f][M] > 0 && (Y = \"apexcharts-flip-x\") : \"bottom\" === i.barHelpers.arrBorderRadius[f][M] && a.globals.series[f][M] > 0 && (Y = \"apexcharts-flip-y\"), k = i.renderSeries({\n                realIndex: f,\n                pathFill: E,\n                j: M,\n                i: s,\n                columnGroupIndex: b,\n                pathFrom: z.pathFrom,\n                pathTo: z.pathTo,\n                strokeWidth: I,\n                elSeries: k,\n                x: o,\n                y: n,\n                series: t,\n                barHeight: C,\n                barWidth: L,\n                elDataLabelsWrap: A,\n                elGoalsMarkers: S,\n                type: \"bar\",\n                visibleSeries: b,\n                classes: Y\n              });\n            }\n            a.globals.seriesXvalues[f] = v, a.globals.seriesYvalues[f] = y, i.groupCtx.prevY.push(i.groupCtx.yArrj), i.groupCtx.prevYF.push(i.groupCtx.yArrjF), i.groupCtx.prevYVal.push(i.groupCtx.yArrjVal), i.groupCtx.prevX.push(i.groupCtx.xArrj), i.groupCtx.prevXF.push(i.groupCtx.xArrjF), i.groupCtx.prevXVal.push(i.groupCtx.xArrjVal), r.add(k);\n          }, h = 0, c = 0; h < t.length; h++, c++) l(h, c);\n        return r;\n      }\n    }, {\n      key: \"initialPositions\",\n      value: function (t, e, i, a, s, r, o) {\n        var n,\n          l,\n          h = this.w;\n        if (this.isHorizontal) {\n          a = h.globals.gridHeight / h.globals.dataPoints;\n          var c = h.config.plotOptions.bar.barHeight;\n          n = -1 === String(c).indexOf(\"%\") ? parseInt(c, 10) : a * parseInt(c, 10) / 100, r = h.globals.padHorizontal + (this.isReversed ? h.globals.gridWidth - this.baseLineInvertedY : this.baseLineInvertedY), e = (a - n) / 2;\n        } else {\n          l = i = h.globals.gridWidth / h.globals.dataPoints;\n          var d = h.config.plotOptions.bar.columnWidth;\n          h.globals.isXNumeric && h.globals.dataPoints > 1 ? l = (i = h.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : -1 === String(d).indexOf(\"%\") ? l = parseInt(d, 10) : l *= parseInt(d, 10) / 100, s = this.isReversed ? this.baseLineY[o] : h.globals.gridHeight - this.baseLineY[o], t = h.globals.padHorizontal + (i - l) / 2;\n        }\n        var g = h.globals.barGroups.length || 1;\n        return {\n          x: t,\n          y: e,\n          yDivision: a,\n          xDivision: i,\n          barHeight: n / g,\n          barWidth: l / g,\n          zeroH: s,\n          zeroW: r\n        };\n      }\n    }, {\n      key: \"drawStackedBarPaths\",\n      value: function (t) {\n        for (var e, i = t.indexes, a = t.barHeight, s = t.strokeWidth, r = t.zeroW, o = t.x, n = t.y, l = t.columnGroupIndex, h = t.seriesGroup, c = t.yDivision, d = t.elSeries, g = this.w, u = n + l * a, f = i.i, p = i.j, x = i.realIndex, b = i.translationsIndex, v = 0, m = 0; m < this.groupCtx.prevXF.length; m++) v += this.groupCtx.prevXF[m][p];\n        var y;\n        if ((y = h.indexOf(g.config.series[x].name)) > 0) {\n          var w = r;\n          this.groupCtx.prevXVal[y - 1][p] < 0 ? w = this.series[f][p] >= 0 ? this.groupCtx.prevX[y - 1][p] + v - 2 * (this.isReversed ? v : 0) : this.groupCtx.prevX[y - 1][p] : this.groupCtx.prevXVal[y - 1][p] >= 0 && (w = this.series[f][p] >= 0 ? this.groupCtx.prevX[y - 1][p] : this.groupCtx.prevX[y - 1][p] - v + 2 * (this.isReversed ? v : 0)), e = w;\n        } else e = r;\n        o = null === this.series[f][p] ? e : e + this.series[f][p] / this.invertedYRatio - 2 * (this.isReversed ? this.series[f][p] / this.invertedYRatio : 0);\n        var k = this.barHelpers.getBarpaths({\n          barYPosition: u,\n          barHeight: a,\n          x1: e,\n          x2: o,\n          strokeWidth: s,\n          isReversed: this.isReversed,\n          series: this.series,\n          realIndex: i.realIndex,\n          seriesGroup: h,\n          i: f,\n          j: p,\n          w: g\n        });\n        return this.barHelpers.barBackground({\n          j: p,\n          i: f,\n          y1: u,\n          y2: a,\n          elSeries: d\n        }), n += c, {\n          pathTo: k.pathTo,\n          pathFrom: k.pathFrom,\n          goalX: this.barHelpers.getGoalValues(\"x\", r, null, f, p, b),\n          barXPosition: e,\n          barYPosition: u,\n          x: o,\n          y: n\n        };\n      }\n    }, {\n      key: \"drawStackedColumnPaths\",\n      value: function (t) {\n        var e = t.indexes,\n          i = t.x,\n          a = t.y,\n          s = t.xDivision,\n          r = t.barWidth,\n          o = t.zeroH,\n          n = t.columnGroupIndex,\n          l = t.seriesGroup,\n          h = t.elSeries,\n          c = this.w,\n          d = e.i,\n          g = e.j,\n          u = e.bc,\n          f = e.realIndex,\n          p = e.translationsIndex;\n        if (c.globals.isXNumeric) {\n          var x = c.globals.seriesX[f][g];\n          x || (x = 0), i = (x - c.globals.minX) / this.xRatio - r / 2 * c.globals.barGroups.length;\n        }\n        for (var b, v = i + n * r, m = 0, y = 0; y < this.groupCtx.prevYF.length; y++) m += isNaN(this.groupCtx.prevYF[y][g]) ? 0 : this.groupCtx.prevYF[y][g];\n        var w = d;\n        if (l && (w = l.indexOf(c.globals.seriesNames[f])), w > 0 && !c.globals.isXNumeric || w > 0 && c.globals.isXNumeric && c.globals.seriesX[f - 1][g] === c.globals.seriesX[f][g]) {\n          var k,\n            A,\n            S,\n            C = Math.min(this.yRatio.length + 1, f + 1);\n          if (void 0 !== this.groupCtx.prevY[w - 1] && this.groupCtx.prevY[w - 1].length) for (var L = 1; L < C; L++) {\n            var P;\n            if (!isNaN(null === (P = this.groupCtx.prevY[w - L]) || void 0 === P ? void 0 : P[g])) {\n              S = this.groupCtx.prevY[w - L][g];\n              break;\n            }\n          }\n          for (var M = 1; M < C; M++) {\n            var I, T;\n            if ((null === (I = this.groupCtx.prevYVal[w - M]) || void 0 === I ? void 0 : I[g]) < 0) {\n              A = this.series[d][g] >= 0 ? S - m + 2 * (this.isReversed ? m : 0) : S;\n              break;\n            }\n            if ((null === (T = this.groupCtx.prevYVal[w - M]) || void 0 === T ? void 0 : T[g]) >= 0) {\n              A = this.series[d][g] >= 0 ? S : S + m - 2 * (this.isReversed ? m : 0);\n              break;\n            }\n          }\n          void 0 === A && (A = c.globals.gridHeight), b = null !== (k = this.groupCtx.prevYF[0]) && void 0 !== k && k.every(function (t) {\n            return 0 === t;\n          }) && this.groupCtx.prevYF.slice(1, w).every(function (t) {\n            return t.every(function (t) {\n              return isNaN(t);\n            });\n          }) ? o : A;\n        } else b = o;\n        a = this.series[d][g] ? b - this.series[d][g] / this.yRatio[p] + 2 * (this.isReversed ? this.series[d][g] / this.yRatio[p] : 0) : b;\n        var z = this.barHelpers.getColumnPaths({\n          barXPosition: v,\n          barWidth: r,\n          y1: b,\n          y2: a,\n          yRatio: this.yRatio[p],\n          strokeWidth: this.strokeWidth,\n          isReversed: this.isReversed,\n          series: this.series,\n          seriesGroup: l,\n          realIndex: e.realIndex,\n          i: d,\n          j: g,\n          w: c\n        });\n        return this.barHelpers.barBackground({\n          bc: u,\n          j: g,\n          i: d,\n          x1: v,\n          x2: r,\n          elSeries: h\n        }), {\n          pathTo: z.pathTo,\n          pathFrom: z.pathFrom,\n          goalY: this.barHelpers.getGoalValues(\"y\", null, o, d, g),\n          barXPosition: v,\n          x: c.globals.isXNumeric ? i : i + s,\n          y: a\n        };\n      }\n    }]), a;\n  }(),\n  Lt = function (t) {\n    h(a, St);\n    var e = o(a);\n    function a() {\n      return i(this, a), e.apply(this, arguments);\n    }\n    return s(a, [{\n      key: \"draw\",\n      value: function (t, e, i) {\n        var a = this,\n          s = this.w,\n          r = new k(this.ctx),\n          o = s.globals.comboCharts ? e : s.config.chart.type,\n          n = new N(this.ctx);\n        this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s.config.plotOptions.bar.horizontal;\n        var l = new A(this.ctx, s);\n        t = l.getLogSeries(t), this.series = t, this.yRatio = l.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);\n        for (var h = r.group({\n            class: \"apexcharts-\".concat(o, \"-series apexcharts-plot-series\")\n          }), c = function (e) {\n            a.isBoxPlot = \"boxPlot\" === s.config.chart.type || \"boxPlot\" === s.config.series[e].type;\n            var o,\n              l,\n              c,\n              d,\n              u = void 0,\n              f = void 0,\n              p = [],\n              x = [],\n              b = s.globals.comboCharts ? i[e] : e,\n              v = a.barHelpers.getGroupIndex(b).columnGroupIndex,\n              y = r.group({\n                class: \"apexcharts-series\",\n                seriesName: m.escapeString(s.globals.seriesNames[b]),\n                rel: e + 1,\n                \"data:realIndex\": b\n              });\n            a.ctx.series.addCollapsedClassToSeries(y, b), t[e].length > 0 && (a.visibleI = a.visibleI + 1);\n            var w,\n              k,\n              A = 0;\n            a.yRatio.length > 1 && (a.yaxisIndex = s.globals.seriesYAxisReverseMap[b][0], A = b);\n            var S = a.barHelpers.initialPositions();\n            f = S.y, w = S.barHeight, l = S.yDivision, d = S.zeroW, u = S.x, k = S.barWidth, o = S.xDivision, c = S.zeroH, x.push(u + k / 2);\n            for (var C = r.group({\n                class: \"apexcharts-datalabels\",\n                \"data:realIndex\": b\n              }), L = function (i) {\n                var r = a.barHelpers.getStrokeWidth(e, i, b),\n                  h = null,\n                  m = {\n                    indexes: {\n                      i: e,\n                      j: i,\n                      realIndex: b,\n                      translationsIndex: A\n                    },\n                    x: u,\n                    y: f,\n                    strokeWidth: r,\n                    elSeries: y\n                  };\n                h = a.isHorizontal ? a.drawHorizontalBoxPaths(g(g({}, m), {}, {\n                  yDivision: l,\n                  barHeight: w,\n                  zeroW: d\n                })) : a.drawVerticalBoxPaths(g(g({}, m), {}, {\n                  xDivision: o,\n                  barWidth: k,\n                  zeroH: c\n                })), f = h.y, u = h.x, i > 0 && x.push(u + k / 2), p.push(f), h.pathTo.forEach(function (o, l) {\n                  var c = !a.isBoxPlot && a.candlestickOptions.wick.useFillColor ? h.color[l] : s.globals.stroke.colors[e],\n                    d = n.fillPath({\n                      seriesNumber: b,\n                      dataPointIndex: i,\n                      color: h.color[l],\n                      value: t[e][i]\n                    });\n                  a.renderSeries({\n                    realIndex: b,\n                    pathFill: d,\n                    lineFill: c,\n                    j: i,\n                    i: e,\n                    pathFrom: h.pathFrom,\n                    pathTo: o,\n                    strokeWidth: r,\n                    elSeries: y,\n                    x: u,\n                    y: f,\n                    series: t,\n                    columnGroupIndex: v,\n                    barHeight: w,\n                    barWidth: k,\n                    elDataLabelsWrap: C,\n                    visibleSeries: a.visibleI,\n                    type: s.config.chart.type\n                  });\n                });\n              }, P = 0; P < s.globals.dataPoints; P++) L(P);\n            s.globals.seriesXvalues[b] = x, s.globals.seriesYvalues[b] = p, h.add(y);\n          }, d = 0; d < t.length; d++) c(d);\n        return h;\n      }\n    }, {\n      key: \"drawVerticalBoxPaths\",\n      value: function (t) {\n        var e = t.indexes,\n          i = t.x;\n        t.y;\n        var a = t.xDivision,\n          s = t.barWidth,\n          r = t.zeroH,\n          o = t.strokeWidth,\n          n = this.w,\n          l = new k(this.ctx),\n          h = e.i,\n          c = e.j,\n          d = !0,\n          g = n.config.plotOptions.candlestick.colors.upward,\n          u = n.config.plotOptions.candlestick.colors.downward,\n          f = \"\";\n        this.isBoxPlot && (f = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);\n        var p = this.yRatio[e.translationsIndex],\n          x = e.realIndex,\n          b = this.getOHLCValue(x, c),\n          v = r,\n          m = r;\n        b.o > b.c && (d = !1);\n        var y = Math.min(b.o, b.c),\n          w = Math.max(b.o, b.c),\n          A = b.m;\n        n.globals.isXNumeric && (i = (n.globals.seriesX[x][c] - n.globals.minX) / this.xRatio - s / 2);\n        var S = i + s * this.visibleI;\n        void 0 === this.series[h][c] || null === this.series[h][c] ? (y = r, w = r) : (y = r - y / p, w = r - w / p, v = r - b.h / p, m = r - b.l / p, A = r - b.m / p);\n        var C = l.move(S, r),\n          L = l.move(S + s / 2, y);\n        return n.globals.previousPaths.length > 0 && (L = this.getPreviousPath(x, c, !0)), C = this.isBoxPlot ? [l.move(S, y) + l.line(S + s / 2, y) + l.line(S + s / 2, v) + l.line(S + s / 4, v) + l.line(S + s - s / 4, v) + l.line(S + s / 2, v) + l.line(S + s / 2, y) + l.line(S + s, y) + l.line(S + s, A) + l.line(S, A) + l.line(S, y + o / 2), l.move(S, A) + l.line(S + s, A) + l.line(S + s, w) + l.line(S + s / 2, w) + l.line(S + s / 2, m) + l.line(S + s - s / 4, m) + l.line(S + s / 4, m) + l.line(S + s / 2, m) + l.line(S + s / 2, w) + l.line(S, w) + l.line(S, A) + \"z\"] : [l.move(S, w) + l.line(S + s / 2, w) + l.line(S + s / 2, v) + l.line(S + s / 2, w) + l.line(S + s, w) + l.line(S + s, y) + l.line(S + s / 2, y) + l.line(S + s / 2, m) + l.line(S + s / 2, y) + l.line(S, y) + l.line(S, w - o / 2)], L += l.move(S, y), n.globals.isXNumeric || (i += a), {\n          pathTo: C,\n          pathFrom: L,\n          x: i,\n          y: w,\n          barXPosition: S,\n          color: this.isBoxPlot ? f : d ? [g] : [u]\n        };\n      }\n    }, {\n      key: \"drawHorizontalBoxPaths\",\n      value: function (t) {\n        var e = t.indexes;\n        t.x;\n        var i = t.y,\n          a = t.yDivision,\n          s = t.barHeight,\n          r = t.zeroW,\n          o = t.strokeWidth,\n          n = this.w,\n          l = new k(this.ctx),\n          h = e.i,\n          c = e.j,\n          d = this.boxOptions.colors.lower;\n        this.isBoxPlot && (d = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);\n        var g = this.invertedYRatio,\n          u = e.realIndex,\n          f = this.getOHLCValue(u, c),\n          p = r,\n          x = r,\n          b = Math.min(f.o, f.c),\n          v = Math.max(f.o, f.c),\n          m = f.m;\n        n.globals.isXNumeric && (i = (n.globals.seriesX[u][c] - n.globals.minX) / this.invertedXRatio - s / 2);\n        var y = i + s * this.visibleI;\n        void 0 === this.series[h][c] || null === this.series[h][c] ? (b = r, v = r) : (b = r + b / g, v = r + v / g, p = r + f.h / g, x = r + f.l / g, m = r + f.m / g);\n        var w = l.move(r, y),\n          A = l.move(b, y + s / 2);\n        return n.globals.previousPaths.length > 0 && (A = this.getPreviousPath(u, c, !0)), w = [l.move(b, y) + l.line(b, y + s / 2) + l.line(p, y + s / 2) + l.line(p, y + s / 2 - s / 4) + l.line(p, y + s / 2 + s / 4) + l.line(p, y + s / 2) + l.line(b, y + s / 2) + l.line(b, y + s) + l.line(m, y + s) + l.line(m, y) + l.line(b + o / 2, y), l.move(m, y) + l.line(m, y + s) + l.line(v, y + s) + l.line(v, y + s / 2) + l.line(x, y + s / 2) + l.line(x, y + s - s / 4) + l.line(x, y + s / 4) + l.line(x, y + s / 2) + l.line(v, y + s / 2) + l.line(v, y) + l.line(m, y) + \"z\"], A += l.move(b, y), n.globals.isXNumeric || (i += a), {\n          pathTo: w,\n          pathFrom: A,\n          x: v,\n          y: i,\n          barYPosition: y,\n          color: d\n        };\n      }\n    }, {\n      key: \"getOHLCValue\",\n      value: function (t, e) {\n        var i = this.w;\n        return {\n          o: this.isBoxPlot ? i.globals.seriesCandleH[t][e] : i.globals.seriesCandleO[t][e],\n          h: this.isBoxPlot ? i.globals.seriesCandleO[t][e] : i.globals.seriesCandleH[t][e],\n          m: i.globals.seriesCandleM[t][e],\n          l: this.isBoxPlot ? i.globals.seriesCandleC[t][e] : i.globals.seriesCandleL[t][e],\n          c: this.isBoxPlot ? i.globals.seriesCandleL[t][e] : i.globals.seriesCandleC[t][e]\n        };\n      }\n    }]), a;\n  }(),\n  Pt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"checkColorRange\",\n      value: function () {\n        var t = this.w,\n          e = !1,\n          i = t.config.plotOptions[t.config.chart.type];\n        return i.colorScale.ranges.length > 0 && i.colorScale.ranges.map(function (t, i) {\n          t.from <= 0 && (e = !0);\n        }), e;\n      }\n    }, {\n      key: \"getShadeColor\",\n      value: function (t, e, i, a) {\n        var s = this.w,\n          r = 1,\n          o = s.config.plotOptions[t].shadeIntensity,\n          n = this.determineColor(t, e, i);\n        s.globals.hasNegs || a ? r = s.config.plotOptions[t].reverseNegativeShade ? n.percent < 0 ? n.percent / 100 * (1.25 * o) : (1 - n.percent / 100) * (1.25 * o) : n.percent <= 0 ? 1 - (1 + n.percent / 100) * o : (1 - n.percent / 100) * o : (r = 1 - n.percent / 100, \"treemap\" === t && (r = (1 - n.percent / 100) * (1.25 * o)));\n        var l = n.color,\n          h = new m();\n        if (s.config.plotOptions[t].enableShades) if (\"dark\" === this.w.config.theme.mode) {\n          var c = h.shadeColor(-1 * r, n.color);\n          l = m.hexToRgba(m.isColorHex(c) ? c : m.rgb2hex(c), s.config.fill.opacity);\n        } else {\n          var d = h.shadeColor(r, n.color);\n          l = m.hexToRgba(m.isColorHex(d) ? d : m.rgb2hex(d), s.config.fill.opacity);\n        }\n        return {\n          color: l,\n          colorProps: n\n        };\n      }\n    }, {\n      key: \"determineColor\",\n      value: function (t, e, i) {\n        var a = this.w,\n          s = a.globals.series[e][i],\n          r = a.config.plotOptions[t],\n          o = r.colorScale.inverse ? i : e;\n        r.distributed && \"treemap\" === a.config.chart.type && (o = i);\n        var n = a.globals.colors[o],\n          l = null,\n          h = Math.min.apply(Math, p(a.globals.series[e])),\n          c = Math.max.apply(Math, p(a.globals.series[e]));\n        r.distributed || \"heatmap\" !== t || (h = a.globals.minY, c = a.globals.maxY), void 0 !== r.colorScale.min && (h = r.colorScale.min < a.globals.minY ? r.colorScale.min : a.globals.minY, c = r.colorScale.max > a.globals.maxY ? r.colorScale.max : a.globals.maxY);\n        var d = Math.abs(c) + Math.abs(h),\n          g = 100 * s / (0 === d ? d - 1e-6 : d);\n        r.colorScale.ranges.length > 0 && r.colorScale.ranges.map(function (t, e) {\n          if (s >= t.from && s <= t.to) {\n            n = t.color, l = t.foreColor ? t.foreColor : null, h = t.from, c = t.to;\n            var i = Math.abs(c) + Math.abs(h);\n            g = 100 * s / (0 === i ? i - 1e-6 : i);\n          }\n        });\n        return {\n          color: n,\n          foreColor: l,\n          percent: g\n        };\n      }\n    }, {\n      key: \"calculateDataLabels\",\n      value: function (t) {\n        var e = t.text,\n          i = t.x,\n          a = t.y,\n          s = t.i,\n          r = t.j,\n          o = t.colorProps,\n          n = t.fontSize,\n          l = this.w.config.dataLabels,\n          h = new k(this.ctx),\n          c = new G(this.ctx),\n          d = null;\n        if (l.enabled) {\n          d = h.group({\n            class: \"apexcharts-data-labels\"\n          });\n          var g = l.offsetX,\n            u = l.offsetY,\n            f = i + g,\n            p = a + parseFloat(l.style.fontSize) / 3 + u;\n          c.plotDataLabelsText({\n            x: f,\n            y: p,\n            text: e,\n            i: s,\n            j: r,\n            color: o.foreColor,\n            parent: d,\n            fontSize: n,\n            dataLabelsConfig: l\n          });\n        }\n        return d;\n      }\n    }, {\n      key: \"addListeners\",\n      value: function (t) {\n        var e = new k(this.ctx);\n        t.node.addEventListener(\"mouseenter\", e.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseleave\", e.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mousedown\", e.pathMouseDown.bind(this, t));\n      }\n    }]), t;\n  }(),\n  Mt = function () {\n    function t(e, a) {\n      i(this, t), this.ctx = e, this.w = e.w, this.xRatio = a.xRatio, this.yRatio = a.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new Pt(e), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;\n    }\n    return s(t, [{\n      key: \"draw\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx),\n          a = i.group({\n            class: \"apexcharts-heatmap\"\n          });\n        a.attr(\"clip-path\", \"url(#gridRectMask\".concat(e.globals.cuid, \")\"));\n        var s = e.globals.gridWidth / e.globals.dataPoints,\n          r = e.globals.gridHeight / e.globals.series.length,\n          o = 0,\n          n = !1;\n        this.negRange = this.helpers.checkColorRange();\n        var l = t.slice();\n        e.config.yaxis[0].reversed && (n = !0, l.reverse());\n        for (var h = n ? 0 : l.length - 1; n ? h < l.length : h >= 0; n ? h++ : h--) {\n          var c = i.group({\n            class: \"apexcharts-series apexcharts-heatmap-series\",\n            seriesName: m.escapeString(e.globals.seriesNames[h]),\n            rel: h + 1,\n            \"data:realIndex\": h\n          });\n          if (this.ctx.series.addCollapsedClassToSeries(c, h), e.config.chart.dropShadow.enabled) {\n            var d = e.config.chart.dropShadow;\n            new w(this.ctx).dropShadow(c, d, h);\n          }\n          for (var g = 0, u = e.config.plotOptions.heatmap.shadeIntensity, f = 0; f < l[h].length; f++) {\n            var p = this.helpers.getShadeColor(e.config.chart.type, h, f, this.negRange),\n              x = p.color,\n              b = p.colorProps;\n            if (\"image\" === e.config.fill.type) x = new N(this.ctx).fillPath({\n              seriesNumber: h,\n              dataPointIndex: f,\n              opacity: e.globals.hasNegs ? b.percent < 0 ? 1 - (1 + b.percent / 100) : u + b.percent / 100 : b.percent / 100,\n              patternID: m.randomId(),\n              width: e.config.fill.image.width ? e.config.fill.image.width : s,\n              height: e.config.fill.image.height ? e.config.fill.image.height : r\n            });\n            var v = this.rectRadius,\n              y = i.drawRect(g, o, s, r, v);\n            if (y.attr({\n              cx: g,\n              cy: o\n            }), y.node.classList.add(\"apexcharts-heatmap-rect\"), c.add(y), y.attr({\n              fill: x,\n              i: h,\n              index: h,\n              j: f,\n              val: t[h][f],\n              \"stroke-width\": this.strokeWidth,\n              stroke: e.config.plotOptions.heatmap.useFillColorAsStroke ? x : e.globals.stroke.colors[0],\n              color: x\n            }), this.helpers.addListeners(y), e.config.chart.animations.enabled && !e.globals.dataChanged) {\n              var A = 1;\n              e.globals.resized || (A = e.config.chart.animations.speed), this.animateHeatMap(y, g, o, s, r, A);\n            }\n            if (e.globals.dataChanged) {\n              var S = 1;\n              if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {\n                S = this.dynamicAnim.speed;\n                var C = e.globals.previousPaths[h] && e.globals.previousPaths[h][f] && e.globals.previousPaths[h][f].color;\n                C || (C = \"rgba(255, 255, 255, 0)\"), this.animateHeatColor(y, m.isColorHex(C) ? C : m.rgb2hex(C), m.isColorHex(x) ? x : m.rgb2hex(x), S);\n              }\n            }\n            var L = (0, e.config.dataLabels.formatter)(e.globals.series[h][f], {\n                value: e.globals.series[h][f],\n                seriesIndex: h,\n                dataPointIndex: f,\n                w: e\n              }),\n              P = this.helpers.calculateDataLabels({\n                text: L,\n                x: g + s / 2,\n                y: o + r / 2,\n                i: h,\n                j: f,\n                colorProps: b,\n                series: l\n              });\n            null !== P && c.add(P), g += s;\n          }\n          o += r, a.add(c);\n        }\n        var M = e.globals.yAxisScale[0].result.slice();\n        return e.config.yaxis[0].reversed ? M.unshift(\"\") : M.push(\"\"), e.globals.yAxisScale[0].result = M, a;\n      }\n    }, {\n      key: \"animateHeatMap\",\n      value: function (t, e, i, a, s, r) {\n        var o = new y(this.ctx);\n        o.animateRect(t, {\n          x: e + a / 2,\n          y: i + s / 2,\n          width: 0,\n          height: 0\n        }, {\n          x: e,\n          y: i,\n          width: a,\n          height: s\n        }, r, function () {\n          o.animationCompleted(t);\n        });\n      }\n    }, {\n      key: \"animateHeatColor\",\n      value: function (t, e, i, a) {\n        t.attr({\n          fill: e\n        }).animate(a).attr({\n          fill: i\n        });\n      }\n    }]), t;\n  }(),\n  It = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"drawYAxisTexts\",\n      value: function (t, e, i, a) {\n        var s = this.w,\n          r = s.config.yaxis[0],\n          o = s.globals.yLabelFormatters[0];\n        return new k(this.ctx).drawText({\n          x: t + r.labels.offsetX,\n          y: e + r.labels.offsetY,\n          text: o(a, i),\n          textAnchor: \"middle\",\n          fontSize: r.labels.style.fontSize,\n          fontFamily: r.labels.style.fontFamily,\n          foreColor: Array.isArray(r.labels.style.colors) ? r.labels.style.colors[i] : r.labels.style.colors\n        });\n      }\n    }]), t;\n  }(),\n  Tt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n      var a = this.w;\n      this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== a.globals.stroke.colors ? a.globals.stroke.colors : a.globals.colors, this.defaultSize = Math.min(a.globals.gridWidth, a.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = a.globals.gridWidth / 2, \"radialBar\" === a.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(a.config.plotOptions.pie.endAngle - a.config.plotOptions.pie.startAngle), this.initialAngle = a.config.plotOptions.pie.startAngle % this.fullAngle, a.globals.radialSize = this.defaultSize / 2.05 - a.config.stroke.width - (a.config.chart.sparkline.enabled ? 0 : a.config.chart.dropShadow.blur), this.donutSize = a.globals.radialSize * parseInt(a.config.plotOptions.pie.donut.size, 10) / 100;\n      var s = a.config.plotOptions.pie.customScale,\n        r = a.globals.gridWidth / 2,\n        o = a.globals.gridHeight / 2;\n      this.translateX = r - r * s, this.translateY = o - o * s, this.dataLabelsGroup = new k(this.ctx).group({\n        class: \"apexcharts-datalabels-group\",\n        transform: \"translate(\".concat(this.translateX, \", \").concat(this.translateY, \") scale(\").concat(s, \")\")\n      }), this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];\n    }\n    return s(t, [{\n      key: \"draw\",\n      value: function (t) {\n        var e = this,\n          i = this.w,\n          a = new k(this.ctx),\n          s = a.group({\n            class: \"apexcharts-pie\"\n          });\n        if (i.globals.noData) return s;\n        for (var r = 0, o = 0; o < t.length; o++) r += m.negToZero(t[o]);\n        var n = [],\n          l = a.group();\n        0 === r && (r = 1e-5), t.forEach(function (t) {\n          e.maxY = Math.max(e.maxY, t);\n        }), i.config.yaxis[0].max && (this.maxY = i.config.yaxis[0].max), \"back\" === i.config.grid.position && \"polarArea\" === this.chartType && this.drawPolarElements(s);\n        for (var h = 0; h < t.length; h++) {\n          var c = this.fullAngle * m.negToZero(t[h]) / r;\n          n.push(c), \"polarArea\" === this.chartType ? (n[h] = this.fullAngle / t.length, this.sliceSizes.push(i.globals.radialSize * t[h] / this.maxY)) : this.sliceSizes.push(i.globals.radialSize);\n        }\n        if (i.globals.dataChanged) {\n          for (var d, g = 0, u = 0; u < i.globals.previousPaths.length; u++) g += m.negToZero(i.globals.previousPaths[u]);\n          for (var f = 0; f < i.globals.previousPaths.length; f++) d = this.fullAngle * m.negToZero(i.globals.previousPaths[f]) / g, this.prevSectorAngleArr.push(d);\n        }\n        if (this.donutSize < 0 && (this.donutSize = 0), \"donut\" === this.chartType) {\n          var p = a.drawCircle(this.donutSize);\n          p.attr({\n            cx: this.centerX,\n            cy: this.centerY,\n            fill: i.config.plotOptions.pie.donut.background ? i.config.plotOptions.pie.donut.background : \"transparent\"\n          }), l.add(p);\n        }\n        var x = this.drawArcs(n, t);\n        if (this.sliceLabels.forEach(function (t) {\n          x.add(t);\n        }), l.attr({\n          transform: \"translate(\".concat(this.translateX, \", \").concat(this.translateY, \") scale(\").concat(i.config.plotOptions.pie.customScale, \")\")\n        }), l.add(x), s.add(l), this.donutDataLabels.show) {\n          var b = this.renderInnerDataLabels(this.dataLabelsGroup, this.donutDataLabels, {\n            hollowSize: this.donutSize,\n            centerX: this.centerX,\n            centerY: this.centerY,\n            opacity: this.donutDataLabels.show\n          });\n          s.add(b);\n        }\n        return \"front\" === i.config.grid.position && \"polarArea\" === this.chartType && this.drawPolarElements(s), s;\n      }\n    }, {\n      key: \"drawArcs\",\n      value: function (t, e) {\n        var i = this.w,\n          a = new w(this.ctx),\n          s = new k(this.ctx),\n          r = new N(this.ctx),\n          o = s.group({\n            class: \"apexcharts-slices\"\n          }),\n          n = this.initialAngle,\n          l = this.initialAngle,\n          h = this.initialAngle,\n          c = this.initialAngle;\n        this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0;\n        for (var d = 0; d < t.length; d++) {\n          var g = s.group({\n            class: \"apexcharts-series apexcharts-pie-series\",\n            seriesName: m.escapeString(i.globals.seriesNames[d]),\n            rel: d + 1,\n            \"data:realIndex\": d\n          });\n          o.add(g), l = c, h = (n = h) + t[d], c = l + this.prevSectorAngleArr[d];\n          var u = h < n ? this.fullAngle + h - n : h - n,\n            f = r.fillPath({\n              seriesNumber: d,\n              size: this.sliceSizes[d],\n              value: e[d]\n            }),\n            p = this.getChangedPath(l, c),\n            x = s.drawPath({\n              d: p,\n              stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d] : this.lineColorArr,\n              strokeWidth: 0,\n              fill: f,\n              fillOpacity: i.config.fill.opacity,\n              classes: \"apexcharts-pie-area apexcharts-\".concat(this.chartType.toLowerCase(), \"-slice-\").concat(d)\n            });\n          if (x.attr({\n            index: 0,\n            j: d\n          }), a.setSelectionFilter(x, 0, d), i.config.chart.dropShadow.enabled) {\n            var b = i.config.chart.dropShadow;\n            a.dropShadow(x, b, d);\n          }\n          this.addListeners(x, this.donutDataLabels), k.setAttrs(x.node, {\n            \"data:angle\": u,\n            \"data:startAngle\": n,\n            \"data:strokeWidth\": this.strokeWidth,\n            \"data:value\": e[d]\n          });\n          var v = {\n            x: 0,\n            y: 0\n          };\n          \"pie\" === this.chartType || \"polarArea\" === this.chartType ? v = m.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize / 1.25 + i.config.plotOptions.pie.dataLabels.offset, (n + u / 2) % this.fullAngle) : \"donut\" === this.chartType && (v = m.polarToCartesian(this.centerX, this.centerY, (i.globals.radialSize + this.donutSize) / 2 + i.config.plotOptions.pie.dataLabels.offset, (n + u / 2) % this.fullAngle)), g.add(x);\n          var y = 0;\n          if (!this.initialAnim || i.globals.resized || i.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (y = u / this.fullAngle * i.config.chart.animations.speed) && (y = 1), this.animDur = y + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i.globals.dataChanged ? this.animatePaths(x, {\n            size: this.sliceSizes[d],\n            endAngle: h,\n            startAngle: n,\n            prevStartAngle: l,\n            prevEndAngle: c,\n            animateStartingPos: !0,\n            i: d,\n            animBeginArr: this.animBeginArr,\n            shouldSetPrevPaths: !0,\n            dur: i.config.chart.animations.dynamicAnimation.speed\n          }) : this.animatePaths(x, {\n            size: this.sliceSizes[d],\n            endAngle: h,\n            startAngle: n,\n            i: d,\n            totalItems: t.length - 1,\n            animBeginArr: this.animBeginArr,\n            dur: y\n          }), i.config.plotOptions.pie.expandOnClick && \"polarArea\" !== this.chartType && x.node.addEventListener(\"mouseup\", this.pieClicked.bind(this, d)), void 0 !== i.globals.selectedDataPoints[0] && i.globals.selectedDataPoints[0].indexOf(d) > -1 && this.pieClicked(d), i.config.dataLabels.enabled) {\n            var A = v.x,\n              S = v.y,\n              C = 100 * u / this.fullAngle + \"%\";\n            if (0 !== u && i.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[d]) {\n              var L = i.config.dataLabels.formatter;\n              void 0 !== L && (C = L(i.globals.seriesPercent[d][0], {\n                seriesIndex: d,\n                w: i\n              }));\n              var P = i.globals.dataLabels.style.colors[d],\n                M = s.group({\n                  class: \"apexcharts-datalabels\"\n                }),\n                I = s.drawText({\n                  x: A,\n                  y: S,\n                  text: C,\n                  textAnchor: \"middle\",\n                  fontSize: i.config.dataLabels.style.fontSize,\n                  fontFamily: i.config.dataLabels.style.fontFamily,\n                  fontWeight: i.config.dataLabels.style.fontWeight,\n                  foreColor: P\n                });\n              if (M.add(I), i.config.dataLabels.dropShadow.enabled) {\n                var T = i.config.dataLabels.dropShadow;\n                a.dropShadow(I, T);\n              }\n              I.node.classList.add(\"apexcharts-pie-label\"), i.config.chart.animations.animate && !1 === i.globals.resized && (I.node.classList.add(\"apexcharts-pie-label-delay\"), I.node.style.animationDelay = i.config.chart.animations.speed / 940 + \"s\"), this.sliceLabels.push(M);\n            }\n          }\n        }\n        return o;\n      }\n    }, {\n      key: \"addListeners\",\n      value: function (t, e) {\n        var i = new k(this.ctx);\n        t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mouseleave\", this.revertDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this, t)), this.donutDataLabels.total.showAlways || (t.node.addEventListener(\"mouseenter\", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", this.printDataLabelsInner.bind(this, t.node, e)));\n      }\n    }, {\n      key: \"animatePaths\",\n      value: function (t, e) {\n        var i = this.w,\n          a = e.endAngle < e.startAngle ? this.fullAngle + e.endAngle - e.startAngle : e.endAngle - e.startAngle,\n          s = a,\n          r = e.startAngle,\n          o = e.startAngle;\n        void 0 !== e.prevStartAngle && void 0 !== e.prevEndAngle && (r = e.prevEndAngle, s = e.prevEndAngle < e.prevStartAngle ? this.fullAngle + e.prevEndAngle - e.prevStartAngle : e.prevEndAngle - e.prevStartAngle), e.i === i.config.series.length - 1 && (a + o > this.fullAngle ? e.endAngle = e.endAngle - (a + o) : a + o < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (a + o)))), a === this.fullAngle && (a = this.fullAngle - .01), this.animateArc(t, r, o, a, s, e);\n      }\n    }, {\n      key: \"animateArc\",\n      value: function (t, e, i, a, s, r) {\n        var o,\n          n = this,\n          l = this.w,\n          h = new y(this.ctx),\n          c = r.size;\n        (isNaN(e) || isNaN(s)) && (e = i, s = a, r.dur = 0);\n        var d = a,\n          g = i,\n          u = e < i ? this.fullAngle + e - i : e - i;\n        l.globals.dataChanged && r.shouldSetPrevPaths && r.prevEndAngle && (o = n.getPiePath({\n          me: n,\n          startAngle: r.prevStartAngle,\n          angle: r.prevEndAngle < r.prevStartAngle ? this.fullAngle + r.prevEndAngle - r.prevStartAngle : r.prevEndAngle - r.prevStartAngle,\n          size: c\n        }), t.attr({\n          d: o\n        })), 0 !== r.dur ? t.animate(r.dur, l.globals.easing, r.animBeginArr[r.i]).afterAll(function () {\n          \"pie\" !== n.chartType && \"donut\" !== n.chartType && \"polarArea\" !== n.chartType || this.animate(l.config.chart.animations.dynamicAnimation.speed).attr({\n            \"stroke-width\": n.strokeWidth\n          }), r.i === l.config.series.length - 1 && h.animationCompleted(t);\n        }).during(function (l) {\n          d = u + (a - u) * l, r.animateStartingPos && (d = s + (a - s) * l, g = e - s + (i - (e - s)) * l), o = n.getPiePath({\n            me: n,\n            startAngle: g,\n            angle: d,\n            size: c\n          }), t.node.setAttribute(\"data:pathOrig\", o), t.attr({\n            d: o\n          });\n        }) : (o = n.getPiePath({\n          me: n,\n          startAngle: g,\n          angle: a,\n          size: c\n        }), r.isTrack || (l.globals.animationEnded = !0), t.node.setAttribute(\"data:pathOrig\", o), t.attr({\n          d: o,\n          \"stroke-width\": n.strokeWidth\n        }));\n      }\n    }, {\n      key: \"pieClicked\",\n      value: function (t) {\n        var e,\n          i = this.w,\n          a = this,\n          s = a.sliceSizes[t] + (i.config.plotOptions.pie.expandOnClick ? 4 : 0),\n          r = i.globals.dom.Paper.select(\".apexcharts-\".concat(a.chartType.toLowerCase(), \"-slice-\").concat(t)).members[0];\n        if (\"true\" !== r.attr(\"data:pieClicked\")) {\n          var o = i.globals.dom.baseEl.getElementsByClassName(\"apexcharts-pie-area\");\n          Array.prototype.forEach.call(o, function (t) {\n            t.setAttribute(\"data:pieClicked\", \"false\");\n            var e = t.getAttribute(\"data:pathOrig\");\n            e && t.setAttribute(\"d\", e);\n          }), i.globals.capturedDataPointIndex = t, r.attr(\"data:pieClicked\", \"true\");\n          var n = parseInt(r.attr(\"data:startAngle\"), 10),\n            l = parseInt(r.attr(\"data:angle\"), 10);\n          e = a.getPiePath({\n            me: a,\n            startAngle: n,\n            angle: l,\n            size: s\n          }), 360 !== l && r.plot(e);\n        } else {\n          r.attr({\n            \"data:pieClicked\": \"false\"\n          }), this.revertDataLabelsInner(r.node, this.donutDataLabels);\n          var h = r.attr(\"data:pathOrig\");\n          r.attr({\n            d: h\n          });\n        }\n      }\n    }, {\n      key: \"getChangedPath\",\n      value: function (t, e) {\n        var i = \"\";\n        return this.dynamicAnim && this.w.globals.dataChanged && (i = this.getPiePath({\n          me: this,\n          startAngle: t,\n          angle: e - t,\n          size: this.size\n        })), i;\n      }\n    }, {\n      key: \"getPiePath\",\n      value: function (t) {\n        var e,\n          i = t.me,\n          a = t.startAngle,\n          s = t.angle,\n          r = t.size,\n          o = new k(this.ctx),\n          n = a,\n          l = Math.PI * (n - 90) / 180,\n          h = s + a;\n        Math.ceil(h) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (h = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - .01), Math.ceil(h) > this.fullAngle && (h -= this.fullAngle);\n        var c = Math.PI * (h - 90) / 180,\n          d = i.centerX + r * Math.cos(l),\n          g = i.centerY + r * Math.sin(l),\n          u = i.centerX + r * Math.cos(c),\n          f = i.centerY + r * Math.sin(c),\n          p = m.polarToCartesian(i.centerX, i.centerY, i.donutSize, h),\n          x = m.polarToCartesian(i.centerX, i.centerY, i.donutSize, n),\n          b = s > 180 ? 1 : 0,\n          v = [\"M\", d, g, \"A\", r, r, 0, b, 1, u, f];\n        return e = \"donut\" === i.chartType ? [].concat(v, [\"L\", p.x, p.y, \"A\", i.donutSize, i.donutSize, 0, b, 0, x.x, x.y, \"L\", d, g, \"z\"]).join(\" \") : \"pie\" === i.chartType || \"polarArea\" === i.chartType ? [].concat(v, [\"L\", i.centerX, i.centerY, \"L\", d, g]).join(\" \") : [].concat(v).join(\" \"), o.roundPathCorners(e, 2 * this.strokeWidth);\n      }\n    }, {\n      key: \"drawPolarElements\",\n      value: function (t) {\n        var e = this.w,\n          i = new $(this.ctx),\n          a = new k(this.ctx),\n          s = new It(this.ctx),\n          r = a.group(),\n          o = a.group(),\n          n = i.niceScale(0, Math.ceil(this.maxY), 0),\n          l = n.result.reverse(),\n          h = n.result.length;\n        this.maxY = n.niceMax;\n        for (var c = e.globals.radialSize, d = c / (h - 1), g = 0; g < h - 1; g++) {\n          var u = a.drawCircle(c);\n          if (u.attr({\n            cx: this.centerX,\n            cy: this.centerY,\n            fill: \"none\",\n            \"stroke-width\": e.config.plotOptions.polarArea.rings.strokeWidth,\n            stroke: e.config.plotOptions.polarArea.rings.strokeColor\n          }), e.config.yaxis[0].show) {\n            var f = s.drawYAxisTexts(this.centerX, this.centerY - c + parseInt(e.config.yaxis[0].labels.style.fontSize, 10) / 2, g, l[g]);\n            o.add(f);\n          }\n          r.add(u), c -= d;\n        }\n        this.drawSpokes(t), t.add(r), t.add(o);\n      }\n    }, {\n      key: \"renderInnerDataLabels\",\n      value: function (t, e, i) {\n        var a = this.w,\n          s = new k(this.ctx),\n          r = e.total.show;\n        t.node.innerHTML = \"\", t.node.style.opacity = i.opacity;\n        var o,\n          n,\n          l = i.centerX,\n          h = this.donutDataLabels.total.label ? i.centerY : i.centerY - i.centerY / 6;\n        o = void 0 === e.name.color ? a.globals.colors[0] : e.name.color;\n        var c = e.name.fontSize,\n          d = e.name.fontFamily,\n          g = e.name.fontWeight;\n        n = void 0 === e.value.color ? a.config.chart.foreColor : e.value.color;\n        var u = e.value.formatter,\n          f = \"\",\n          p = \"\";\n        if (r ? (o = e.total.color, c = e.total.fontSize, d = e.total.fontFamily, g = e.total.fontWeight, p = this.donutDataLabels.total.label ? e.total.label : \"\", f = e.total.formatter(a)) : 1 === a.globals.series.length && (f = u(a.globals.series[0], a), p = a.globals.seriesNames[0]), p && (p = e.name.formatter(p, e.total.show, a)), e.name.show) {\n          var x = s.drawText({\n            x: l,\n            y: h + parseFloat(e.name.offsetY),\n            text: p,\n            textAnchor: \"middle\",\n            foreColor: o,\n            fontSize: c,\n            fontWeight: g,\n            fontFamily: d\n          });\n          x.node.classList.add(\"apexcharts-datalabel-label\"), t.add(x);\n        }\n        if (e.value.show) {\n          var b = e.name.show ? parseFloat(e.value.offsetY) + 16 : e.value.offsetY,\n            v = s.drawText({\n              x: l,\n              y: h + b,\n              text: f,\n              textAnchor: \"middle\",\n              foreColor: n,\n              fontWeight: e.value.fontWeight,\n              fontSize: e.value.fontSize,\n              fontFamily: e.value.fontFamily\n            });\n          v.node.classList.add(\"apexcharts-datalabel-value\"), t.add(v);\n        }\n        return t;\n      }\n    }, {\n      key: \"printInnerLabels\",\n      value: function (t, e, i, a) {\n        var s,\n          r = this.w;\n        a ? s = void 0 === t.name.color ? r.globals.colors[parseInt(a.parentNode.getAttribute(\"rel\"), 10) - 1] : t.name.color : r.globals.series.length > 1 && t.total.show && (s = t.total.color);\n        var o = r.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-label\"),\n          n = r.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-value\");\n        i = (0, t.value.formatter)(i, r), a || \"function\" != typeof t.total.formatter || (i = t.total.formatter(r));\n        var l = e === t.total.label;\n        e = this.donutDataLabels.total.label ? t.name.formatter(e, l, r) : \"\", null !== o && (o.textContent = e), null !== n && (n.textContent = i), null !== o && (o.style.fill = s);\n      }\n    }, {\n      key: \"printDataLabelsInner\",\n      value: function (t, e) {\n        var i = this.w,\n          a = t.getAttribute(\"data:value\"),\n          s = i.globals.seriesNames[parseInt(t.parentNode.getAttribute(\"rel\"), 10) - 1];\n        i.globals.series.length > 1 && this.printInnerLabels(e, s, a, t);\n        var r = i.globals.dom.baseEl.querySelector(\".apexcharts-datalabels-group\");\n        null !== r && (r.style.opacity = 1);\n      }\n    }, {\n      key: \"drawSpokes\",\n      value: function (t) {\n        var e = this,\n          i = this.w,\n          a = new k(this.ctx),\n          s = i.config.plotOptions.polarArea.spokes;\n        if (0 !== s.strokeWidth) {\n          for (var r = [], o = 360 / i.globals.series.length, n = 0; n < i.globals.series.length; n++) r.push(m.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize, i.config.plotOptions.pie.startAngle + o * n));\n          r.forEach(function (i, r) {\n            var o = a.drawLine(i.x, i.y, e.centerX, e.centerY, Array.isArray(s.connectorColors) ? s.connectorColors[r] : s.connectorColors);\n            t.add(o);\n          });\n        }\n      }\n    }, {\n      key: \"revertDataLabelsInner\",\n      value: function () {\n        var t = this.w;\n        if (this.donutDataLabels.show) {\n          var e = t.globals.dom.Paper.select(\".apexcharts-datalabels-group\").members[0],\n            i = this.renderInnerDataLabels(e, this.donutDataLabels, {\n              hollowSize: this.donutSize,\n              centerX: this.centerX,\n              centerY: this.centerY,\n              opacity: this.donutDataLabels.show\n            });\n          t.globals.dom.Paper.select(\".apexcharts-radialbar, .apexcharts-pie\").members[0].add(i);\n        }\n      }\n    }]), t;\n  }(),\n  zt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;\n      var a = this.w;\n      this.graphics = new k(this.ctx), this.lineColorArr = void 0 !== a.globals.stroke.colors ? a.globals.stroke.colors : a.globals.colors, this.defaultSize = a.globals.svgHeight < a.globals.svgWidth ? a.globals.gridHeight : a.globals.gridWidth, this.isLog = a.config.yaxis[0].logarithmic, this.logBase = a.config.yaxis[0].logBase, this.coreUtils = new A(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, a.globals.maxY, 0) : a.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.logBase, this.w.globals.minY, 0) : a.globals.minY, this.polygons = a.config.plotOptions.radar.polygons, this.strokeWidth = a.config.stroke.show ? a.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - a.config.chart.dropShadow.blur, a.config.xaxis.labels.show && (this.size = this.size - a.globals.xAxisLabelsWidth / 1.75), void 0 !== a.config.plotOptions.radar.size && (this.size = a.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];\n    }\n    return s(t, [{\n      key: \"draw\",\n      value: function (t) {\n        var e = this,\n          i = this.w,\n          a = new N(this.ctx),\n          s = [],\n          r = new G(this.ctx);\n        t.length && (this.dataPointsLen = t[i.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;\n        var o = i.globals.gridWidth / 2,\n          n = i.globals.gridHeight / 2,\n          l = o + i.config.plotOptions.radar.offsetX,\n          h = n + i.config.plotOptions.radar.offsetY,\n          c = this.graphics.group({\n            class: \"apexcharts-radar-series apexcharts-plot-series\",\n            transform: \"translate(\".concat(l || 0, \", \").concat(h || 0, \")\")\n          }),\n          d = [],\n          u = null,\n          f = null;\n        if (this.yaxisLabels = this.graphics.group({\n          class: \"apexcharts-yaxis\"\n        }), t.forEach(function (t, o) {\n          var n = t.length === i.globals.dataPoints,\n            l = e.graphics.group().attr({\n              class: \"apexcharts-series\",\n              \"data:longestSeries\": n,\n              seriesName: m.escapeString(i.globals.seriesNames[o]),\n              rel: o + 1,\n              \"data:realIndex\": o\n            });\n          e.dataRadiusOfPercent[o] = [], e.dataRadius[o] = [], e.angleArr[o] = [], t.forEach(function (t, i) {\n            var a = Math.abs(e.maxValue - e.minValue);\n            t -= e.minValue, e.isLog && (t = e.coreUtils.getLogVal(e.logBase, t, 0)), e.dataRadiusOfPercent[o][i] = t / a, e.dataRadius[o][i] = e.dataRadiusOfPercent[o][i] * e.size, e.angleArr[o][i] = i * e.disAngle;\n          }), d = e.getDataPointsPos(e.dataRadius[o], e.angleArr[o]);\n          var h = e.createPaths(d, {\n            x: 0,\n            y: 0\n          });\n          u = e.graphics.group({\n            class: \"apexcharts-series-markers-wrap apexcharts-element-hidden\"\n          }), f = e.graphics.group({\n            class: \"apexcharts-datalabels\",\n            \"data:realIndex\": o\n          }), i.globals.delayedElements.push({\n            el: u.node,\n            index: o\n          });\n          var c = {\n              i: o,\n              realIndex: o,\n              animationDelay: o,\n              initialSpeed: i.config.chart.animations.speed,\n              dataChangeSpeed: i.config.chart.animations.dynamicAnimation.speed,\n              className: \"apexcharts-radar\",\n              shouldClipToGrid: !1,\n              bindEventsOnPaths: !1,\n              stroke: i.globals.stroke.colors[o],\n              strokeLineCap: i.config.stroke.lineCap\n            },\n            p = null;\n          i.globals.previousPaths.length > 0 && (p = e.getPreviousPath(o));\n          for (var x = 0; x < h.linePathsTo.length; x++) {\n            var b = e.graphics.renderPaths(g(g({}, c), {}, {\n              pathFrom: null === p ? h.linePathsFrom[x] : p,\n              pathTo: h.linePathsTo[x],\n              strokeWidth: Array.isArray(e.strokeWidth) ? e.strokeWidth[o] : e.strokeWidth,\n              fill: \"none\",\n              drawShadow: !1\n            }));\n            l.add(b);\n            var v = a.fillPath({\n                seriesNumber: o\n              }),\n              y = e.graphics.renderPaths(g(g({}, c), {}, {\n                pathFrom: null === p ? h.areaPathsFrom[x] : p,\n                pathTo: h.areaPathsTo[x],\n                strokeWidth: 0,\n                fill: v,\n                drawShadow: !1\n              }));\n            if (i.config.chart.dropShadow.enabled) {\n              var k = new w(e.ctx),\n                A = i.config.chart.dropShadow;\n              k.dropShadow(y, Object.assign({}, A, {\n                noUserSpaceOnUse: !0\n              }), o);\n            }\n            l.add(y);\n          }\n          t.forEach(function (t, a) {\n            var s = new W(e.ctx).getMarkerConfig({\n                cssClass: \"apexcharts-marker\",\n                seriesIndex: o,\n                dataPointIndex: a\n              }),\n              n = e.graphics.drawMarker(d[a].x, d[a].y, s);\n            n.attr(\"rel\", a), n.attr(\"j\", a), n.attr(\"index\", o), n.node.setAttribute(\"default-marker-size\", s.pSize);\n            var h = e.graphics.group({\n              class: \"apexcharts-series-markers\"\n            });\n            h && h.add(n), u.add(h), l.add(u);\n            var c = i.config.dataLabels;\n            if (c.enabled) {\n              var p = c.formatter(i.globals.series[o][a], {\n                seriesIndex: o,\n                dataPointIndex: a,\n                w: i\n              });\n              r.plotDataLabelsText({\n                x: d[a].x,\n                y: d[a].y,\n                text: p,\n                textAnchor: \"middle\",\n                i: o,\n                j: o,\n                parent: f,\n                offsetCorrection: !1,\n                dataLabelsConfig: g({}, c)\n              });\n            }\n            l.add(f);\n          }), s.push(l);\n        }), this.drawPolygons({\n          parent: c\n        }), i.config.xaxis.labels.show) {\n          var p = this.drawXAxisTexts();\n          c.add(p);\n        }\n        return s.forEach(function (t) {\n          c.add(t);\n        }), c.add(this.yaxisLabels), c;\n      }\n    }, {\n      key: \"drawPolygons\",\n      value: function (t) {\n        for (var e = this, i = this.w, a = t.parent, s = new It(this.ctx), r = i.globals.yAxisScale[0].result.reverse(), o = r.length, n = [], l = this.size / (o - 1), h = 0; h < o; h++) n[h] = l * h;\n        n.reverse();\n        var c = [],\n          d = [];\n        n.forEach(function (t, i) {\n          var a = m.getPolygonPos(t, e.dataPointsLen),\n            s = \"\";\n          a.forEach(function (t, a) {\n            if (0 === i) {\n              var r = e.graphics.drawLine(t.x, t.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[a] : e.polygons.connectorColors);\n              d.push(r);\n            }\n            0 === a && e.yaxisLabelsTextsPos.push({\n              x: t.x,\n              y: t.y\n            }), s += t.x + \",\" + t.y + \" \";\n          }), c.push(s);\n        }), c.forEach(function (t, s) {\n          var r = e.polygons.strokeColors,\n            o = e.polygons.strokeWidth,\n            n = e.graphics.drawPolygon(t, Array.isArray(r) ? r[s] : r, Array.isArray(o) ? o[s] : o, i.globals.radarPolygons.fill.colors[s]);\n          a.add(n);\n        }), d.forEach(function (t) {\n          a.add(t);\n        }), i.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function (t, i) {\n          var a = s.drawYAxisTexts(t.x, t.y, i, r[i]);\n          e.yaxisLabels.add(a);\n        });\n      }\n    }, {\n      key: \"drawXAxisTexts\",\n      value: function () {\n        var t = this,\n          e = this.w,\n          i = e.config.xaxis.labels,\n          a = this.graphics.group({\n            class: \"apexcharts-xaxis\"\n          }),\n          s = m.getPolygonPos(this.size, this.dataPointsLen);\n        return e.globals.labels.forEach(function (r, o) {\n          var n = e.config.xaxis.labels.formatter,\n            l = new G(t.ctx);\n          if (s[o]) {\n            var h = t.getTextPos(s[o], t.size),\n              c = n(r, {\n                seriesIndex: -1,\n                dataPointIndex: o,\n                w: e\n              });\n            l.plotDataLabelsText({\n              x: h.newX,\n              y: h.newY,\n              text: c,\n              textAnchor: h.textAnchor,\n              i: o,\n              j: o,\n              parent: a,\n              className: \"apexcharts-xaxis-label\",\n              color: Array.isArray(i.style.colors) && i.style.colors[o] ? i.style.colors[o] : \"#a8a8a8\",\n              dataLabelsConfig: g({\n                textAnchor: h.textAnchor,\n                dropShadow: {\n                  enabled: !1\n                }\n              }, i),\n              offsetCorrection: !1\n            }).on(\"click\", function (i) {\n              if (\"function\" == typeof e.config.chart.events.xAxisLabelClick) {\n                var a = Object.assign({}, e, {\n                  labelIndex: o\n                });\n                e.config.chart.events.xAxisLabelClick(i, t.ctx, a);\n              }\n            });\n          }\n        }), a;\n      }\n    }, {\n      key: \"createPaths\",\n      value: function (t, e) {\n        var i = this,\n          a = [],\n          s = [],\n          r = [],\n          o = [];\n        if (t.length) {\n          s = [this.graphics.move(e.x, e.y)], o = [this.graphics.move(e.x, e.y)];\n          var n = this.graphics.move(t[0].x, t[0].y),\n            l = this.graphics.move(t[0].x, t[0].y);\n          t.forEach(function (e, a) {\n            n += i.graphics.line(e.x, e.y), l += i.graphics.line(e.x, e.y), a === t.length - 1 && (n += \"Z\", l += \"Z\");\n          }), a.push(n), r.push(l);\n        }\n        return {\n          linePathsFrom: s,\n          linePathsTo: a,\n          areaPathsFrom: o,\n          areaPathsTo: r\n        };\n      }\n    }, {\n      key: \"getTextPos\",\n      value: function (t, e) {\n        var i = \"middle\",\n          a = t.x,\n          s = t.y;\n        return Math.abs(t.x) >= 10 ? t.x > 0 ? (i = \"start\", a += 10) : t.x < 0 && (i = \"end\", a -= 10) : i = \"middle\", Math.abs(t.y) >= e - 10 && (t.y < 0 ? s -= 10 : t.y > 0 && (s += 10)), {\n          textAnchor: i,\n          newX: a,\n          newY: s\n        };\n      }\n    }, {\n      key: \"getPreviousPath\",\n      value: function (t) {\n        for (var e = this.w, i = null, a = 0; a < e.globals.previousPaths.length; a++) {\n          var s = e.globals.previousPaths[a];\n          s.paths.length > 0 && parseInt(s.realIndex, 10) === parseInt(t, 10) && void 0 !== e.globals.previousPaths[a].paths[0] && (i = e.globals.previousPaths[a].paths[0].d);\n        }\n        return i;\n      }\n    }, {\n      key: \"getDataPointsPos\",\n      value: function (t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;\n        t = t || [], e = e || [];\n        for (var a = [], s = 0; s < i; s++) {\n          var r = {};\n          r.x = t[s] * Math.sin(e[s]), r.y = -t[s] * Math.cos(e[s]), a.push(r);\n        }\n        return a;\n      }\n    }]), t;\n  }(),\n  Xt = function (t) {\n    h(r, Tt);\n    var a = o(r);\n    function r(t) {\n      var s;\n      i(this, r), (s = a.call(this, t)).ctx = t, s.w = t.w, s.animBeginArr = [0], s.animDur = 0;\n      var o = s.w;\n      return s.startAngle = o.config.plotOptions.radialBar.startAngle, s.endAngle = o.config.plotOptions.radialBar.endAngle, s.totalAngle = Math.abs(o.config.plotOptions.radialBar.endAngle - o.config.plotOptions.radialBar.startAngle), s.trackStartAngle = o.config.plotOptions.radialBar.track.startAngle, s.trackEndAngle = o.config.plotOptions.radialBar.track.endAngle, s.barLabels = s.w.config.plotOptions.radialBar.barLabels, s.donutDataLabels = s.w.config.plotOptions.radialBar.dataLabels, s.radialDataLabels = s.donutDataLabels, s.trackStartAngle || (s.trackStartAngle = s.startAngle), s.trackEndAngle || (s.trackEndAngle = s.endAngle), 360 === s.endAngle && (s.endAngle = 359.99), s.margin = parseInt(o.config.plotOptions.radialBar.track.margin, 10), s.onBarLabelClick = s.onBarLabelClick.bind(e(s)), s;\n    }\n    return s(r, [{\n      key: \"draw\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx),\n          a = i.group({\n            class: \"apexcharts-radialbar\"\n          });\n        if (e.globals.noData) return a;\n        var s = i.group(),\n          r = this.defaultSize / 2,\n          o = e.globals.gridWidth / 2,\n          n = this.defaultSize / 2.05;\n        e.config.chart.sparkline.enabled || (n = n - e.config.stroke.width - e.config.chart.dropShadow.blur);\n        var l = e.globals.fill.colors;\n        if (e.config.plotOptions.radialBar.track.show) {\n          var h = this.drawTracks({\n            size: n,\n            centerX: o,\n            centerY: r,\n            colorArr: l,\n            series: t\n          });\n          s.add(h);\n        }\n        var c = this.drawArcs({\n            size: n,\n            centerX: o,\n            centerY: r,\n            colorArr: l,\n            series: t\n          }),\n          d = 360;\n        e.config.plotOptions.radialBar.startAngle < 0 && (d = this.totalAngle);\n        var g = (360 - d) / 360;\n        if (e.globals.radialSize = n - n * g, this.radialDataLabels.value.show) {\n          var u = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);\n          e.globals.radialSize += u * g;\n        }\n        return s.add(c.g), \"front\" === e.config.plotOptions.radialBar.hollow.position && (c.g.add(c.elHollow), c.dataLabels && c.g.add(c.dataLabels)), a.add(s), a;\n      }\n    }, {\n      key: \"drawTracks\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx),\n          a = i.group({\n            class: \"apexcharts-tracks\"\n          }),\n          s = new w(this.ctx),\n          r = new N(this.ctx),\n          o = this.getStrokeWidth(t);\n        t.size = t.size - o / 2;\n        for (var n = 0; n < t.series.length; n++) {\n          var l = i.group({\n            class: \"apexcharts-radialbar-track apexcharts-track\"\n          });\n          a.add(l), l.attr({\n            rel: n + 1\n          }), t.size = t.size - o - this.margin;\n          var h = e.config.plotOptions.radialBar.track,\n            c = r.fillPath({\n              seriesNumber: 0,\n              size: t.size,\n              fillColors: Array.isArray(h.background) ? h.background[n] : h.background,\n              solid: !0\n            }),\n            d = this.trackStartAngle,\n            g = this.trackEndAngle;\n          Math.abs(g) + Math.abs(d) >= 360 && (g = 360 - Math.abs(this.startAngle) - .1);\n          var u = i.drawPath({\n            d: \"\",\n            stroke: c,\n            strokeWidth: o * parseInt(h.strokeWidth, 10) / 100,\n            fill: \"none\",\n            strokeOpacity: h.opacity,\n            classes: \"apexcharts-radialbar-area\"\n          });\n          if (h.dropShadow.enabled) {\n            var f = h.dropShadow;\n            s.dropShadow(u, f);\n          }\n          l.add(u), u.attr(\"id\", \"apexcharts-radialbarTrack-\" + n), this.animatePaths(u, {\n            centerX: t.centerX,\n            centerY: t.centerY,\n            endAngle: g,\n            startAngle: d,\n            size: t.size,\n            i: n,\n            totalItems: 2,\n            animBeginArr: 0,\n            dur: 0,\n            isTrack: !0,\n            easing: e.globals.easing\n          });\n        }\n        return a;\n      }\n    }, {\n      key: \"drawArcs\",\n      value: function (t) {\n        var e = this.w,\n          i = new k(this.ctx),\n          a = new N(this.ctx),\n          s = new w(this.ctx),\n          r = i.group(),\n          o = this.getStrokeWidth(t);\n        t.size = t.size - o / 2;\n        var n = e.config.plotOptions.radialBar.hollow.background,\n          l = t.size - o * t.series.length - this.margin * t.series.length - o * parseInt(e.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2,\n          h = l - e.config.plotOptions.radialBar.hollow.margin;\n        void 0 !== e.config.plotOptions.radialBar.hollow.image && (n = this.drawHollowImage(t, r, l, n));\n        var c = this.drawHollow({\n          size: h,\n          centerX: t.centerX,\n          centerY: t.centerY,\n          fill: n || \"transparent\"\n        });\n        if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {\n          var d = e.config.plotOptions.radialBar.hollow.dropShadow;\n          s.dropShadow(c, d);\n        }\n        var g = 1;\n        !this.radialDataLabels.total.show && e.globals.series.length > 1 && (g = 0);\n        var u = null;\n        if (this.radialDataLabels.show) {\n          var f = e.globals.dom.Paper.select(\".apexcharts-datalabels-group\").members[0];\n          u = this.renderInnerDataLabels(f, this.radialDataLabels, {\n            hollowSize: l,\n            centerX: t.centerX,\n            centerY: t.centerY,\n            opacity: g\n          });\n        }\n        \"back\" === e.config.plotOptions.radialBar.hollow.position && (r.add(c), u && r.add(u));\n        var p = !1;\n        e.config.plotOptions.radialBar.inverseOrder && (p = !0);\n        for (var x = p ? t.series.length - 1 : 0; p ? x >= 0 : x < t.series.length; p ? x-- : x++) {\n          var b = i.group({\n            class: \"apexcharts-series apexcharts-radial-series\",\n            seriesName: m.escapeString(e.globals.seriesNames[x])\n          });\n          r.add(b), b.attr({\n            rel: x + 1,\n            \"data:realIndex\": x\n          }), this.ctx.series.addCollapsedClassToSeries(b, x), t.size = t.size - o - this.margin;\n          var v = a.fillPath({\n              seriesNumber: x,\n              size: t.size,\n              value: t.series[x]\n            }),\n            y = this.startAngle,\n            A = void 0,\n            S = m.negToZero(t.series[x] > 100 ? 100 : t.series[x]) / 100,\n            C = Math.round(this.totalAngle * S) + this.startAngle,\n            L = void 0;\n          e.globals.dataChanged && (A = this.startAngle, L = Math.round(this.totalAngle * m.negToZero(e.globals.previousPaths[x]) / 100) + A), Math.abs(C) + Math.abs(y) > 360 && (C -= .01), Math.abs(L) + Math.abs(A) > 360 && (L -= .01);\n          var P = C - y,\n            M = Array.isArray(e.config.stroke.dashArray) ? e.config.stroke.dashArray[x] : e.config.stroke.dashArray,\n            I = i.drawPath({\n              d: \"\",\n              stroke: v,\n              strokeWidth: o,\n              fill: \"none\",\n              fillOpacity: e.config.fill.opacity,\n              classes: \"apexcharts-radialbar-area apexcharts-radialbar-slice-\" + x,\n              strokeDashArray: M\n            });\n          if (k.setAttrs(I.node, {\n            \"data:angle\": P,\n            \"data:value\": t.series[x]\n          }), e.config.chart.dropShadow.enabled) {\n            var T = e.config.chart.dropShadow;\n            s.dropShadow(I, T, x);\n          }\n          if (s.setSelectionFilter(I, 0, x), this.addListeners(I, this.radialDataLabels), b.add(I), I.attr({\n            index: 0,\n            j: x\n          }), this.barLabels.enabled) {\n            var z = m.polarToCartesian(t.centerX, t.centerY, t.size, y),\n              X = this.barLabels.formatter(e.globals.seriesNames[x], {\n                seriesIndex: x,\n                w: e\n              }),\n              E = [\"apexcharts-radialbar-label\"];\n            this.barLabels.onClick || E.push(\"apexcharts-no-click\");\n            var Y = this.barLabels.useSeriesColors ? e.globals.colors[x] : e.config.chart.foreColor;\n            Y || (Y = e.config.chart.foreColor);\n            var R = z.x + this.barLabels.offsetX,\n              F = z.y + this.barLabels.offsetY,\n              D = i.drawText({\n                x: R,\n                y: F,\n                text: X,\n                textAnchor: \"end\",\n                dominantBaseline: \"middle\",\n                fontFamily: this.barLabels.fontFamily,\n                fontWeight: this.barLabels.fontWeight,\n                fontSize: this.barLabels.fontSize,\n                foreColor: Y,\n                cssClass: E.join(\" \")\n              });\n            D.on(\"click\", this.onBarLabelClick), D.attr({\n              rel: x + 1\n            }), 0 !== y && D.attr({\n              \"transform-origin\": \"\".concat(R, \" \").concat(F),\n              transform: \"rotate(\".concat(y, \" 0 0)\")\n            }), b.add(D);\n          }\n          var H = 0;\n          !this.initialAnim || e.globals.resized || e.globals.dataChanged || (H = e.config.chart.animations.speed), e.globals.dataChanged && (H = e.config.chart.animations.dynamicAnimation.speed), this.animDur = H / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(I, {\n            centerX: t.centerX,\n            centerY: t.centerY,\n            endAngle: C,\n            startAngle: y,\n            prevEndAngle: L,\n            prevStartAngle: A,\n            size: t.size,\n            i: x,\n            totalItems: 2,\n            animBeginArr: this.animBeginArr,\n            dur: H,\n            shouldSetPrevPaths: !0,\n            easing: e.globals.easing\n          });\n        }\n        return {\n          g: r,\n          elHollow: c,\n          dataLabels: u\n        };\n      }\n    }, {\n      key: \"drawHollow\",\n      value: function (t) {\n        var e = new k(this.ctx).drawCircle(2 * t.size);\n        return e.attr({\n          class: \"apexcharts-radialbar-hollow\",\n          cx: t.centerX,\n          cy: t.centerY,\n          r: t.size,\n          fill: t.fill\n        }), e;\n      }\n    }, {\n      key: \"drawHollowImage\",\n      value: function (t, e, i, a) {\n        var s = this.w,\n          r = new N(this.ctx),\n          o = m.randomId(),\n          n = s.config.plotOptions.radialBar.hollow.image;\n        if (s.config.plotOptions.radialBar.hollow.imageClipped) r.clippedImgArea({\n          width: i,\n          height: i,\n          image: n,\n          patternID: \"pattern\".concat(s.globals.cuid).concat(o)\n        }), a = \"url(#pattern\".concat(s.globals.cuid).concat(o, \")\");else {\n          var l = s.config.plotOptions.radialBar.hollow.imageWidth,\n            h = s.config.plotOptions.radialBar.hollow.imageHeight;\n          if (void 0 === l && void 0 === h) {\n            var c = s.globals.dom.Paper.image(n).loaded(function (e) {\n              this.move(t.centerX - e.width / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - e.height / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY);\n            });\n            e.add(c);\n          } else {\n            var d = s.globals.dom.Paper.image(n).loaded(function (e) {\n              this.move(t.centerX - l / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - h / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l, h);\n            });\n            e.add(d);\n          }\n        }\n        return a;\n      }\n    }, {\n      key: \"getStrokeWidth\",\n      value: function (t) {\n        var e = this.w;\n        return t.size * (100 - parseInt(e.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t.series.length + 1) - this.margin;\n      }\n    }, {\n      key: \"onBarLabelClick\",\n      value: function (t) {\n        var e = parseInt(t.target.getAttribute(\"rel\"), 10) - 1,\n          i = this.barLabels.onClick,\n          a = this.w;\n        i && i(a.globals.seriesNames[e], {\n          w: a,\n          seriesIndex: e\n        });\n      }\n    }]), r;\n  }(),\n  Et = function (t) {\n    h(a, St);\n    var e = o(a);\n    function a() {\n      return i(this, a), e.apply(this, arguments);\n    }\n    return s(a, [{\n      key: \"draw\",\n      value: function (t, e) {\n        var i = this.w,\n          a = new k(this.ctx);\n        this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t, this.seriesRangeStart = i.globals.seriesRangeStart, this.seriesRangeEnd = i.globals.seriesRangeEnd, this.barHelpers.initVariables(t);\n        for (var s = a.group({\n            class: \"apexcharts-rangebar-series apexcharts-plot-series\"\n          }), r = 0; r < t.length; r++) {\n          var o,\n            n,\n            l,\n            h,\n            c = void 0,\n            d = void 0,\n            u = i.globals.comboCharts ? e[r] : r,\n            f = this.barHelpers.getGroupIndex(u).columnGroupIndex,\n            p = a.group({\n              class: \"apexcharts-series\",\n              seriesName: m.escapeString(i.globals.seriesNames[u]),\n              rel: r + 1,\n              \"data:realIndex\": u\n            });\n          this.ctx.series.addCollapsedClassToSeries(p, u), t[r].length > 0 && (this.visibleI = this.visibleI + 1);\n          var x = 0,\n            b = 0,\n            v = 0;\n          this.yRatio.length > 1 && (this.yaxisIndex = i.globals.seriesYAxisReverseMap[u][0], v = u);\n          var y = this.barHelpers.initialPositions();\n          d = y.y, h = y.zeroW, c = y.x, b = y.barWidth, x = y.barHeight, o = y.xDivision, n = y.yDivision, l = y.zeroH;\n          for (var w = a.group({\n              class: \"apexcharts-datalabels\",\n              \"data:realIndex\": u\n            }), A = a.group({\n              class: \"apexcharts-rangebar-goals-markers\"\n            }), S = 0; S < i.globals.dataPoints; S++) {\n            var C = this.barHelpers.getStrokeWidth(r, S, u),\n              L = this.seriesRangeStart[r][S],\n              P = this.seriesRangeEnd[r][S],\n              M = null,\n              I = null,\n              T = null,\n              z = {\n                x: c,\n                y: d,\n                strokeWidth: C,\n                elSeries: p\n              },\n              X = this.seriesLen;\n            if (i.config.plotOptions.bar.rangeBarGroupRows && (X = 1), void 0 === i.config.series[r].data[S]) break;\n            if (this.isHorizontal) {\n              T = d + x * this.visibleI;\n              var E = (n - x * X) / 2;\n              if (i.config.series[r].data[S].x) {\n                var Y = this.detectOverlappingBars({\n                  i: r,\n                  j: S,\n                  barYPosition: T,\n                  srty: E,\n                  barHeight: x,\n                  yDivision: n,\n                  initPositions: y\n                });\n                x = Y.barHeight, T = Y.barYPosition;\n              }\n              b = (M = this.drawRangeBarPaths(g({\n                indexes: {\n                  i: r,\n                  j: S,\n                  realIndex: u\n                },\n                barHeight: x,\n                barYPosition: T,\n                zeroW: h,\n                yDivision: n,\n                y1: L,\n                y2: P\n              }, z))).barWidth;\n            } else {\n              i.globals.isXNumeric && (c = (i.globals.seriesX[r][S] - i.globals.minX) / this.xRatio - b / 2), I = c + b * this.visibleI;\n              var R = (o - b * X) / 2;\n              if (i.config.series[r].data[S].x) {\n                var F = this.detectOverlappingBars({\n                  i: r,\n                  j: S,\n                  barXPosition: I,\n                  srtx: R,\n                  barWidth: b,\n                  xDivision: o,\n                  initPositions: y\n                });\n                b = F.barWidth, I = F.barXPosition;\n              }\n              x = (M = this.drawRangeColumnPaths(g({\n                indexes: {\n                  i: r,\n                  j: S,\n                  realIndex: u,\n                  translationsIndex: v\n                },\n                barWidth: b,\n                barXPosition: I,\n                zeroH: l,\n                xDivision: o\n              }, z))).barHeight;\n            }\n            var D = this.barHelpers.drawGoalLine({\n              barXPosition: M.barXPosition,\n              barYPosition: T,\n              goalX: M.goalX,\n              goalY: M.goalY,\n              barHeight: x,\n              barWidth: b\n            });\n            D && A.add(D), d = M.y, c = M.x;\n            var H = this.barHelpers.getPathFillColor(t, r, S, u),\n              O = i.globals.stroke.colors[u];\n            this.renderSeries({\n              realIndex: u,\n              pathFill: H,\n              lineFill: O,\n              j: S,\n              i: r,\n              x: c,\n              y: d,\n              y1: L,\n              y2: P,\n              pathFrom: M.pathFrom,\n              pathTo: M.pathTo,\n              strokeWidth: C,\n              elSeries: p,\n              series: t,\n              barHeight: x,\n              barWidth: b,\n              barXPosition: I,\n              barYPosition: T,\n              columnGroupIndex: f,\n              elDataLabelsWrap: w,\n              elGoalsMarkers: A,\n              visibleSeries: this.visibleI,\n              type: \"rangebar\"\n            });\n          }\n          s.add(p);\n        }\n        return s;\n      }\n    }, {\n      key: \"detectOverlappingBars\",\n      value: function (t) {\n        var e = t.i,\n          i = t.j,\n          a = t.barYPosition,\n          s = t.barXPosition,\n          r = t.srty,\n          o = t.srtx,\n          n = t.barHeight,\n          l = t.barWidth,\n          h = t.yDivision,\n          c = t.xDivision,\n          d = t.initPositions,\n          g = this.w,\n          u = [],\n          f = g.config.series[e].data[i].rangeName,\n          p = g.config.series[e].data[i].x,\n          x = Array.isArray(p) ? p.join(\" \") : p,\n          b = g.globals.labels.map(function (t) {\n            return Array.isArray(t) ? t.join(\" \") : t;\n          }).indexOf(x),\n          v = g.globals.seriesRange[e].findIndex(function (t) {\n            return t.x === x && t.overlaps.length > 0;\n          });\n        return this.isHorizontal ? (a = g.config.plotOptions.bar.rangeBarGroupRows ? r + h * b : r + n * this.visibleI + h * b, v > -1 && !g.config.plotOptions.bar.rangeBarOverlap && (u = g.globals.seriesRange[e][v].overlaps).indexOf(f) > -1 && (a = (n = d.barHeight / u.length) * this.visibleI + h * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + n * (this.visibleI + u.indexOf(f)) + h * b)) : (b > -1 && !g.globals.timescaleLabels.length && (s = g.config.plotOptions.bar.rangeBarGroupRows ? o + c * b : o + l * this.visibleI + c * b), v > -1 && !g.config.plotOptions.bar.rangeBarOverlap && (u = g.globals.seriesRange[e][v].overlaps).indexOf(f) > -1 && (s = (l = d.barWidth / u.length) * this.visibleI + c * (100 - parseInt(this.barOptions.barWidth, 10)) / 100 / 2 + l * (this.visibleI + u.indexOf(f)) + c * b)), {\n          barYPosition: a,\n          barXPosition: s,\n          barHeight: n,\n          barWidth: l\n        };\n      }\n    }, {\n      key: \"drawRangeColumnPaths\",\n      value: function (t) {\n        var e = t.indexes,\n          i = t.x,\n          a = t.xDivision,\n          s = t.barWidth,\n          r = t.barXPosition,\n          o = t.zeroH,\n          n = this.w,\n          l = e.i,\n          h = e.j,\n          c = e.realIndex,\n          d = e.translationsIndex,\n          g = this.yRatio[d],\n          u = this.getRangeValue(c, h),\n          f = Math.min(u.start, u.end),\n          p = Math.max(u.start, u.end);\n        void 0 === this.series[l][h] || null === this.series[l][h] ? f = o : (f = o - f / g, p = o - p / g);\n        var x = Math.abs(p - f),\n          b = this.barHelpers.getColumnPaths({\n            barXPosition: r,\n            barWidth: s,\n            y1: f,\n            y2: p,\n            strokeWidth: this.strokeWidth,\n            series: this.seriesRangeEnd,\n            realIndex: c,\n            i: c,\n            j: h,\n            w: n\n          });\n        if (n.globals.isXNumeric) {\n          var v = this.getBarXForNumericXAxis({\n            x: i,\n            j: h,\n            realIndex: c,\n            barWidth: s\n          });\n          i = v.x, r = v.barXPosition;\n        } else i += a;\n        return {\n          pathTo: b.pathTo,\n          pathFrom: b.pathFrom,\n          barHeight: x,\n          x: i,\n          y: u.start < 0 && u.end < 0 ? f : p,\n          goalY: this.barHelpers.getGoalValues(\"y\", null, o, l, h, d),\n          barXPosition: r\n        };\n      }\n    }, {\n      key: \"preventBarOverflow\",\n      value: function (t) {\n        var e = this.w;\n        return t < 0 && (t = 0), t > e.globals.gridWidth && (t = e.globals.gridWidth), t;\n      }\n    }, {\n      key: \"drawRangeBarPaths\",\n      value: function (t) {\n        var e = t.indexes,\n          i = t.y,\n          a = t.y1,\n          s = t.y2,\n          r = t.yDivision,\n          o = t.barHeight,\n          n = t.barYPosition,\n          l = t.zeroW,\n          h = this.w,\n          c = e.realIndex,\n          d = e.j,\n          g = this.preventBarOverflow(l + a / this.invertedYRatio),\n          u = this.preventBarOverflow(l + s / this.invertedYRatio),\n          f = this.getRangeValue(c, d),\n          p = Math.abs(u - g),\n          x = this.barHelpers.getBarpaths({\n            barYPosition: n,\n            barHeight: o,\n            x1: g,\n            x2: u,\n            strokeWidth: this.strokeWidth,\n            series: this.seriesRangeEnd,\n            i: c,\n            realIndex: c,\n            j: d,\n            w: h\n          });\n        return h.globals.isXNumeric || (i += r), {\n          pathTo: x.pathTo,\n          pathFrom: x.pathFrom,\n          barWidth: p,\n          x: f.start < 0 && f.end < 0 ? g : u,\n          goalX: this.barHelpers.getGoalValues(\"x\", l, null, c, d),\n          y: i\n        };\n      }\n    }, {\n      key: \"getRangeValue\",\n      value: function (t, e) {\n        var i = this.w;\n        return {\n          start: i.globals.seriesRangeStart[t][e],\n          end: i.globals.seriesRangeEnd[t][e]\n        };\n      }\n    }]), a;\n  }(),\n  Yt = function () {\n    function t(e) {\n      i(this, t), this.w = e.w, this.lineCtx = e;\n    }\n    return s(t, [{\n      key: \"sameValueSeriesFix\",\n      value: function (t, e) {\n        var i = this.w;\n        if ((\"gradient\" === i.config.fill.type || \"gradient\" === i.config.fill.type[t]) && new A(this.lineCtx.ctx, i).seriesHaveSameValues(t)) {\n          var a = e[t].slice();\n          a[a.length - 1] = a[a.length - 1] + 1e-6, e[t] = a;\n        }\n        return e;\n      }\n    }, {\n      key: \"calculatePoints\",\n      value: function (t) {\n        var e = t.series,\n          i = t.realIndex,\n          a = t.x,\n          s = t.y,\n          r = t.i,\n          o = t.j,\n          n = t.prevY,\n          l = this.w,\n          h = [],\n          c = [];\n        if (0 === o) {\n          var d = this.lineCtx.categoryAxisCorrection + l.config.markers.offsetX;\n          l.globals.isXNumeric && (d = (l.globals.seriesX[i][0] - l.globals.minX) / this.lineCtx.xRatio + l.config.markers.offsetX), h.push(d), c.push(m.isNumber(e[r][0]) ? n + l.config.markers.offsetY : null), h.push(a + l.config.markers.offsetX), c.push(m.isNumber(e[r][o + 1]) ? s + l.config.markers.offsetY : null);\n        } else h.push(a + l.config.markers.offsetX), c.push(m.isNumber(e[r][o + 1]) ? s + l.config.markers.offsetY : null);\n        return {\n          x: h,\n          y: c\n        };\n      }\n    }, {\n      key: \"checkPreviousPaths\",\n      value: function (t) {\n        for (var e = t.pathFromLine, i = t.pathFromArea, a = t.realIndex, s = this.w, r = 0; r < s.globals.previousPaths.length; r++) {\n          var o = s.globals.previousPaths[r];\n          (\"line\" === o.type || \"area\" === o.type) && o.paths.length > 0 && parseInt(o.realIndex, 10) === parseInt(a, 10) && (\"line\" === o.type ? (this.lineCtx.appendPathFrom = !1, e = s.globals.previousPaths[r].paths[0].d) : \"area\" === o.type && (this.lineCtx.appendPathFrom = !1, i = s.globals.previousPaths[r].paths[0].d, s.config.stroke.show && s.globals.previousPaths[r].paths[1] && (e = s.globals.previousPaths[r].paths[1].d)));\n        }\n        return {\n          pathFromLine: e,\n          pathFromArea: i\n        };\n      }\n    }, {\n      key: \"determineFirstPrevY\",\n      value: function (t) {\n        var e,\n          i,\n          a,\n          s = t.i,\n          r = t.realIndex,\n          o = t.series,\n          n = t.prevY,\n          l = t.lineYPosition,\n          h = t.translationsIndex,\n          c = this.w,\n          d = c.config.chart.stacked && !c.globals.comboCharts || c.config.chart.stacked && c.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || \"bar\" === (null === (e = this.w.config.series[r]) || void 0 === e ? void 0 : e.type) || \"column\" === (null === (i = this.w.config.series[r]) || void 0 === i ? void 0 : i.type));\n        if (void 0 !== (null === (a = o[s]) || void 0 === a ? void 0 : a[0])) n = (l = d && s > 0 ? this.lineCtx.prevSeriesY[s - 1][0] : this.lineCtx.zeroY) - o[s][0] / this.lineCtx.yRatio[h] + 2 * (this.lineCtx.isReversed ? o[s][0] / this.lineCtx.yRatio[h] : 0);else if (d && s > 0 && void 0 === o[s][0]) for (var g = s - 1; g >= 0; g--) if (null !== o[g][0] && void 0 !== o[g][0]) {\n          n = l = this.lineCtx.prevSeriesY[g][0];\n          break;\n        }\n        return {\n          prevY: n,\n          lineYPosition: l\n        };\n      }\n    }]), t;\n  }(),\n  Rt = function (t) {\n    for (var e, i, a, s, r = function (t) {\n        for (var e = [], i = t[0], a = t[1], s = e[0] = Ht(i, a), r = 1, o = t.length - 1; r < o; r++) i = a, a = t[r + 1], e[r] = .5 * (s + (s = Ht(i, a)));\n        return e[r] = s, e;\n      }(t), o = t.length - 1, n = [], l = 0; l < o; l++) a = Ht(t[l], t[l + 1]), Math.abs(a) < 1e-6 ? r[l] = r[l + 1] = 0 : (s = (e = r[l] / a) * e + (i = r[l + 1] / a) * i) > 9 && (s = 3 * a / Math.sqrt(s), r[l] = s * e, r[l + 1] = s * i);\n    for (var h = 0; h <= o; h++) s = (t[Math.min(o, h + 1)][0] - t[Math.max(0, h - 1)][0]) / (6 * (1 + r[h] * r[h])), n.push([s || 0, r[h] * s || 0]);\n    return n;\n  },\n  Ft = function (t) {\n    var e = Rt(t),\n      i = t[1],\n      a = t[0],\n      s = [],\n      r = e[1],\n      o = e[0];\n    s.push(a, [a[0] + o[0], a[1] + o[1], i[0] - r[0], i[1] - r[1], i[0], i[1]]);\n    for (var n = 2, l = e.length; n < l; n++) {\n      var h = t[n],\n        c = e[n];\n      s.push([h[0] - c[0], h[1] - c[1], h[0], h[1]]);\n    }\n    return s;\n  },\n  Dt = function (t, e, i) {\n    var a = t.slice(e, i);\n    if (e) {\n      if (i - e > 1 && a[1].length < 6) {\n        var s = a[0].length;\n        a[1] = [2 * a[0][s - 2] - a[0][s - 4], 2 * a[0][s - 1] - a[0][s - 3]].concat(a[1]);\n      }\n      a[0] = a[0].slice(-2);\n    }\n    return a;\n  };\nfunction Ht(t, e) {\n  return (e[1] - t[1]) / (e[0] - t[0]);\n}\nvar Ot = function () {\n  function t(e, a, s) {\n    i(this, t), this.ctx = e, this.w = e.w, this.xyRatios = a, this.pointsChart = !(\"bubble\" !== this.w.config.chart.type && \"scatter\" !== this.w.config.chart.type) || s, this.scatter = new B(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Yt(this), this.markers = new W(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;\n  }\n  return s(t, [{\n    key: \"draw\",\n    value: function (t, e, i, a) {\n      var s,\n        r = this.w,\n        o = new k(this.ctx),\n        n = r.globals.comboCharts ? e : r.config.chart.type,\n        l = o.group({\n          class: \"apexcharts-\".concat(n, \"-series apexcharts-plot-series\")\n        }),\n        h = new A(this.ctx, r);\n      this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t = h.getLogSeries(t), this.yRatio = h.getLogYRatios(this.yRatio), this.prevSeriesY = [];\n      for (var c = [], d = 0; d < t.length; d++) {\n        t = this.lineHelpers.sameValueSeriesFix(d, t);\n        var u = r.globals.comboCharts ? i[d] : d,\n          f = this.yRatio.length > 1 ? u : 0;\n        this._initSerieVariables(t, d, u);\n        var p = [],\n          x = [],\n          b = [],\n          v = r.globals.padHorizontal + this.categoryAxisCorrection;\n        this.ctx.series.addCollapsedClassToSeries(this.elSeries, u), r.globals.isXNumeric && r.globals.seriesX.length > 0 && (v = (r.globals.seriesX[u][0] - r.globals.minX) / this.xRatio), b.push(v);\n        var m,\n          y = v,\n          w = void 0,\n          S = y,\n          C = this.zeroY,\n          L = this.zeroY;\n        C = this.lineHelpers.determineFirstPrevY({\n          i: d,\n          realIndex: u,\n          series: t,\n          prevY: C,\n          lineYPosition: 0,\n          translationsIndex: f\n        }).prevY, \"monotoneCubic\" === r.config.stroke.curve && null === t[d][0] ? p.push(null) : p.push(C), m = C;\n        \"rangeArea\" === n && (w = L = this.lineHelpers.determineFirstPrevY({\n          i: d,\n          realIndex: u,\n          series: a,\n          prevY: L,\n          lineYPosition: 0,\n          translationsIndex: f\n        }).prevY, x.push(null !== p[0] ? L : null));\n        var P = this._calculatePathsFrom({\n            type: n,\n            series: t,\n            i: d,\n            realIndex: u,\n            translationsIndex: f,\n            prevX: S,\n            prevY: C,\n            prevY2: L\n          }),\n          M = [p[0]],\n          I = [x[0]],\n          T = {\n            type: n,\n            series: t,\n            realIndex: u,\n            translationsIndex: f,\n            i: d,\n            x: v,\n            y: 1,\n            pX: y,\n            pY: m,\n            pathsFrom: P,\n            linePaths: [],\n            areaPaths: [],\n            seriesIndex: i,\n            lineYPosition: 0,\n            xArrj: b,\n            yArrj: p,\n            y2Arrj: x,\n            seriesRangeEnd: a\n          },\n          z = this._iterateOverDataPoints(g(g({}, T), {}, {\n            iterations: \"rangeArea\" === n ? t[d].length - 1 : void 0,\n            isRangeStart: !0\n          }));\n        if (\"rangeArea\" === n) {\n          for (var X = this._calculatePathsFrom({\n              series: a,\n              i: d,\n              realIndex: u,\n              prevX: S,\n              prevY: L\n            }), E = this._iterateOverDataPoints(g(g({}, T), {}, {\n              series: a,\n              xArrj: [v],\n              yArrj: M,\n              y2Arrj: I,\n              pY: w,\n              areaPaths: z.areaPaths,\n              pathsFrom: X,\n              iterations: a[d].length - 1,\n              isRangeStart: !1\n            })), Y = z.linePaths.length / 2, R = 0; R < Y; R++) z.linePaths[R] = E.linePaths[R + Y] + z.linePaths[R];\n          z.linePaths.splice(Y), z.pathFromLine = E.pathFromLine + z.pathFromLine;\n        } else z.pathFromArea += \"z\";\n        this._handlePaths({\n          type: n,\n          realIndex: u,\n          i: d,\n          paths: z\n        }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), c.push(this.elSeries);\n      }\n      if (void 0 !== (null === (s = r.config.series[0]) || void 0 === s ? void 0 : s.zIndex) && c.sort(function (t, e) {\n        return Number(t.node.getAttribute(\"zIndex\")) - Number(e.node.getAttribute(\"zIndex\"));\n      }), r.config.chart.stacked) for (var F = c.length - 1; F >= 0; F--) l.add(c[F]);else for (var D = 0; D < c.length; D++) l.add(c[D]);\n      return l;\n    }\n  }, {\n    key: \"_initSerieVariables\",\n    value: function (t, e, i) {\n      var a = this.w,\n        s = new k(this.ctx);\n      this.xDivision = a.globals.gridWidth / (a.globals.dataPoints - (\"on\" === a.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a.config.stroke.width) ? a.config.stroke.width[i] : a.config.stroke.width;\n      var r = 0;\n      this.yRatio.length > 1 && (this.yaxisIndex = a.globals.seriesYAxisReverseMap[i], r = i), this.isReversed = a.config.yaxis[this.yaxisIndex] && a.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a.globals.gridHeight - this.baseLineY[r] - (this.isReversed ? a.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[r] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a.globals.gridHeight || \"end\" === a.config.plotOptions.area.fillTo) && (this.areaBottomY = a.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s.group({\n        class: \"apexcharts-series\",\n        zIndex: void 0 !== a.config.series[i].zIndex ? a.config.series[i].zIndex : i,\n        seriesName: m.escapeString(a.globals.seriesNames[i])\n      }), this.elPointsMain = s.group({\n        class: \"apexcharts-series-markers-wrap\",\n        \"data:realIndex\": i\n      }), this.elDataLabelsWrap = s.group({\n        class: \"apexcharts-datalabels\",\n        \"data:realIndex\": i\n      });\n      var o = t[e].length === a.globals.dataPoints;\n      this.elSeries.attr({\n        \"data:longestSeries\": o,\n        rel: e + 1,\n        \"data:realIndex\": i\n      }), this.appendPathFrom = !0;\n    }\n  }, {\n    key: \"_calculatePathsFrom\",\n    value: function (t) {\n      var e,\n        i,\n        a,\n        s,\n        r = t.type,\n        o = t.series,\n        n = t.i,\n        l = t.realIndex,\n        h = t.translationsIndex,\n        c = t.prevX,\n        d = t.prevY,\n        g = t.prevY2,\n        u = this.w,\n        f = new k(this.ctx);\n      if (null === o[n][0]) {\n        for (var p = 0; p < o[n].length; p++) if (null !== o[n][p]) {\n          c = this.xDivision * p, d = this.zeroY - o[n][p] / this.yRatio[h], e = f.move(c, d), i = f.move(c, this.areaBottomY);\n          break;\n        }\n      } else e = f.move(c, d), \"rangeArea\" === r && (e = f.move(c, g) + f.line(c, d)), i = f.move(c, this.areaBottomY) + f.line(c, d);\n      if (a = f.move(0, this.zeroY) + f.line(0, this.zeroY), s = f.move(0, this.zeroY) + f.line(0, this.zeroY), u.globals.previousPaths.length > 0) {\n        var x = this.lineHelpers.checkPreviousPaths({\n          pathFromLine: a,\n          pathFromArea: s,\n          realIndex: l\n        });\n        a = x.pathFromLine, s = x.pathFromArea;\n      }\n      return {\n        prevX: c,\n        prevY: d,\n        linePath: e,\n        areaPath: i,\n        pathFromLine: a,\n        pathFromArea: s\n      };\n    }\n  }, {\n    key: \"_handlePaths\",\n    value: function (t) {\n      var e = t.type,\n        i = t.realIndex,\n        a = t.i,\n        s = t.paths,\n        r = this.w,\n        o = new k(this.ctx),\n        n = new N(this.ctx);\n      this.prevSeriesY.push(s.yArrj), r.globals.seriesXvalues[i] = s.xArrj, r.globals.seriesYvalues[i] = s.yArrj;\n      var l = r.config.forecastDataPoints;\n      if (l.count > 0 && \"rangeArea\" !== e) {\n        var h = r.globals.seriesXvalues[i][r.globals.seriesXvalues[i].length - l.count - 1],\n          c = o.drawRect(h, 0, r.globals.gridWidth, r.globals.gridHeight, 0);\n        r.globals.dom.elForecastMask.appendChild(c.node);\n        var d = o.drawRect(0, 0, h, r.globals.gridHeight, 0);\n        r.globals.dom.elNonForecastMask.appendChild(d.node);\n      }\n      this.pointsChart || r.globals.delayedElements.push({\n        el: this.elPointsMain.node,\n        index: i\n      });\n      var u = {\n        i: a,\n        realIndex: i,\n        animationDelay: a,\n        initialSpeed: r.config.chart.animations.speed,\n        dataChangeSpeed: r.config.chart.animations.dynamicAnimation.speed,\n        className: \"apexcharts-\".concat(e)\n      };\n      if (\"area\" === e) for (var f = n.fillPath({\n          seriesNumber: i\n        }), p = 0; p < s.areaPaths.length; p++) {\n        var x = o.renderPaths(g(g({}, u), {}, {\n          pathFrom: s.pathFromArea,\n          pathTo: s.areaPaths[p],\n          stroke: \"none\",\n          strokeWidth: 0,\n          strokeLineCap: null,\n          fill: f\n        }));\n        this.elSeries.add(x);\n      }\n      if (r.config.stroke.show && !this.pointsChart) {\n        var b = null;\n        if (\"line\" === e) b = n.fillPath({\n          seriesNumber: i,\n          i: a\n        });else if (\"solid\" === r.config.stroke.fill.type) b = r.globals.stroke.colors[i];else {\n          var v = r.config.fill;\n          r.config.fill = r.config.stroke.fill, b = n.fillPath({\n            seriesNumber: i,\n            i: a\n          }), r.config.fill = v;\n        }\n        for (var m = 0; m < s.linePaths.length; m++) {\n          var y = b;\n          \"rangeArea\" === e && (y = n.fillPath({\n            seriesNumber: i\n          }));\n          var w = g(g({}, u), {}, {\n              pathFrom: s.pathFromLine,\n              pathTo: s.linePaths[m],\n              stroke: b,\n              strokeWidth: this.strokeWidth,\n              strokeLineCap: r.config.stroke.lineCap,\n              fill: \"rangeArea\" === e ? y : \"none\"\n            }),\n            A = o.renderPaths(w);\n          if (this.elSeries.add(A), A.attr(\"fill-rule\", \"evenodd\"), l.count > 0 && \"rangeArea\" !== e) {\n            var S = o.renderPaths(w);\n            S.node.setAttribute(\"stroke-dasharray\", l.dashArray), l.strokeWidth && S.node.setAttribute(\"stroke-width\", l.strokeWidth), this.elSeries.add(S), S.attr(\"clip-path\", \"url(#forecastMask\".concat(r.globals.cuid, \")\")), A.attr(\"clip-path\", \"url(#nonForecastMask\".concat(r.globals.cuid, \")\"));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_iterateOverDataPoints\",\n    value: function (t) {\n      var e,\n        i,\n        a = this,\n        s = t.type,\n        r = t.series,\n        o = t.iterations,\n        n = t.realIndex,\n        l = t.translationsIndex,\n        h = t.i,\n        c = t.x,\n        d = t.y,\n        g = t.pX,\n        u = t.pY,\n        f = t.pathsFrom,\n        p = t.linePaths,\n        x = t.areaPaths,\n        b = t.seriesIndex,\n        v = t.lineYPosition,\n        y = t.xArrj,\n        w = t.yArrj,\n        A = t.y2Arrj,\n        S = t.isRangeStart,\n        C = t.seriesRangeEnd,\n        L = this.w,\n        P = new k(this.ctx),\n        M = this.yRatio,\n        I = f.prevY,\n        T = f.linePath,\n        z = f.areaPath,\n        X = f.pathFromLine,\n        E = f.pathFromArea,\n        Y = m.isNumber(L.globals.minYArr[n]) ? L.globals.minYArr[n] : L.globals.minY;\n      o || (o = L.globals.dataPoints > 1 ? L.globals.dataPoints - 1 : L.globals.dataPoints);\n      var R = function (t, e) {\n          return e - t / M[l] + 2 * (a.isReversed ? t / M[l] : 0);\n        },\n        F = d,\n        D = L.config.chart.stacked && !L.globals.comboCharts || L.config.chart.stacked && L.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || \"bar\" === (null === (e = this.w.config.series[n]) || void 0 === e ? void 0 : e.type) || \"column\" === (null === (i = this.w.config.series[n]) || void 0 === i ? void 0 : i.type)),\n        H = L.config.stroke.curve;\n      Array.isArray(H) && (H = Array.isArray(b) ? H[b[h]] : H[h]);\n      for (var O, N = 0, W = 0; W < o; W++) {\n        var B = void 0 === r[h][W + 1] || null === r[h][W + 1];\n        if (L.globals.isXNumeric) {\n          var G = L.globals.seriesX[n][W + 1];\n          void 0 === L.globals.seriesX[n][W + 1] && (G = L.globals.seriesX[n][o - 1]), c = (G - L.globals.minX) / this.xRatio;\n        } else c += this.xDivision;\n        if (D) {\n          if (h > 0 && L.globals.collapsedSeries.length < L.config.series.length - 1) {\n            v = this.prevSeriesY[function (t) {\n              for (var e = t; e > 0; e--) {\n                if (!(L.globals.collapsedSeriesIndices.indexOf((null == b ? void 0 : b[e]) || e) > -1)) return e;\n                e--;\n              }\n              return 0;\n            }(h - 1)][W + 1];\n          } else v = this.zeroY;\n        } else v = this.zeroY;\n        B ? d = R(Y, v) : (d = R(r[h][W + 1], v), \"rangeArea\" === s && (F = R(C[h][W + 1], v))), y.push(c), !B || \"smooth\" !== L.config.stroke.curve && \"monotoneCubic\" !== L.config.stroke.curve ? (w.push(d), A.push(F)) : (w.push(null), A.push(null));\n        var V = this.lineHelpers.calculatePoints({\n            series: r,\n            x: c,\n            y: d,\n            realIndex: n,\n            i: h,\n            j: W,\n            prevY: I\n          }),\n          j = this._createPaths({\n            type: s,\n            series: r,\n            i: h,\n            realIndex: n,\n            j: W,\n            x: c,\n            y: d,\n            y2: F,\n            xArrj: y,\n            yArrj: w,\n            y2Arrj: A,\n            pX: g,\n            pY: u,\n            pathState: N,\n            segmentStartX: O,\n            linePath: T,\n            areaPath: z,\n            linePaths: p,\n            areaPaths: x,\n            curve: H,\n            isRangeStart: S\n          });\n        x = j.areaPaths, p = j.linePaths, g = j.pX, u = j.pY, N = j.pathState, O = j.segmentStartX, z = j.areaPath, T = j.linePath, !this.appendPathFrom || \"monotoneCubic\" === H && \"rangeArea\" === s || (X += P.line(c, this.zeroY), E += P.line(c, this.zeroY)), this.handleNullDataPoints(r, V, h, W, n), this._handleMarkersAndLabels({\n          type: s,\n          pointsPos: V,\n          i: h,\n          j: W,\n          realIndex: n,\n          isRangeStart: S\n        });\n      }\n      return {\n        yArrj: w,\n        xArrj: y,\n        pathFromArea: E,\n        areaPaths: x,\n        pathFromLine: X,\n        linePaths: p,\n        linePath: T,\n        areaPath: z\n      };\n    }\n  }, {\n    key: \"_handleMarkersAndLabels\",\n    value: function (t) {\n      var e = t.type,\n        i = t.pointsPos,\n        a = t.isRangeStart,\n        s = t.i,\n        r = t.j,\n        o = t.realIndex,\n        n = this.w,\n        l = new G(this.ctx);\n      if (this.pointsChart) this.scatter.draw(this.elSeries, r, {\n        realIndex: o,\n        pointsPos: i,\n        zRatio: this.zRatio,\n        elParent: this.elPointsMain\n      });else {\n        n.globals.series[s].length > 1 && this.elPointsMain.node.classList.add(\"apexcharts-element-hidden\");\n        var h = this.markers.plotChartMarkers(i, o, r + 1);\n        null !== h && this.elPointsMain.add(h);\n      }\n      var c = l.drawDataLabel({\n        type: e,\n        isRangeStart: a,\n        pos: i,\n        i: o,\n        j: r + 1\n      });\n      null !== c && this.elDataLabelsWrap.add(c);\n    }\n  }, {\n    key: \"_createPaths\",\n    value: function (t) {\n      var e = t.type,\n        i = t.series,\n        a = t.i;\n      t.realIndex;\n      var s,\n        r = t.j,\n        o = t.x,\n        n = t.y,\n        l = t.xArrj,\n        h = t.yArrj,\n        c = t.y2,\n        d = t.y2Arrj,\n        g = t.pX,\n        u = t.pY,\n        f = t.pathState,\n        p = t.segmentStartX,\n        x = t.linePath,\n        b = t.areaPath,\n        v = t.linePaths,\n        m = t.areaPaths,\n        y = t.curve,\n        w = t.isRangeStart,\n        A = new k(this.ctx),\n        S = this.areaBottomY,\n        C = \"rangeArea\" === e,\n        L = \"rangeArea\" === e && w;\n      switch (y) {\n        case \"monotoneCubic\":\n          var P = w ? h : d;\n          switch (f) {\n            case 0:\n              if (null === P[r + 1]) break;\n              f = 1;\n            case 1:\n              if (!(C ? l.length === i[a].length : r === i[a].length - 2)) break;\n            case 2:\n              var M = w ? l : l.slice().reverse(),\n                I = w ? P : P.slice().reverse(),\n                T = (s = I, M.map(function (t, e) {\n                  return [t, s[e]];\n                }).filter(function (t) {\n                  return null !== t[1];\n                })),\n                z = T.length > 1 ? Ft(T) : T,\n                X = [];\n              C && (L ? m = T : X = m.reverse());\n              var E = 0,\n                Y = 0;\n              if (function (t, e) {\n                for (var i = function (t) {\n                    var e = [],\n                      i = 0;\n                    return t.forEach(function (t) {\n                      null !== t ? i++ : i > 0 && (e.push(i), i = 0);\n                    }), i > 0 && e.push(i), e;\n                  }(t), a = [], s = 0, r = 0; s < i.length; r += i[s++]) a[s] = Dt(e, r, r + i[s]);\n                return a;\n              }(I, z).forEach(function (t) {\n                E++;\n                var e = function (t) {\n                    for (var e = \"\", i = 0; i < t.length; i++) {\n                      var a = t[i],\n                        s = a.length;\n                      s > 4 ? (e += \"C\".concat(a[0], \", \").concat(a[1]), e += \", \".concat(a[2], \", \").concat(a[3]), e += \", \".concat(a[4], \", \").concat(a[5])) : s > 2 && (e += \"S\".concat(a[0], \", \").concat(a[1]), e += \", \".concat(a[2], \", \").concat(a[3]));\n                    }\n                    return e;\n                  }(t),\n                  i = Y,\n                  a = (Y += t.length) - 1;\n                L ? x = A.move(T[i][0], T[i][1]) + e : C ? x = A.move(X[i][0], X[i][1]) + A.line(T[i][0], T[i][1]) + e + A.line(X[a][0], X[a][1]) : (x = A.move(T[i][0], T[i][1]) + e, b = x + A.line(T[a][0], S) + A.line(T[i][0], S) + \"z\", m.push(b)), v.push(x);\n              }), C && E > 1 && !L) {\n                var R = v.slice(E).reverse();\n                v.splice(E), R.forEach(function (t) {\n                  return v.push(t);\n                });\n              }\n              f = 0;\n          }\n          break;\n        case \"smooth\":\n          var F = .35 * (o - g);\n          if (null === i[a][r]) f = 0;else switch (f) {\n            case 0:\n              if (p = g, x = L ? A.move(g, d[r]) + A.line(g, u) : A.move(g, u), b = A.move(g, u), null === i[a][r + 1]) {\n                v.push(x), m.push(b);\n                break;\n              }\n              if (f = 1, r < i[a].length - 2) {\n                var D = A.curve(g + F, u, o - F, n, o, n);\n                x += D, b += D;\n                break;\n              }\n            case 1:\n              if (null === i[a][r + 1]) x += L ? A.line(g, c) : A.move(g, u), b += A.line(g, S) + A.line(p, S) + \"z\", v.push(x), m.push(b), f = -1;else {\n                var H = A.curve(g + F, u, o - F, n, o, n);\n                x += H, b += H, r >= i[a].length - 2 && (L && (x += A.curve(o, n, o, n, o, c) + A.move(o, c)), b += A.curve(o, n, o, n, o, S) + A.line(p, S) + \"z\", v.push(x), m.push(b), f = -1);\n              }\n          }\n          g = o, u = n;\n          break;\n        default:\n          var O = function (t, e, i) {\n            var a = [];\n            switch (t) {\n              case \"stepline\":\n                a = A.line(e, null, \"H\") + A.line(null, i, \"V\");\n                break;\n              case \"linestep\":\n                a = A.line(null, i, \"V\") + A.line(e, null, \"H\");\n                break;\n              case \"straight\":\n                a = A.line(e, i);\n            }\n            return a;\n          };\n          if (null === i[a][r]) f = 0;else switch (f) {\n            case 0:\n              if (p = g, x = L ? A.move(g, d[r]) + A.line(g, u) : A.move(g, u), b = A.move(g, u), null === i[a][r + 1]) {\n                v.push(x), m.push(b);\n                break;\n              }\n              if (f = 1, r < i[a].length - 2) {\n                var N = O(y, o, n);\n                x += N, b += N;\n                break;\n              }\n            case 1:\n              if (null === i[a][r + 1]) x += L ? A.line(g, c) : A.move(g, u), b += A.line(g, S) + A.line(p, S) + \"z\", v.push(x), m.push(b), f = -1;else {\n                var W = O(y, o, n);\n                x += W, b += W, r >= i[a].length - 2 && (L && (x += A.line(o, c)), b += A.line(o, S) + A.line(p, S) + \"z\", v.push(x), m.push(b), f = -1);\n              }\n          }\n          g = o, u = n;\n      }\n      return {\n        linePaths: v,\n        areaPaths: m,\n        pX: g,\n        pY: u,\n        pathState: f,\n        segmentStartX: p,\n        linePath: x,\n        areaPath: b\n      };\n    }\n  }, {\n    key: \"handleNullDataPoints\",\n    value: function (t, e, i, a, s) {\n      var r = this.w;\n      if (null === t[i][a] && r.config.markers.showNullDataPoints || 1 === t[i].length) {\n        var o = this.strokeWidth - r.config.markers.strokeWidth / 2;\n        o > 0 || (o = 0);\n        var n = this.markers.plotChartMarkers(e, s, a + 1, o, !0);\n        null !== n && this.elPointsMain.add(n);\n      }\n    }\n  }]), t;\n}();\nwindow.TreemapSquared = {}, window.TreemapSquared.generate = function () {\n  function t(e, i, a, s) {\n    this.xoffset = e, this.yoffset = i, this.height = s, this.width = a, this.shortestEdge = function () {\n      return Math.min(this.height, this.width);\n    }, this.getCoordinates = function (t) {\n      var e,\n        i = [],\n        a = this.xoffset,\n        s = this.yoffset,\n        o = r(t) / this.height,\n        n = r(t) / this.width;\n      if (this.width >= this.height) for (e = 0; e < t.length; e++) i.push([a, s, a + o, s + t[e] / o]), s += t[e] / o;else for (e = 0; e < t.length; e++) i.push([a, s, a + t[e] / n, s + n]), a += t[e] / n;\n      return i;\n    }, this.cutArea = function (e) {\n      var i;\n      if (this.width >= this.height) {\n        var a = e / this.height,\n          s = this.width - a;\n        i = new t(this.xoffset + a, this.yoffset, s, this.height);\n      } else {\n        var r = e / this.width,\n          o = this.height - r;\n        i = new t(this.xoffset, this.yoffset + r, this.width, o);\n      }\n      return i;\n    };\n  }\n  function e(e, a, s, o, n) {\n    o = void 0 === o ? 0 : o, n = void 0 === n ? 0 : n;\n    var l = i(function (t, e) {\n      var i,\n        a = [],\n        s = e / r(t);\n      for (i = 0; i < t.length; i++) a[i] = t[i] * s;\n      return a;\n    }(e, a * s), [], new t(o, n, a, s), []);\n    return function (t) {\n      var e,\n        i,\n        a = [];\n      for (e = 0; e < t.length; e++) for (i = 0; i < t[e].length; i++) a.push(t[e][i]);\n      return a;\n    }(l);\n  }\n  function i(t, e, s, o) {\n    var n, l, h;\n    if (0 !== t.length) return n = s.shortestEdge(), function (t, e, i) {\n      var s;\n      if (0 === t.length) return !0;\n      (s = t.slice()).push(e);\n      var r = a(t, i),\n        o = a(s, i);\n      return r >= o;\n    }(e, l = t[0], n) ? (e.push(l), i(t.slice(1), e, s, o)) : (h = s.cutArea(r(e), o), o.push(s.getCoordinates(e)), i(t, [], h, o)), o;\n    o.push(s.getCoordinates(e));\n  }\n  function a(t, e) {\n    var i = Math.min.apply(Math, t),\n      a = Math.max.apply(Math, t),\n      s = r(t);\n    return Math.max(Math.pow(e, 2) * a / Math.pow(s, 2), Math.pow(s, 2) / (Math.pow(e, 2) * i));\n  }\n  function s(t) {\n    return t && t.constructor === Array;\n  }\n  function r(t) {\n    var e,\n      i = 0;\n    for (e = 0; e < t.length; e++) i += t[e];\n    return i;\n  }\n  function o(t) {\n    var e,\n      i = 0;\n    if (s(t[0])) for (e = 0; e < t.length; e++) i += o(t[e]);else i = r(t);\n    return i;\n  }\n  return function t(i, a, r, n, l) {\n    n = void 0 === n ? 0 : n, l = void 0 === l ? 0 : l;\n    var h,\n      c,\n      d = [],\n      g = [];\n    if (s(i[0])) {\n      for (c = 0; c < i.length; c++) d[c] = o(i[c]);\n      for (h = e(d, a, r, n, l), c = 0; c < i.length; c++) g.push(t(i[c], h[c][2] - h[c][0], h[c][3] - h[c][1], h[c][0], h[c][1]));\n    } else g = e(i, a, r, n, l);\n    return g;\n  };\n}();\nvar Nt,\n  Wt,\n  Bt = function () {\n    function t(e, a) {\n      i(this, t), this.ctx = e, this.w = e.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new Pt(e), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];\n    }\n    return s(t, [{\n      key: \"draw\",\n      value: function (t) {\n        var e = this,\n          i = this.w,\n          a = new k(this.ctx),\n          s = new N(this.ctx),\n          r = a.group({\n            class: \"apexcharts-treemap\"\n          });\n        if (i.globals.noData) return r;\n        var o = [];\n        return t.forEach(function (t) {\n          var e = t.map(function (t) {\n            return Math.abs(t);\n          });\n          o.push(e);\n        }), this.negRange = this.helpers.checkColorRange(), i.config.series.forEach(function (t, i) {\n          t.data.forEach(function (t) {\n            Array.isArray(e.labels[i]) || (e.labels[i] = []), e.labels[i].push(t.x);\n          });\n        }), window.TreemapSquared.generate(o, i.globals.gridWidth, i.globals.gridHeight).forEach(function (o, n) {\n          var l = a.group({\n            class: \"apexcharts-series apexcharts-treemap-series\",\n            seriesName: m.escapeString(i.globals.seriesNames[n]),\n            rel: n + 1,\n            \"data:realIndex\": n\n          });\n          if (i.config.chart.dropShadow.enabled) {\n            var h = i.config.chart.dropShadow;\n            new w(e.ctx).dropShadow(r, h, n);\n          }\n          var c = a.group({\n            class: \"apexcharts-data-labels\"\n          });\n          o.forEach(function (r, o) {\n            var h = r[0],\n              c = r[1],\n              d = r[2],\n              g = r[3],\n              u = a.drawRect(h, c, d - h, g - c, i.config.plotOptions.treemap.borderRadius, \"#fff\", 1, e.strokeWidth, i.config.plotOptions.treemap.useFillColorAsStroke ? p : i.globals.stroke.colors[n]);\n            u.attr({\n              cx: h,\n              cy: c,\n              index: n,\n              i: n,\n              j: o,\n              width: d - h,\n              height: g - c\n            });\n            var f = e.helpers.getShadeColor(i.config.chart.type, n, o, e.negRange),\n              p = f.color;\n            void 0 !== i.config.series[n].data[o] && i.config.series[n].data[o].fillColor && (p = i.config.series[n].data[o].fillColor);\n            var x = s.fillPath({\n              color: p,\n              seriesNumber: n,\n              dataPointIndex: o\n            });\n            u.node.classList.add(\"apexcharts-treemap-rect\"), u.attr({\n              fill: x\n            }), e.helpers.addListeners(u);\n            var b = {\n                x: h + (d - h) / 2,\n                y: c + (g - c) / 2,\n                width: 0,\n                height: 0\n              },\n              v = {\n                x: h,\n                y: c,\n                width: d - h,\n                height: g - c\n              };\n            if (i.config.chart.animations.enabled && !i.globals.dataChanged) {\n              var m = 1;\n              i.globals.resized || (m = i.config.chart.animations.speed), e.animateTreemap(u, b, v, m);\n            }\n            if (i.globals.dataChanged) {\n              var y = 1;\n              e.dynamicAnim.enabled && i.globals.shouldAnimate && (y = e.dynamicAnim.speed, i.globals.previousPaths[n] && i.globals.previousPaths[n][o] && i.globals.previousPaths[n][o].rect && (b = i.globals.previousPaths[n][o].rect), e.animateTreemap(u, b, v, y));\n            }\n            var w = e.getFontSize(r),\n              k = i.config.dataLabels.formatter(e.labels[n][o], {\n                value: i.globals.series[n][o],\n                seriesIndex: n,\n                dataPointIndex: o,\n                w: i\n              });\n            \"truncate\" === i.config.plotOptions.treemap.dataLabels.format && (w = parseInt(i.config.dataLabels.style.fontSize, 10), k = e.truncateLabels(k, w, h, c, d, g));\n            var A = null;\n            i.globals.series[n][o] && (A = e.helpers.calculateDataLabels({\n              text: k,\n              x: (h + d) / 2,\n              y: (c + g) / 2 + e.strokeWidth / 2 + w / 3,\n              i: n,\n              j: o,\n              colorProps: f,\n              fontSize: w,\n              series: t\n            })), i.config.dataLabels.enabled && A && e.rotateToFitLabel(A, w, k, h, c, d, g), l.add(u), null !== A && l.add(A);\n          }), l.add(c), r.add(l);\n        }), r;\n      }\n    }, {\n      key: \"getFontSize\",\n      value: function (t) {\n        var e = this.w;\n        var i,\n          a,\n          s,\n          r,\n          o = function t(e) {\n            var i,\n              a = 0;\n            if (Array.isArray(e[0])) for (i = 0; i < e.length; i++) a += t(e[i]);else for (i = 0; i < e.length; i++) a += e[i].length;\n            return a;\n          }(this.labels) / function t(e) {\n            var i,\n              a = 0;\n            if (Array.isArray(e[0])) for (i = 0; i < e.length; i++) a += t(e[i]);else for (i = 0; i < e.length; i++) a += 1;\n            return a;\n          }(this.labels);\n        return i = t[2] - t[0], a = t[3] - t[1], s = i * a, r = Math.pow(s, .5), Math.min(r / o, parseInt(e.config.dataLabels.style.fontSize, 10));\n      }\n    }, {\n      key: \"rotateToFitLabel\",\n      value: function (t, e, i, a, s, r, o) {\n        var n = new k(this.ctx),\n          l = n.getTextRects(i, e);\n        if (l.width + this.w.config.stroke.width + 5 > r - a && l.width <= o - s) {\n          var h = n.rotateAroundCenter(t.node);\n          t.node.setAttribute(\"transform\", \"rotate(-90 \".concat(h.x, \" \").concat(h.y, \") translate(\").concat(l.height / 3, \")\"));\n        }\n      }\n    }, {\n      key: \"truncateLabels\",\n      value: function (t, e, i, a, s, r) {\n        var o = new k(this.ctx),\n          n = o.getTextRects(t, e).width + this.w.config.stroke.width + 5 > s - i && r - a > s - i ? r - a : s - i,\n          l = o.getTextBasedOnMaxWidth({\n            text: t,\n            maxWidth: n,\n            fontSize: e\n          });\n        return t.length !== l.length && n / e < 5 ? \"\" : l;\n      }\n    }, {\n      key: \"animateTreemap\",\n      value: function (t, e, i, a) {\n        var s = new y(this.ctx);\n        s.animateRect(t, {\n          x: e.x,\n          y: e.y,\n          width: e.width,\n          height: e.height\n        }, {\n          x: i.x,\n          y: i.y,\n          width: i.width,\n          height: i.height\n        }, a, function () {\n          s.animationCompleted(t);\n        });\n      }\n    }]), t;\n  }(),\n  Gt = 86400,\n  Vt = 10 / Gt,\n  jt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;\n    }\n    return s(t, [{\n      key: \"calculateTimeScaleTicks\",\n      value: function (t, e) {\n        var i = this,\n          a = this.w;\n        if (a.globals.allSeriesCollapsed) return a.globals.labels = [], a.globals.timescaleLabels = [], [];\n        var s = new L(this.ctx),\n          r = (e - t) / 864e5;\n        this.determineInterval(r), a.globals.disableZoomIn = !1, a.globals.disableZoomOut = !1, r < Vt ? a.globals.disableZoomIn = !0 : r > 5e4 && (a.globals.disableZoomOut = !0);\n        var o = s.getTimeUnitsfromTimestamp(t, e, this.utc),\n          n = a.globals.gridWidth / r,\n          l = n / 24,\n          h = l / 60,\n          c = h / 60,\n          d = Math.floor(24 * r),\n          u = Math.floor(1440 * r),\n          f = Math.floor(r * Gt),\n          p = Math.floor(r),\n          x = Math.floor(r / 30),\n          b = Math.floor(r / 365),\n          v = {\n            minMillisecond: o.minMillisecond,\n            minSecond: o.minSecond,\n            minMinute: o.minMinute,\n            minHour: o.minHour,\n            minDate: o.minDate,\n            minMonth: o.minMonth,\n            minYear: o.minYear\n          },\n          m = {\n            firstVal: v,\n            currentMillisecond: v.minMillisecond,\n            currentSecond: v.minSecond,\n            currentMinute: v.minMinute,\n            currentHour: v.minHour,\n            currentMonthDate: v.minDate,\n            currentDate: v.minDate,\n            currentMonth: v.minMonth,\n            currentYear: v.minYear,\n            daysWidthOnXAxis: n,\n            hoursWidthOnXAxis: l,\n            minutesWidthOnXAxis: h,\n            secondsWidthOnXAxis: c,\n            numberOfSeconds: f,\n            numberOfMinutes: u,\n            numberOfHours: d,\n            numberOfDays: p,\n            numberOfMonths: x,\n            numberOfYears: b\n          };\n        switch (this.tickInterval) {\n          case \"years\":\n            this.generateYearScale(m);\n            break;\n          case \"months\":\n          case \"half_year\":\n            this.generateMonthScale(m);\n            break;\n          case \"months_days\":\n          case \"months_fortnight\":\n          case \"days\":\n          case \"week_days\":\n            this.generateDayScale(m);\n            break;\n          case \"hours\":\n            this.generateHourScale(m);\n            break;\n          case \"minutes_fives\":\n          case \"minutes\":\n            this.generateMinuteScale(m);\n            break;\n          case \"seconds_tens\":\n          case \"seconds_fives\":\n          case \"seconds\":\n            this.generateSecondScale(m);\n        }\n        var y = this.timeScaleArray.map(function (t) {\n          var e = {\n            position: t.position,\n            unit: t.unit,\n            year: t.year,\n            day: t.day ? t.day : 1,\n            hour: t.hour ? t.hour : 0,\n            month: t.month + 1\n          };\n          return \"month\" === t.unit ? g(g({}, e), {}, {\n            day: 1,\n            value: t.value + 1\n          }) : \"day\" === t.unit || \"hour\" === t.unit ? g(g({}, e), {}, {\n            value: t.value\n          }) : \"minute\" === t.unit ? g(g({}, e), {}, {\n            value: t.value,\n            minute: t.value\n          }) : \"second\" === t.unit ? g(g({}, e), {}, {\n            value: t.value,\n            minute: t.minute,\n            second: t.second\n          }) : t;\n        });\n        return y.filter(function (t) {\n          var e = 1,\n            s = Math.ceil(a.globals.gridWidth / 120),\n            r = t.value;\n          void 0 !== a.config.xaxis.tickAmount && (s = a.config.xaxis.tickAmount), y.length > s && (e = Math.floor(y.length / s));\n          var o = !1,\n            n = !1;\n          switch (i.tickInterval) {\n            case \"years\":\n              \"year\" === t.unit && (o = !0);\n              break;\n            case \"half_year\":\n              e = 7, \"year\" === t.unit && (o = !0);\n              break;\n            case \"months\":\n              e = 1, \"year\" === t.unit && (o = !0);\n              break;\n            case \"months_fortnight\":\n              e = 15, \"year\" !== t.unit && \"month\" !== t.unit || (o = !0), 30 === r && (n = !0);\n              break;\n            case \"months_days\":\n              e = 10, \"month\" === t.unit && (o = !0), 30 === r && (n = !0);\n              break;\n            case \"week_days\":\n              e = 8, \"month\" === t.unit && (o = !0);\n              break;\n            case \"days\":\n              e = 1, \"month\" === t.unit && (o = !0);\n              break;\n            case \"hours\":\n              \"day\" === t.unit && (o = !0);\n              break;\n            case \"minutes_fives\":\n            case \"seconds_fives\":\n              r % 5 != 0 && (n = !0);\n              break;\n            case \"seconds_tens\":\n              r % 10 != 0 && (n = !0);\n          }\n          if (\"hours\" === i.tickInterval || \"minutes_fives\" === i.tickInterval || \"seconds_tens\" === i.tickInterval || \"seconds_fives\" === i.tickInterval) {\n            if (!n) return !0;\n          } else if ((r % e == 0 || o) && !n) return !0;\n        });\n      }\n    }, {\n      key: \"recalcDimensionsBasedOnFormat\",\n      value: function (t, e) {\n        var i = this.w,\n          a = this.formatDates(t),\n          s = this.removeOverlappingTS(a);\n        i.globals.timescaleLabels = s.slice(), new ct(this.ctx).plotCoords();\n      }\n    }, {\n      key: \"determineInterval\",\n      value: function (t) {\n        var e = 24 * t,\n          i = 60 * e;\n        switch (!0) {\n          case t / 365 > 5:\n            this.tickInterval = \"years\";\n            break;\n          case t > 800:\n            this.tickInterval = \"half_year\";\n            break;\n          case t > 180:\n            this.tickInterval = \"months\";\n            break;\n          case t > 90:\n            this.tickInterval = \"months_fortnight\";\n            break;\n          case t > 60:\n            this.tickInterval = \"months_days\";\n            break;\n          case t > 30:\n            this.tickInterval = \"week_days\";\n            break;\n          case t > 2:\n            this.tickInterval = \"days\";\n            break;\n          case e > 2.4:\n            this.tickInterval = \"hours\";\n            break;\n          case i > 15:\n            this.tickInterval = \"minutes_fives\";\n            break;\n          case i > 5:\n            this.tickInterval = \"minutes\";\n            break;\n          case i > 1:\n            this.tickInterval = \"seconds_tens\";\n            break;\n          case 60 * i > 20:\n            this.tickInterval = \"seconds_fives\";\n            break;\n          default:\n            this.tickInterval = \"seconds\";\n        }\n      }\n    }, {\n      key: \"generateYearScale\",\n      value: function (t) {\n        var e = t.firstVal,\n          i = t.currentMonth,\n          a = t.currentYear,\n          s = t.daysWidthOnXAxis,\n          r = t.numberOfYears,\n          o = e.minYear,\n          n = 0,\n          l = new L(this.ctx),\n          h = \"year\";\n        if (e.minDate > 1 || e.minMonth > 0) {\n          var c = l.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);\n          n = (l.determineDaysOfYear(e.minYear) - c + 1) * s, o = e.minYear + 1, this.timeScaleArray.push({\n            position: n,\n            value: o,\n            unit: h,\n            year: o,\n            month: m.monthMod(i + 1)\n          });\n        } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({\n          position: n,\n          value: o,\n          unit: h,\n          year: a,\n          month: m.monthMod(i + 1)\n        });\n        for (var d = o, g = n, u = 0; u < r; u++) d++, g = l.determineDaysOfYear(d - 1) * s + g, this.timeScaleArray.push({\n          position: g,\n          value: d,\n          unit: h,\n          year: d,\n          month: 1\n        });\n      }\n    }, {\n      key: \"generateMonthScale\",\n      value: function (t) {\n        var e = t.firstVal,\n          i = t.currentMonthDate,\n          a = t.currentMonth,\n          s = t.currentYear,\n          r = t.daysWidthOnXAxis,\n          o = t.numberOfMonths,\n          n = a,\n          l = 0,\n          h = new L(this.ctx),\n          c = \"month\",\n          d = 0;\n        if (e.minDate > 1) {\n          l = (h.determineDaysOfMonths(a + 1, e.minYear) - i + 1) * r, n = m.monthMod(a + 1);\n          var g = s + d,\n            u = m.monthMod(n),\n            f = n;\n          0 === n && (c = \"year\", f = g, u = 1, g += d += 1), this.timeScaleArray.push({\n            position: l,\n            value: f,\n            unit: c,\n            year: g,\n            month: u\n          });\n        } else this.timeScaleArray.push({\n          position: l,\n          value: n,\n          unit: c,\n          year: s,\n          month: m.monthMod(a)\n        });\n        for (var p = n + 1, x = l, b = 0, v = 1; b < o; b++, v++) {\n          0 === (p = m.monthMod(p)) ? (c = \"year\", d += 1) : c = \"month\";\n          var y = this._getYear(s, p, d);\n          x = h.determineDaysOfMonths(p, y) * r + x;\n          var w = 0 === p ? y : p;\n          this.timeScaleArray.push({\n            position: x,\n            value: w,\n            unit: c,\n            year: y,\n            month: 0 === p ? 1 : p\n          }), p++;\n        }\n      }\n    }, {\n      key: \"generateDayScale\",\n      value: function (t) {\n        var e = t.firstVal,\n          i = t.currentMonth,\n          a = t.currentYear,\n          s = t.hoursWidthOnXAxis,\n          r = t.numberOfDays,\n          o = new L(this.ctx),\n          n = \"day\",\n          l = e.minDate + 1,\n          h = l,\n          c = function (t, e, i) {\n            return t > o.determineDaysOfMonths(e + 1, i) ? (h = 1, n = \"month\", g = e += 1, e) : e;\n          },\n          d = (24 - e.minHour) * s,\n          g = l,\n          u = c(h, i, a);\n        0 === e.minHour && 1 === e.minDate ? (d = 0, g = m.monthMod(e.minMonth), n = \"month\", h = e.minDate) : 1 !== e.minDate && 0 === e.minHour && 0 === e.minMinute && (d = 0, l = e.minDate, g = l, u = c(h = l, i, a)), this.timeScaleArray.push({\n          position: d,\n          value: g,\n          unit: n,\n          year: this._getYear(a, u, 0),\n          month: m.monthMod(u),\n          day: h\n        });\n        for (var f = d, p = 0; p < r; p++) {\n          n = \"day\", u = c(h += 1, u, this._getYear(a, u, 0));\n          var x = this._getYear(a, u, 0);\n          f = 24 * s + f;\n          var b = 1 === h ? m.monthMod(u) : h;\n          this.timeScaleArray.push({\n            position: f,\n            value: b,\n            unit: n,\n            year: x,\n            month: m.monthMod(u),\n            day: b\n          });\n        }\n      }\n    }, {\n      key: \"generateHourScale\",\n      value: function (t) {\n        var e = t.firstVal,\n          i = t.currentDate,\n          a = t.currentMonth,\n          s = t.currentYear,\n          r = t.minutesWidthOnXAxis,\n          o = t.numberOfHours,\n          n = new L(this.ctx),\n          l = \"hour\",\n          h = function (t, e) {\n            return t > n.determineDaysOfMonths(e + 1, s) && (p = 1, e += 1), {\n              month: e,\n              date: p\n            };\n          },\n          c = function (t, e) {\n            return t > n.determineDaysOfMonths(e + 1, s) ? e += 1 : e;\n          },\n          d = 60 - (e.minMinute + e.minSecond / 60),\n          g = d * r,\n          u = e.minHour + 1,\n          f = u;\n        60 === d && (g = 0, f = u = e.minHour);\n        var p = i;\n        f >= 24 && (f = 0, p += 1, l = \"day\");\n        var x = h(p, a).month;\n        x = c(p, x), this.timeScaleArray.push({\n          position: g,\n          value: u,\n          unit: l,\n          day: p,\n          hour: f,\n          year: s,\n          month: m.monthMod(x)\n        }), f++;\n        for (var b = g, v = 0; v < o; v++) {\n          if (l = \"hour\", f >= 24) f = 0, l = \"day\", x = h(p += 1, x).month, x = c(p, x);\n          var y = this._getYear(s, x, 0);\n          b = 60 * r + b;\n          var w = 0 === f ? p : f;\n          this.timeScaleArray.push({\n            position: b,\n            value: w,\n            unit: l,\n            hour: f,\n            day: p,\n            year: y,\n            month: m.monthMod(x)\n          }), f++;\n        }\n      }\n    }, {\n      key: \"generateMinuteScale\",\n      value: function (t) {\n        for (var e = t.currentMillisecond, i = t.currentSecond, a = t.currentMinute, s = t.currentHour, r = t.currentDate, o = t.currentMonth, n = t.currentYear, l = t.minutesWidthOnXAxis, h = t.secondsWidthOnXAxis, c = t.numberOfMinutes, d = a + 1, g = r, u = o, f = n, p = s, x = (60 - i - e / 1e3) * h, b = 0; b < c; b++) d >= 60 && (d = 0, 24 === (p += 1) && (p = 0)), this.timeScaleArray.push({\n          position: x,\n          value: d,\n          unit: \"minute\",\n          hour: p,\n          minute: d,\n          day: g,\n          year: this._getYear(f, u, 0),\n          month: m.monthMod(u)\n        }), x += l, d++;\n      }\n    }, {\n      key: \"generateSecondScale\",\n      value: function (t) {\n        for (var e = t.currentMillisecond, i = t.currentSecond, a = t.currentMinute, s = t.currentHour, r = t.currentDate, o = t.currentMonth, n = t.currentYear, l = t.secondsWidthOnXAxis, h = t.numberOfSeconds, c = i + 1, d = a, g = r, u = o, f = n, p = s, x = (1e3 - e) / 1e3 * l, b = 0; b < h; b++) c >= 60 && (c = 0, ++d >= 60 && (d = 0, 24 === ++p && (p = 0))), this.timeScaleArray.push({\n          position: x,\n          value: c,\n          unit: \"second\",\n          hour: p,\n          minute: d,\n          second: c,\n          day: g,\n          year: this._getYear(f, u, 0),\n          month: m.monthMod(u)\n        }), x += l, c++;\n      }\n    }, {\n      key: \"createRawDateString\",\n      value: function (t, e) {\n        var i = t.year;\n        return 0 === t.month && (t.month = 1), i += \"-\" + (\"0\" + t.month.toString()).slice(-2), \"day\" === t.unit ? i += \"day\" === t.unit ? \"-\" + (\"0\" + e).slice(-2) : \"-01\" : i += \"-\" + (\"0\" + (t.day ? t.day : \"1\")).slice(-2), \"hour\" === t.unit ? i += \"hour\" === t.unit ? \"T\" + (\"0\" + e).slice(-2) : \"T00\" : i += \"T\" + (\"0\" + (t.hour ? t.hour : \"0\")).slice(-2), \"minute\" === t.unit ? i += \":\" + (\"0\" + e).slice(-2) : i += \":\" + (t.minute ? (\"0\" + t.minute).slice(-2) : \"00\"), \"second\" === t.unit ? i += \":\" + (\"0\" + e).slice(-2) : i += \":00\", this.utc && (i += \".000Z\"), i;\n      }\n    }, {\n      key: \"formatDates\",\n      value: function (t) {\n        var e = this,\n          i = this.w;\n        return t.map(function (t) {\n          var a = t.value.toString(),\n            s = new L(e.ctx),\n            r = e.createRawDateString(t, a),\n            o = s.getDate(s.parseDate(r));\n          if (e.utc || (o = s.getDate(s.parseDateWithTimezone(r))), void 0 === i.config.xaxis.labels.format) {\n            var n = \"dd MMM\",\n              l = i.config.xaxis.labels.datetimeFormatter;\n            \"year\" === t.unit && (n = l.year), \"month\" === t.unit && (n = l.month), \"day\" === t.unit && (n = l.day), \"hour\" === t.unit && (n = l.hour), \"minute\" === t.unit && (n = l.minute), \"second\" === t.unit && (n = l.second), a = s.formatDate(o, n);\n          } else a = s.formatDate(o, i.config.xaxis.labels.format);\n          return {\n            dateString: r,\n            position: t.position,\n            value: a,\n            unit: t.unit,\n            year: t.year,\n            month: t.month\n          };\n        });\n      }\n    }, {\n      key: \"removeOverlappingTS\",\n      value: function (t) {\n        var e,\n          i = this,\n          a = new k(this.ctx),\n          s = !1;\n        t.length > 0 && t[0].value && t.every(function (e) {\n          return e.value.length === t[0].value.length;\n        }) && (s = !0, e = a.getTextRects(t[0].value).width);\n        var r = 0,\n          o = t.map(function (o, n) {\n            if (n > 0 && i.w.config.xaxis.labels.hideOverlappingLabels) {\n              var l = s ? e : a.getTextRects(t[r].value).width,\n                h = t[r].position;\n              return o.position > h + l + 10 ? (r = n, o) : null;\n            }\n            return o;\n          });\n        return o = o.filter(function (t) {\n          return null !== t;\n        });\n      }\n    }, {\n      key: \"_getYear\",\n      value: function (t, e, i) {\n        return t + Math.floor(e / 12) + i;\n      }\n    }]), t;\n  }(),\n  _t = function () {\n    function t(e, a) {\n      i(this, t), this.ctx = a, this.w = a.w, this.el = e;\n    }\n    return s(t, [{\n      key: \"setupElements\",\n      value: function () {\n        var t = this.w,\n          e = t.globals,\n          i = t.config,\n          a = i.chart.type;\n        e.axisCharts = [\"line\", \"area\", \"bar\", \"rangeBar\", \"rangeArea\", \"candlestick\", \"boxPlot\", \"scatter\", \"bubble\", \"radar\", \"heatmap\", \"treemap\"].includes(a), e.xyCharts = [\"line\", \"area\", \"bar\", \"rangeBar\", \"rangeArea\", \"candlestick\", \"boxPlot\", \"scatter\", \"bubble\"].includes(a), e.isBarHorizontal = [\"bar\", \"rangeBar\", \"boxPlot\"].includes(a) && i.plotOptions.bar.horizontal, e.chartClass = \".apexcharts\".concat(e.chartID), e.dom.baseEl = this.el, e.dom.elWrap = document.createElement(\"div\"), k.setAttrs(e.dom.elWrap, {\n          id: e.chartClass.substring(1),\n          class: \"apexcharts-canvas \".concat(e.chartClass.substring(1))\n        }), this.el.appendChild(e.dom.elWrap), e.dom.Paper = new window.SVG.Doc(e.dom.elWrap), e.dom.Paper.attr({\n          class: \"apexcharts-svg\",\n          \"xmlns:data\": \"ApexChartsNS\",\n          transform: \"translate(\".concat(i.chart.offsetX, \", \").concat(i.chart.offsetY, \")\")\n        }), e.dom.Paper.node.style.background = \"dark\" !== i.theme.mode || i.chart.background ? \"light\" !== i.theme.mode || i.chart.background ? i.chart.background : \"#fff\" : \"#424242\", this.setSVGDimensions(), e.dom.elLegendForeign = document.createElementNS(e.SVGNS, \"foreignObject\"), k.setAttrs(e.dom.elLegendForeign, {\n          x: 0,\n          y: 0,\n          width: e.svgWidth,\n          height: e.svgHeight\n        }), e.dom.elLegendWrap = document.createElement(\"div\"), e.dom.elLegendWrap.classList.add(\"apexcharts-legend\"), e.dom.elLegendWrap.setAttribute(\"xmlns\", \"http://www.w3.org/1999/xhtml\"), e.dom.elLegendForeign.appendChild(e.dom.elLegendWrap), e.dom.Paper.node.appendChild(e.dom.elLegendForeign), e.dom.elGraphical = e.dom.Paper.group().attr({\n          class: \"apexcharts-inner apexcharts-graphical\"\n        }), e.dom.elDefs = e.dom.Paper.defs(), e.dom.Paper.add(e.dom.elGraphical), e.dom.elGraphical.add(e.dom.elDefs);\n      }\n    }, {\n      key: \"plotChartType\",\n      value: function (t, e) {\n        var i = this.w,\n          a = this.ctx,\n          s = i.config,\n          r = i.globals,\n          o = {\n            line: {\n              series: [],\n              i: []\n            },\n            area: {\n              series: [],\n              i: []\n            },\n            scatter: {\n              series: [],\n              i: []\n            },\n            bubble: {\n              series: [],\n              i: []\n            },\n            column: {\n              series: [],\n              i: []\n            },\n            candlestick: {\n              series: [],\n              i: []\n            },\n            boxPlot: {\n              series: [],\n              i: []\n            },\n            rangeBar: {\n              series: [],\n              i: []\n            },\n            rangeArea: {\n              series: [],\n              seriesRangeEnd: [],\n              i: []\n            }\n          },\n          n = s.chart.type || \"line\",\n          l = null,\n          h = 0;\n        r.series.forEach(function (e, a) {\n          var s = t[a].type || n;\n          o[s] ? (\"rangeArea\" === s ? (o[s].series.push(r.seriesRangeStart[a]), o[s].seriesRangeEnd.push(r.seriesRangeEnd[a])) : o[s].series.push(e), o[s].i.push(a), \"column\" !== s && \"bar\" !== s || (i.globals.columnSeries = o.column)) : [\"heatmap\", \"treemap\", \"pie\", \"donut\", \"polarArea\", \"radialBar\", \"radar\"].includes(s) ? l = s : \"bar\" === s ? (o.column.series.push(e), o.column.i.push(a)) : console.warn(\"You have specified an unrecognized series type (\".concat(s, \").\")), n !== s && \"scatter\" !== s && h++;\n        }), h > 0 && (l && console.warn(\"Chart or series type \".concat(l, \" cannot appear with other chart or series types.\")), o.column.series.length > 0 && s.plotOptions.bar.horizontal && (h -= o.column.series.length, o.column = {\n          series: [],\n          i: []\n        }, i.globals.columnSeries = {\n          series: [],\n          i: []\n        }, console.warn(\"Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`\"))), r.comboCharts || (r.comboCharts = h > 0);\n        var c = new Ot(a, e),\n          d = new Lt(a, e);\n        a.pie = new Tt(a);\n        var g = new Xt(a);\n        a.rangeBar = new Et(a, e);\n        var u = new zt(a),\n          f = [];\n        if (r.comboCharts) {\n          var x,\n            b,\n            v = new A(a);\n          if (o.area.series.length > 0) (x = f).push.apply(x, p(v.drawSeriesByGroup(o.area, r.areaGroups, \"area\", c)));\n          if (o.column.series.length > 0) if (s.chart.stacked) {\n            var m = new Ct(a, e);\n            f.push(m.draw(o.column.series, o.column.i));\n          } else a.bar = new St(a, e), f.push(a.bar.draw(o.column.series, o.column.i));\n          if (o.rangeArea.series.length > 0 && f.push(c.draw(o.rangeArea.series, \"rangeArea\", o.rangeArea.i, o.rangeArea.seriesRangeEnd)), o.line.series.length > 0) (b = f).push.apply(b, p(v.drawSeriesByGroup(o.line, r.lineGroups, \"line\", c)));\n          if (o.candlestick.series.length > 0 && f.push(d.draw(o.candlestick.series, \"candlestick\", o.candlestick.i)), o.boxPlot.series.length > 0 && f.push(d.draw(o.boxPlot.series, \"boxPlot\", o.boxPlot.i)), o.rangeBar.series.length > 0 && f.push(a.rangeBar.draw(o.rangeBar.series, o.rangeBar.i)), o.scatter.series.length > 0) {\n            var y = new Ot(a, e, !0);\n            f.push(y.draw(o.scatter.series, \"scatter\", o.scatter.i));\n          }\n          if (o.bubble.series.length > 0) {\n            var w = new Ot(a, e, !0);\n            f.push(w.draw(o.bubble.series, \"bubble\", o.bubble.i));\n          }\n        } else switch (s.chart.type) {\n          case \"line\":\n            f = c.draw(r.series, \"line\");\n            break;\n          case \"area\":\n            f = c.draw(r.series, \"area\");\n            break;\n          case \"bar\":\n            if (s.chart.stacked) f = new Ct(a, e).draw(r.series);else a.bar = new St(a, e), f = a.bar.draw(r.series);\n            break;\n          case \"candlestick\":\n            f = new Lt(a, e).draw(r.series, \"candlestick\");\n            break;\n          case \"boxPlot\":\n            f = new Lt(a, e).draw(r.series, s.chart.type);\n            break;\n          case \"rangeBar\":\n            f = a.rangeBar.draw(r.series);\n            break;\n          case \"rangeArea\":\n            f = c.draw(r.seriesRangeStart, \"rangeArea\", void 0, r.seriesRangeEnd);\n            break;\n          case \"heatmap\":\n            f = new Mt(a, e).draw(r.series);\n            break;\n          case \"treemap\":\n            f = new Bt(a, e).draw(r.series);\n            break;\n          case \"pie\":\n          case \"donut\":\n          case \"polarArea\":\n            f = a.pie.draw(r.series);\n            break;\n          case \"radialBar\":\n            f = g.draw(r.series);\n            break;\n          case \"radar\":\n            f = u.draw(r.series);\n            break;\n          default:\n            f = c.draw(r.series);\n        }\n        return f;\n      }\n    }, {\n      key: \"setSVGDimensions\",\n      value: function () {\n        var t = this.w,\n          e = t.globals,\n          i = t.config;\n        i.chart.width = i.chart.width || \"100%\", i.chart.height = i.chart.height || \"auto\", e.svgWidth = i.chart.width, e.svgHeight = i.chart.height;\n        var a = m.getDimensions(this.el),\n          s = i.chart.width.toString().split(/[0-9]+/g).pop();\n        \"%\" === s ? m.isNumber(a[0]) && (0 === a[0].width && (a = m.getDimensions(this.el.parentNode)), e.svgWidth = a[0] * parseInt(i.chart.width, 10) / 100) : \"px\" !== s && \"\" !== s || (e.svgWidth = parseInt(i.chart.width, 10));\n        var r = String(i.chart.height).toString().split(/[0-9]+/g).pop();\n        if (\"auto\" !== e.svgHeight && \"\" !== e.svgHeight) {\n          if (\"%\" === r) {\n            var o = m.getDimensions(this.el.parentNode);\n            e.svgHeight = o[1] * parseInt(i.chart.height, 10) / 100;\n          } else e.svgHeight = parseInt(i.chart.height, 10);\n        } else e.svgHeight = e.axisCharts ? e.svgWidth / 1.61 : e.svgWidth / 1.2;\n        if (e.svgWidth = Math.max(e.svgWidth, 0), e.svgHeight = Math.max(e.svgHeight, 0), k.setAttrs(e.dom.Paper.node, {\n          width: e.svgWidth,\n          height: e.svgHeight\n        }), \"%\" !== r) {\n          var n = i.chart.sparkline.enabled ? 0 : e.axisCharts ? i.chart.parentHeightOffset : 0;\n          e.dom.Paper.node.parentNode.parentNode.style.minHeight = \"\".concat(e.svgHeight + n, \"px\");\n        }\n        e.dom.elWrap.style.width = \"\".concat(e.svgWidth, \"px\"), e.dom.elWrap.style.height = \"\".concat(e.svgHeight, \"px\");\n      }\n    }, {\n      key: \"shiftGraphPosition\",\n      value: function () {\n        var t = this.w.globals,\n          e = t.translateY,\n          i = t.translateX;\n        k.setAttrs(t.dom.elGraphical.node, {\n          transform: \"translate(\".concat(i, \", \").concat(e, \")\")\n        });\n      }\n    }, {\n      key: \"resizeNonAxisCharts\",\n      value: function () {\n        var t = this.w,\n          e = t.globals,\n          i = 0,\n          a = t.config.chart.sparkline.enabled ? 1 : 15;\n        a += t.config.grid.padding.bottom, [\"top\", \"bottom\"].includes(t.config.legend.position) && t.config.legend.show && !t.config.legend.floating && (i = new gt(this.ctx).legendHelpers.getLegendDimensions().clwh + 7);\n        var s = t.globals.dom.baseEl.querySelector(\".apexcharts-radialbar, .apexcharts-pie\"),\n          r = 2.05 * t.globals.radialSize;\n        if (s && !t.config.chart.sparkline.enabled && 0 !== t.config.plotOptions.radialBar.startAngle) {\n          var o = m.getBoundingClientRect(s);\n          r = o.bottom;\n          var n = o.bottom - o.top;\n          r = Math.max(2.05 * t.globals.radialSize, n);\n        }\n        var l = Math.ceil(r + e.translateY + i + a);\n        e.dom.elLegendForeign && e.dom.elLegendForeign.setAttribute(\"height\", l), t.config.chart.height && String(t.config.chart.height).includes(\"%\") || (e.dom.elWrap.style.height = \"\".concat(l, \"px\"), k.setAttrs(e.dom.Paper.node, {\n          height: l\n        }), e.dom.Paper.node.parentNode.parentNode.style.minHeight = \"\".concat(l, \"px\"));\n      }\n    }, {\n      key: \"coreCalculations\",\n      value: function () {\n        new J(this.ctx).init();\n      }\n    }, {\n      key: \"resetGlobals\",\n      value: function () {\n        var t = this,\n          e = function () {\n            return t.w.config.series.map(function () {\n              return [];\n            });\n          },\n          i = new H(),\n          a = this.w.globals;\n        i.initGlobalVars(a), a.seriesXvalues = e(), a.seriesYvalues = e();\n      }\n    }, {\n      key: \"isMultipleY\",\n      value: function () {\n        return !!(Array.isArray(this.w.config.yaxis) && this.w.config.yaxis.length > 1) && (this.w.globals.isMultipleYAxis = !0, !0);\n      }\n    }, {\n      key: \"xySettings\",\n      value: function () {\n        var t = this.w,\n          e = null;\n        if (t.globals.axisCharts) {\n          if (\"back\" === t.config.xaxis.crosshairs.position && new it(this.ctx).drawXCrosshairs(), \"back\" === t.config.yaxis[0].crosshairs.position && new it(this.ctx).drawYCrosshairs(), \"datetime\" === t.config.xaxis.type && void 0 === t.config.xaxis.labels.formatter) {\n            this.ctx.timeScale = new jt(this.ctx);\n            var i = [];\n            isFinite(t.globals.minX) && isFinite(t.globals.maxX) && !t.globals.isBarHorizontal ? i = this.ctx.timeScale.calculateTimeScaleTicks(t.globals.minX, t.globals.maxX) : t.globals.isBarHorizontal && (i = this.ctx.timeScale.calculateTimeScaleTicks(t.globals.minY, t.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i);\n          }\n          e = new A(this.ctx).getCalculatedRatios();\n        }\n        return e;\n      }\n    }, {\n      key: \"updateSourceChart\",\n      value: function (t) {\n        this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({\n          chart: {\n            selection: {\n              xaxis: {\n                min: t.w.globals.minX,\n                max: t.w.globals.maxX\n              }\n            }\n          }\n        }, !1, !1);\n      }\n    }, {\n      key: \"setupBrushHandler\",\n      value: function () {\n        var t = this,\n          e = this.w;\n        if (e.config.chart.brush.enabled && \"function\" != typeof e.config.chart.events.selection) {\n          var i = Array.isArray(e.config.chart.brush.targets) ? e.config.chart.brush.targets : [e.config.chart.brush.target];\n          i.forEach(function (e) {\n            var i = ApexCharts.getChartByID(e);\n            i.w.globals.brushSource = t.ctx, \"function\" != typeof i.w.config.chart.events.zoomed && (i.w.config.chart.events.zoomed = function () {\n              return t.updateSourceChart(i);\n            }), \"function\" != typeof i.w.config.chart.events.scrolled && (i.w.config.chart.events.scrolled = function () {\n              return t.updateSourceChart(i);\n            });\n          }), e.config.chart.events.selection = function (t, e) {\n            i.forEach(function (t) {\n              ApexCharts.getChartByID(t).ctx.updateHelpers._updateOptions({\n                xaxis: {\n                  min: e.xaxis.min,\n                  max: e.xaxis.max\n                }\n              }, !1, !1, !1, !1);\n            });\n          };\n        }\n      }\n    }]), t;\n  }(),\n  Ut = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"_updateOptions\",\n      value: function (t) {\n        var e = this,\n          i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n          a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n          s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],\n          r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        return new Promise(function (o) {\n          var n = [e.ctx];\n          s && (n = e.ctx.getSyncedCharts()), e.ctx.w.globals.isExecCalled && (n = [e.ctx], e.ctx.w.globals.isExecCalled = !1), n.forEach(function (s, l) {\n            var h = s.w;\n            if (h.globals.shouldAnimate = a, i || (h.globals.resized = !0, h.globals.dataChanged = !0, a && s.series.getPreviousPaths()), t && \"object\" === b(t) && (s.config = new D(t), t = A.extendArrayProps(s.config, t, h), s.w.globals.chartID !== e.ctx.w.globals.chartID && delete t.series, h.config = m.extend(h.config, t), r && (h.globals.lastXAxis = t.xaxis ? m.clone(t.xaxis) : [], h.globals.lastYAxis = t.yaxis ? m.clone(t.yaxis) : [], h.globals.initialConfig = m.extend({}, h.config), h.globals.initialSeries = m.clone(h.config.series), t.series))) {\n              for (var c = 0; c < h.globals.collapsedSeriesIndices.length; c++) {\n                var d = h.config.series[h.globals.collapsedSeriesIndices[c]];\n                h.globals.collapsedSeries[c].data = h.globals.axisCharts ? d.data.slice() : d;\n              }\n              for (var g = 0; g < h.globals.ancillaryCollapsedSeriesIndices.length; g++) {\n                var u = h.config.series[h.globals.ancillaryCollapsedSeriesIndices[g]];\n                h.globals.ancillaryCollapsedSeries[g].data = h.globals.axisCharts ? u.data.slice() : u;\n              }\n              s.series.emptyCollapsedSeries(h.config.series);\n            }\n            return s.update(t).then(function () {\n              l === n.length - 1 && o(s);\n            });\n          });\n        });\n      }\n    }, {\n      key: \"_updateSeries\",\n      value: function (t, e) {\n        var i = this,\n          a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return new Promise(function (s) {\n          var r,\n            o = i.w;\n          return o.globals.shouldAnimate = e, o.globals.dataChanged = !0, e && i.ctx.series.getPreviousPaths(), o.globals.axisCharts ? (0 === (r = t.map(function (t, e) {\n            return i._extendSeries(t, e);\n          })).length && (r = [{\n            data: []\n          }]), o.config.series = r) : o.config.series = t.slice(), a && (o.globals.initialConfig.series = m.clone(o.config.series), o.globals.initialSeries = m.clone(o.config.series)), i.ctx.update().then(function () {\n            s(i.ctx);\n          });\n        });\n      }\n    }, {\n      key: \"_extendSeries\",\n      value: function (t, e) {\n        var i = this.w,\n          a = i.config.series[e];\n        return g(g({}, i.config.series[e]), {}, {\n          name: t.name ? t.name : null == a ? void 0 : a.name,\n          color: t.color ? t.color : null == a ? void 0 : a.color,\n          type: t.type ? t.type : null == a ? void 0 : a.type,\n          group: t.group ? t.group : null == a ? void 0 : a.group,\n          hidden: void 0 !== t.hidden ? t.hidden : null == a ? void 0 : a.hidden,\n          data: t.data ? t.data : null == a ? void 0 : a.data,\n          zIndex: void 0 !== t.zIndex ? t.zIndex : e\n        });\n      }\n    }, {\n      key: \"toggleDataPointSelection\",\n      value: function (t, e) {\n        var i = this.w,\n          a = null,\n          s = \".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\");\n        return i.globals.axisCharts ? a = i.globals.dom.Paper.select(\"\".concat(s, \" path[j='\").concat(e, \"'], \").concat(s, \" circle[j='\").concat(e, \"'], \").concat(s, \" rect[j='\").concat(e, \"']\")).members[0] : void 0 === e && (a = i.globals.dom.Paper.select(\"\".concat(s, \" path[j='\").concat(t, \"']\")).members[0], \"pie\" !== i.config.chart.type && \"polarArea\" !== i.config.chart.type && \"donut\" !== i.config.chart.type || this.ctx.pie.pieClicked(t)), a ? (new k(this.ctx).pathMouseDown(a, null), a.node ? a.node : null) : (console.warn(\"toggleDataPointSelection: Element not found\"), null);\n      }\n    }, {\n      key: \"forceXAxisUpdate\",\n      value: function (t) {\n        var e = this.w;\n        if ([\"min\", \"max\"].forEach(function (i) {\n          void 0 !== t.xaxis[i] && (e.config.xaxis[i] = t.xaxis[i], e.globals.lastXAxis[i] = t.xaxis[i]);\n        }), t.xaxis.categories && t.xaxis.categories.length && (e.config.xaxis.categories = t.xaxis.categories), e.config.xaxis.convertedCatToNumeric) {\n          var i = new F(t);\n          t = i.convertCatToNumericXaxis(t, this.ctx);\n        }\n        return t;\n      }\n    }, {\n      key: \"forceYAxisUpdate\",\n      value: function (t) {\n        return t.chart && t.chart.stacked && \"100%\" === t.chart.stackType && (Array.isArray(t.yaxis) ? t.yaxis.forEach(function (e, i) {\n          t.yaxis[i].min = 0, t.yaxis[i].max = 100;\n        }) : (t.yaxis.min = 0, t.yaxis.max = 100)), t;\n      }\n    }, {\n      key: \"revertDefaultAxisMinMax\",\n      value: function (t) {\n        var e = this,\n          i = this.w,\n          a = i.globals.lastXAxis,\n          s = i.globals.lastYAxis;\n        t && t.xaxis && (a = t.xaxis), t && t.yaxis && (s = t.yaxis), i.config.xaxis.min = a.min, i.config.xaxis.max = a.max;\n        var r = function (t) {\n          void 0 !== s[t] && (i.config.yaxis[t].min = s[t].min, i.config.yaxis[t].max = s[t].max);\n        };\n        i.config.yaxis.map(function (t, a) {\n          i.globals.zoomed || void 0 !== s[a] ? r(a) : void 0 !== e.ctx.opts.yaxis[a] && (t.min = e.ctx.opts.yaxis[a].min, t.max = e.ctx.opts.yaxis[a].max);\n        });\n      }\n    }]), t;\n  }();\nNt = \"undefined\" != typeof window ? window : void 0, Wt = function (t, e) {\n  var i = (void 0 !== this ? this : t).SVG = function (t) {\n    if (i.supported) return t = new i.Doc(t), i.parser.draw || i.prepare(), t;\n  };\n  if (i.ns = \"http://www.w3.org/2000/svg\", i.xmlns = \"http://www.w3.org/2000/xmlns/\", i.xlink = \"http://www.w3.org/1999/xlink\", i.svgjs = \"http://svgjs.dev\", i.supported = !0, !i.supported) return !1;\n  i.did = 1e3, i.eid = function (t) {\n    return \"Svgjs\" + c(t) + i.did++;\n  }, i.create = function (t) {\n    var i = e.createElementNS(this.ns, t);\n    return i.setAttribute(\"id\", this.eid(t)), i;\n  }, i.extend = function () {\n    var t, e;\n    e = (t = [].slice.call(arguments)).pop();\n    for (var a = t.length - 1; a >= 0; a--) if (t[a]) for (var s in e) t[a].prototype[s] = e[s];\n    i.Set && i.Set.inherit && i.Set.inherit();\n  }, i.invent = function (t) {\n    var e = \"function\" == typeof t.create ? t.create : function () {\n      this.constructor.call(this, i.create(t.create));\n    };\n    return t.inherit && (e.prototype = new t.inherit()), t.extend && i.extend(e, t.extend), t.construct && i.extend(t.parent || i.Container, t.construct), e;\n  }, i.adopt = function (e) {\n    return e ? e.instance ? e.instance : ((a = \"svg\" == e.nodeName ? e.parentNode instanceof t.SVGElement ? new i.Nested() : new i.Doc() : \"linearGradient\" == e.nodeName ? new i.Gradient(\"linear\") : \"radialGradient\" == e.nodeName ? new i.Gradient(\"radial\") : i[c(e.nodeName)] ? new i[c(e.nodeName)]() : new i.Element(e)).type = e.nodeName, a.node = e, e.instance = a, a instanceof i.Doc && a.namespace().defs(), a.setData(JSON.parse(e.getAttribute(\"svgjs:data\")) || {}), a) : null;\n    var a;\n  }, i.prepare = function () {\n    var t = e.getElementsByTagName(\"body\")[0],\n      a = (t ? new i.Doc(t) : i.adopt(e.documentElement).nested()).size(2, 0);\n    i.parser = {\n      body: t || e.documentElement,\n      draw: a.style(\"opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden\").node,\n      poly: a.polyline().node,\n      path: a.path().node,\n      native: i.create(\"svg\")\n    };\n  }, i.parser = {\n    native: i.create(\"svg\")\n  }, e.addEventListener(\"DOMContentLoaded\", function () {\n    i.parser.draw || i.prepare();\n  }, !1), i.regex = {\n    numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i,\n    hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n    rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/,\n    reference: /#([a-z0-9\\-_]+)/i,\n    transforms: /\\)\\s*,?\\s*/,\n    whitespace: /\\s/g,\n    isHex: /^#[a-f0-9]{3,6}$/i,\n    isRgb: /^rgb\\(/,\n    isCss: /[^:]+:[^;]+;?/,\n    isBlank: /^(\\s+)?$/,\n    isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    isPercent: /^-?[\\d\\.]+%$/,\n    isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i,\n    delimiter: /[\\s,]+/,\n    hyphen: /([^e])\\-/gi,\n    pathLetters: /[MLHVCSQTAZ]/gi,\n    isPathLetter: /[MLHVCSQTAZ]/i,\n    numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi,\n    dots: /\\./g\n  }, i.utils = {\n    map: function (t, e) {\n      for (var i = t.length, a = [], s = 0; s < i; s++) a.push(e(t[s]));\n      return a;\n    },\n    filter: function (t, e) {\n      for (var i = t.length, a = [], s = 0; s < i; s++) e(t[s]) && a.push(t[s]);\n      return a;\n    },\n    filterSVGElements: function (e) {\n      return this.filter(e, function (e) {\n        return e instanceof t.SVGElement;\n      });\n    }\n  }, i.defaults = {\n    attrs: {\n      \"fill-opacity\": 1,\n      \"stroke-opacity\": 1,\n      \"stroke-width\": 0,\n      \"stroke-linejoin\": \"miter\",\n      \"stroke-linecap\": \"butt\",\n      fill: \"#000000\",\n      stroke: \"#000000\",\n      opacity: 1,\n      x: 0,\n      y: 0,\n      cx: 0,\n      cy: 0,\n      width: 0,\n      height: 0,\n      r: 0,\n      rx: 0,\n      ry: 0,\n      offset: 0,\n      \"stop-opacity\": 1,\n      \"stop-color\": \"#000000\",\n      \"font-size\": 16,\n      \"font-family\": \"Helvetica, Arial, sans-serif\",\n      \"text-anchor\": \"start\"\n    }\n  }, i.Color = function (t) {\n    var e, a;\n    this.r = 0, this.g = 0, this.b = 0, t && (\"string\" == typeof t ? i.regex.isRgb.test(t) ? (e = i.regex.rgb.exec(t.replace(i.regex.whitespace, \"\")), this.r = parseInt(e[1]), this.g = parseInt(e[2]), this.b = parseInt(e[3])) : i.regex.isHex.test(t) && (e = i.regex.hex.exec(4 == (a = t).length ? [\"#\", a.substring(1, 2), a.substring(1, 2), a.substring(2, 3), a.substring(2, 3), a.substring(3, 4), a.substring(3, 4)].join(\"\") : a), this.r = parseInt(e[1], 16), this.g = parseInt(e[2], 16), this.b = parseInt(e[3], 16)) : \"object\" === b(t) && (this.r = t.r, this.g = t.g, this.b = t.b));\n  }, i.extend(i.Color, {\n    toString: function () {\n      return this.toHex();\n    },\n    toHex: function () {\n      return \"#\" + d(this.r) + d(this.g) + d(this.b);\n    },\n    toRgb: function () {\n      return \"rgb(\" + [this.r, this.g, this.b].join() + \")\";\n    },\n    brightness: function () {\n      return this.r / 255 * .3 + this.g / 255 * .59 + this.b / 255 * .11;\n    },\n    morph: function (t) {\n      return this.destination = new i.Color(t), this;\n    },\n    at: function (t) {\n      return this.destination ? (t = t < 0 ? 0 : t > 1 ? 1 : t, new i.Color({\n        r: ~~(this.r + (this.destination.r - this.r) * t),\n        g: ~~(this.g + (this.destination.g - this.g) * t),\n        b: ~~(this.b + (this.destination.b - this.b) * t)\n      })) : this;\n    }\n  }), i.Color.test = function (t) {\n    return t += \"\", i.regex.isHex.test(t) || i.regex.isRgb.test(t);\n  }, i.Color.isRgb = function (t) {\n    return t && \"number\" == typeof t.r && \"number\" == typeof t.g && \"number\" == typeof t.b;\n  }, i.Color.isColor = function (t) {\n    return i.Color.isRgb(t) || i.Color.test(t);\n  }, i.Array = function (t, e) {\n    0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()), this.value = this.parse(t);\n  }, i.extend(i.Array, {\n    toString: function () {\n      return this.value.join(\" \");\n    },\n    valueOf: function () {\n      return this.value;\n    },\n    parse: function (t) {\n      return t = t.valueOf(), Array.isArray(t) ? t : this.split(t);\n    }\n  }), i.PointArray = function (t, e) {\n    i.Array.call(this, t, e || [[0, 0]]);\n  }, i.PointArray.prototype = new i.Array(), i.PointArray.prototype.constructor = i.PointArray;\n  for (var a = {\n      M: function (t, e, i) {\n        return e.x = i.x = t[0], e.y = i.y = t[1], [\"M\", e.x, e.y];\n      },\n      L: function (t, e) {\n        return e.x = t[0], e.y = t[1], [\"L\", t[0], t[1]];\n      },\n      H: function (t, e) {\n        return e.x = t[0], [\"H\", t[0]];\n      },\n      V: function (t, e) {\n        return e.y = t[0], [\"V\", t[0]];\n      },\n      C: function (t, e) {\n        return e.x = t[4], e.y = t[5], [\"C\", t[0], t[1], t[2], t[3], t[4], t[5]];\n      },\n      Q: function (t, e) {\n        return e.x = t[2], e.y = t[3], [\"Q\", t[0], t[1], t[2], t[3]];\n      },\n      S: function (t, e) {\n        return e.x = t[2], e.y = t[3], [\"S\", t[0], t[1], t[2], t[3]];\n      },\n      Z: function (t, e, i) {\n        return e.x = i.x, e.y = i.y, [\"Z\"];\n      }\n    }, s = \"mlhvqtcsaz\".split(\"\"), r = 0, o = s.length; r < o; ++r) a[s[r]] = function (t) {\n    return function (e, i, s) {\n      if (\"H\" == t) e[0] = e[0] + i.x;else if (\"V\" == t) e[0] = e[0] + i.y;else if (\"A\" == t) e[5] = e[5] + i.x, e[6] = e[6] + i.y;else for (var r = 0, o = e.length; r < o; ++r) e[r] = e[r] + (r % 2 ? i.y : i.x);\n      if (a && \"function\" == typeof a[t]) return a[t](e, i, s);\n    };\n  }(s[r].toUpperCase());\n  i.PathArray = function (t, e) {\n    i.Array.call(this, t, e || [[\"M\", 0, 0]]);\n  }, i.PathArray.prototype = new i.Array(), i.PathArray.prototype.constructor = i.PathArray, i.extend(i.PathArray, {\n    toString: function () {\n      return function (t) {\n        for (var e = 0, i = t.length, a = \"\"; e < i; e++) a += t[e][0], null != t[e][1] && (a += t[e][1], null != t[e][2] && (a += \" \", a += t[e][2], null != t[e][3] && (a += \" \", a += t[e][3], a += \" \", a += t[e][4], null != t[e][5] && (a += \" \", a += t[e][5], a += \" \", a += t[e][6], null != t[e][7] && (a += \" \", a += t[e][7])))));\n        return a + \" \";\n      }(this.value);\n    },\n    move: function (t, e) {\n      var i = this.bbox();\n      return i.x, i.y, this;\n    },\n    at: function (t) {\n      if (!this.destination) return this;\n      for (var e = this.value, a = this.destination.value, s = [], r = new i.PathArray(), o = 0, n = e.length; o < n; o++) {\n        s[o] = [e[o][0]];\n        for (var l = 1, h = e[o].length; l < h; l++) s[o][l] = e[o][l] + (a[o][l] - e[o][l]) * t;\n        \"A\" === s[o][0] && (s[o][4] = +(0 != s[o][4]), s[o][5] = +(0 != s[o][5]));\n      }\n      return r.value = s, r;\n    },\n    parse: function (t) {\n      if (t instanceof i.PathArray) return t.valueOf();\n      var e,\n        s = {\n          M: 2,\n          L: 2,\n          H: 1,\n          V: 1,\n          C: 6,\n          S: 4,\n          Q: 4,\n          T: 2,\n          A: 7,\n          Z: 0\n        };\n      t = \"string\" == typeof t ? t.replace(i.regex.numbersWithDots, l).replace(i.regex.pathLetters, \" $& \").replace(i.regex.hyphen, \"$1 -\").trim().split(i.regex.delimiter) : t.reduce(function (t, e) {\n        return [].concat.call(t, e);\n      }, []);\n      var r = [],\n        o = new i.Point(),\n        n = new i.Point(),\n        h = 0,\n        c = t.length;\n      do {\n        i.regex.isPathLetter.test(t[h]) ? (e = t[h], ++h) : \"M\" == e ? e = \"L\" : \"m\" == e && (e = \"l\"), r.push(a[e].call(null, t.slice(h, h += s[e.toUpperCase()]).map(parseFloat), o, n));\n      } while (c > h);\n      return r;\n    },\n    bbox: function () {\n      return i.parser.draw || i.prepare(), i.parser.path.setAttribute(\"d\", this.toString()), i.parser.path.getBBox();\n    }\n  }), i.Number = i.invent({\n    create: function (t, e) {\n      this.value = 0, this.unit = e || \"\", \"number\" == typeof t ? this.value = isNaN(t) ? 0 : isFinite(t) ? t : t < 0 ? -34e37 : 34e37 : \"string\" == typeof t ? (e = t.match(i.regex.numberAndUnit)) && (this.value = parseFloat(e[1]), \"%\" == e[5] ? this.value /= 100 : \"s\" == e[5] && (this.value *= 1e3), this.unit = e[5]) : t instanceof i.Number && (this.value = t.valueOf(), this.unit = t.unit);\n    },\n    extend: {\n      toString: function () {\n        return (\"%\" == this.unit ? ~~(1e8 * this.value) / 1e6 : \"s\" == this.unit ? this.value / 1e3 : this.value) + this.unit;\n      },\n      toJSON: function () {\n        return this.toString();\n      },\n      valueOf: function () {\n        return this.value;\n      },\n      plus: function (t) {\n        return t = new i.Number(t), new i.Number(this + t, this.unit || t.unit);\n      },\n      minus: function (t) {\n        return t = new i.Number(t), new i.Number(this - t, this.unit || t.unit);\n      },\n      times: function (t) {\n        return t = new i.Number(t), new i.Number(this * t, this.unit || t.unit);\n      },\n      divide: function (t) {\n        return t = new i.Number(t), new i.Number(this / t, this.unit || t.unit);\n      },\n      to: function (t) {\n        var e = new i.Number(this);\n        return \"string\" == typeof t && (e.unit = t), e;\n      },\n      morph: function (t) {\n        return this.destination = new i.Number(t), t.relative && (this.destination.value += this.value), this;\n      },\n      at: function (t) {\n        return this.destination ? new i.Number(this.destination).minus(this).times(t).plus(this) : this;\n      }\n    }\n  }), i.Element = i.invent({\n    create: function (t) {\n      this._stroke = i.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t) && (this.type = t.nodeName, this.node.instance = this, this._stroke = t.getAttribute(\"stroke\") || this._stroke);\n    },\n    extend: {\n      x: function (t) {\n        return this.attr(\"x\", t);\n      },\n      y: function (t) {\n        return this.attr(\"y\", t);\n      },\n      cx: function (t) {\n        return null == t ? this.x() + this.width() / 2 : this.x(t - this.width() / 2);\n      },\n      cy: function (t) {\n        return null == t ? this.y() + this.height() / 2 : this.y(t - this.height() / 2);\n      },\n      move: function (t, e) {\n        return this.x(t).y(e);\n      },\n      center: function (t, e) {\n        return this.cx(t).cy(e);\n      },\n      width: function (t) {\n        return this.attr(\"width\", t);\n      },\n      height: function (t) {\n        return this.attr(\"height\", t);\n      },\n      size: function (t, e) {\n        var a = g(this, t, e);\n        return this.width(new i.Number(a.width)).height(new i.Number(a.height));\n      },\n      clone: function (t) {\n        this.writeDataToDom();\n        var e = p(this.node.cloneNode(!0));\n        return t ? t.add(e) : this.after(e), e;\n      },\n      remove: function () {\n        return this.parent() && this.parent().removeElement(this), this;\n      },\n      replace: function (t) {\n        return this.after(t).remove(), t;\n      },\n      addTo: function (t) {\n        return t.put(this);\n      },\n      putIn: function (t) {\n        return t.add(this);\n      },\n      id: function (t) {\n        return this.attr(\"id\", t);\n      },\n      show: function () {\n        return this.style(\"display\", \"\");\n      },\n      hide: function () {\n        return this.style(\"display\", \"none\");\n      },\n      visible: function () {\n        return \"none\" != this.style(\"display\");\n      },\n      toString: function () {\n        return this.attr(\"id\");\n      },\n      classes: function () {\n        var t = this.attr(\"class\");\n        return null == t ? [] : t.trim().split(i.regex.delimiter);\n      },\n      hasClass: function (t) {\n        return -1 != this.classes().indexOf(t);\n      },\n      addClass: function (t) {\n        if (!this.hasClass(t)) {\n          var e = this.classes();\n          e.push(t), this.attr(\"class\", e.join(\" \"));\n        }\n        return this;\n      },\n      removeClass: function (t) {\n        return this.hasClass(t) && this.attr(\"class\", this.classes().filter(function (e) {\n          return e != t;\n        }).join(\" \")), this;\n      },\n      toggleClass: function (t) {\n        return this.hasClass(t) ? this.removeClass(t) : this.addClass(t);\n      },\n      reference: function (t) {\n        return i.get(this.attr(t));\n      },\n      parent: function (e) {\n        var a = this;\n        if (!a.node.parentNode) return null;\n        if (a = i.adopt(a.node.parentNode), !e) return a;\n        for (; a && a.node instanceof t.SVGElement;) {\n          if (\"string\" == typeof e ? a.matches(e) : a instanceof e) return a;\n          if (!a.node.parentNode || \"#document\" == a.node.parentNode.nodeName) return null;\n          a = i.adopt(a.node.parentNode);\n        }\n      },\n      doc: function () {\n        return this instanceof i.Doc ? this : this.parent(i.Doc);\n      },\n      parents: function (t) {\n        var e = [],\n          i = this;\n        do {\n          if (!(i = i.parent(t)) || !i.node) break;\n          e.push(i);\n        } while (i.parent);\n        return e;\n      },\n      matches: function (t) {\n        return function (t, e) {\n          return (t.matches || t.matchesSelector || t.msMatchesSelector || t.mozMatchesSelector || t.webkitMatchesSelector || t.oMatchesSelector).call(t, e);\n        }(this.node, t);\n      },\n      native: function () {\n        return this.node;\n      },\n      svg: function (t) {\n        var a = e.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        if (!(t && this instanceof i.Parent)) return a.appendChild(t = e.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")), this.writeDataToDom(), t.appendChild(this.node.cloneNode(!0)), a.innerHTML.replace(/^<svg>/, \"\").replace(/<\\/svg>$/, \"\");\n        a.innerHTML = \"<svg>\" + t.replace(/\\n/, \"\").replace(/<([\\w:-]+)([^<]+?)\\/>/g, \"<$1$2></$1>\") + \"</svg>\";\n        for (var s = 0, r = a.firstChild.childNodes.length; s < r; s++) this.node.appendChild(a.firstChild.firstChild);\n        return this;\n      },\n      writeDataToDom: function () {\n        return (this.each || this.lines) && (this.each ? this : this.lines()).each(function () {\n          this.writeDataToDom();\n        }), this.node.removeAttribute(\"svgjs:data\"), Object.keys(this.dom).length && this.node.setAttribute(\"svgjs:data\", JSON.stringify(this.dom)), this;\n      },\n      setData: function (t) {\n        return this.dom = t, this;\n      },\n      is: function (t) {\n        return function (t, e) {\n          return t instanceof e;\n        }(this, t);\n      }\n    }\n  }), i.easing = {\n    \"-\": function (t) {\n      return t;\n    },\n    \"<>\": function (t) {\n      return -Math.cos(t * Math.PI) / 2 + .5;\n    },\n    \">\": function (t) {\n      return Math.sin(t * Math.PI / 2);\n    },\n    \"<\": function (t) {\n      return 1 - Math.cos(t * Math.PI / 2);\n    }\n  }, i.morph = function (t) {\n    return function (e, a) {\n      return new i.MorphObj(e, a).at(t);\n    };\n  }, i.Situation = i.invent({\n    create: function (t) {\n      this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new i.Number(t.duration).valueOf(), this.delay = new i.Number(t.delay).valueOf(), this.start = +new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t.ease, this.loop = 0, this.loops = !1, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};\n    }\n  }), i.FX = i.invent({\n    create: function (t) {\n      this._target = t, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;\n    },\n    extend: {\n      animate: function (t, e, a) {\n        \"object\" === b(t) && (e = t.ease, a = t.delay, t = t.duration);\n        var s = new i.Situation({\n          duration: t || 1e3,\n          delay: a || 0,\n          ease: i.easing[e || \"-\"] || e\n        });\n        return this.queue(s), this;\n      },\n      target: function (t) {\n        return t && t instanceof i.Element ? (this._target = t, this) : this._target;\n      },\n      timeToAbsPos: function (t) {\n        return (t - this.situation.start) / (this.situation.duration / this._speed);\n      },\n      absPosToTime: function (t) {\n        return this.situation.duration / this._speed * t + this.situation.start;\n      },\n      startAnimFrame: function () {\n        this.stopAnimFrame(), this.animationFrame = t.requestAnimationFrame(function () {\n          this.step();\n        }.bind(this));\n      },\n      stopAnimFrame: function () {\n        t.cancelAnimationFrame(this.animationFrame);\n      },\n      start: function () {\n        return !this.active && this.situation && (this.active = !0, this.startCurrent()), this;\n      },\n      startCurrent: function () {\n        return this.situation.start = +new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();\n      },\n      queue: function (t) {\n        return (\"function\" == typeof t || t instanceof i.Situation) && this.situations.push(t), this.situation || (this.situation = this.situations.shift()), this;\n      },\n      dequeue: function () {\n        return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof i.Situation ? this.start() : this.situation.call(this)), this;\n      },\n      initAnimations: function () {\n        var t,\n          e = this.situation;\n        if (e.init) return this;\n        for (var a in e.animations) {\n          t = this.target()[a](), Array.isArray(t) || (t = [t]), Array.isArray(e.animations[a]) || (e.animations[a] = [e.animations[a]]);\n          for (var s = t.length; s--;) e.animations[a][s] instanceof i.Number && (t[s] = new i.Number(t[s])), e.animations[a][s] = t[s].morph(e.animations[a][s]);\n        }\n        for (var a in e.attrs) e.attrs[a] = new i.MorphObj(this.target().attr(a), e.attrs[a]);\n        for (var a in e.styles) e.styles[a] = new i.MorphObj(this.target().style(a), e.styles[a]);\n        return e.initialTransformation = this.target().matrixify(), e.init = !0, this;\n      },\n      clearQueue: function () {\n        return this.situations = [], this;\n      },\n      clearCurrent: function () {\n        return this.situation = null, this;\n      },\n      stop: function (t, e) {\n        var i = this.active;\n        return this.active = !1, e && this.clearQueue(), t && this.situation && (!i && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();\n      },\n      after: function (t) {\n        var e = this.last();\n        return this.target().on(\"finished.fx\", function i(a) {\n          a.detail.situation == e && (t.call(this, e), this.off(\"finished.fx\", i));\n        }), this._callStart();\n      },\n      during: function (t) {\n        var e = this.last(),\n          a = function (a) {\n            a.detail.situation == e && t.call(this, a.detail.pos, i.morph(a.detail.pos), a.detail.eased, e);\n          };\n        return this.target().off(\"during.fx\", a).on(\"during.fx\", a), this.after(function () {\n          this.off(\"during.fx\", a);\n        }), this._callStart();\n      },\n      afterAll: function (t) {\n        var e = function e(i) {\n          t.call(this), this.off(\"allfinished.fx\", e);\n        };\n        return this.target().off(\"allfinished.fx\", e).on(\"allfinished.fx\", e), this._callStart();\n      },\n      last: function () {\n        return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n      },\n      add: function (t, e, i) {\n        return this.last()[i || \"animations\"][t] = e, this._callStart();\n      },\n      step: function (t) {\n        var e, i, a;\n        t || (this.absPos = this.timeToAbsPos(+new Date())), !1 !== this.situation.loops ? (e = Math.max(this.absPos, 0), i = Math.floor(e), !0 === this.situation.loops || i < this.situation.loops ? (this.pos = e - i, a = this.situation.loop, this.situation.loop = i) : (this.absPos = this.situation.loops, this.pos = 1, a = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);\n        var s = this.situation.ease(this.pos);\n        for (var r in this.situation.once) r > this.lastPos && r <= s && (this.situation.once[r].call(this.target(), this.pos, s), delete this.situation.once[r]);\n        return this.active && this.target().fire(\"during\", {\n          pos: this.pos,\n          eased: s,\n          fx: this,\n          situation: this.situation\n        }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire(\"finished\", {\n          fx: this,\n          situation: this.situation\n        }), this.situations.length || (this.target().fire(\"allfinished\"), this.situations.length || (this.target().off(\".fx\"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s, this) : this;\n      },\n      eachAt: function () {\n        var t,\n          e = this,\n          a = this.target(),\n          s = this.situation;\n        for (var r in s.animations) t = [].concat(s.animations[r]).map(function (t) {\n          return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n        }), a[r].apply(a, t);\n        for (var r in s.attrs) t = [r].concat(s.attrs[r]).map(function (t) {\n          return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n        }), a.attr.apply(a, t);\n        for (var r in s.styles) t = [r].concat(s.styles[r]).map(function (t) {\n          return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n        }), a.style.apply(a, t);\n        if (s.transforms.length) {\n          t = s.initialTransformation, r = 0;\n          for (var o = s.transforms.length; r < o; r++) {\n            var n = s.transforms[r];\n            n instanceof i.Matrix ? t = n.relative ? t.multiply(new i.Matrix().morph(n).at(s.ease(this.pos))) : t.morph(n).at(s.ease(this.pos)) : (n.relative || n.undo(t.extract()), t = t.multiply(n.at(s.ease(this.pos))));\n          }\n          a.matrix(t);\n        }\n        return this;\n      },\n      once: function (t, e, i) {\n        var a = this.last();\n        return i || (t = a.ease(t)), a.once[t] = e, this;\n      },\n      _callStart: function () {\n        return setTimeout(function () {\n          this.start();\n        }.bind(this), 0), this;\n      }\n    },\n    parent: i.Element,\n    construct: {\n      animate: function (t, e, a) {\n        return (this.fx || (this.fx = new i.FX(this))).animate(t, e, a);\n      },\n      delay: function (t) {\n        return (this.fx || (this.fx = new i.FX(this))).delay(t);\n      },\n      stop: function (t, e) {\n        return this.fx && this.fx.stop(t, e), this;\n      },\n      finish: function () {\n        return this.fx && this.fx.finish(), this;\n      }\n    }\n  }), i.MorphObj = i.invent({\n    create: function (t, e) {\n      return i.Color.isColor(e) ? new i.Color(t).morph(e) : i.regex.delimiter.test(t) ? i.regex.pathLetters.test(t) ? new i.PathArray(t).morph(e) : new i.Array(t).morph(e) : i.regex.numberAndUnit.test(e) ? new i.Number(t).morph(e) : (this.value = t, void (this.destination = e));\n    },\n    extend: {\n      at: function (t, e) {\n        return e < 1 ? this.value : this.destination;\n      },\n      valueOf: function () {\n        return this.value;\n      }\n    }\n  }), i.extend(i.FX, {\n    attr: function (t, e, i) {\n      if (\"object\" === b(t)) for (var a in t) this.attr(a, t[a]);else this.add(t, e, \"attrs\");\n      return this;\n    },\n    plot: function (t, e, i, a) {\n      return 4 == arguments.length ? this.plot([t, e, i, a]) : this.add(\"plot\", new (this.target().morphArray)(t));\n    }\n  }), i.Box = i.invent({\n    create: function (t, e, a, s) {\n      if (!(\"object\" !== b(t) || t instanceof i.Element)) return i.Box.call(this, null != t.left ? t.left : t.x, null != t.top ? t.top : t.y, t.width, t.height);\n      var r;\n      4 == arguments.length && (this.x = t, this.y = e, this.width = a, this.height = s), null == (r = this).x && (r.x = 0, r.y = 0, r.width = 0, r.height = 0), r.w = r.width, r.h = r.height, r.x2 = r.x + r.width, r.y2 = r.y + r.height, r.cx = r.x + r.width / 2, r.cy = r.y + r.height / 2;\n    }\n  }), i.BBox = i.invent({\n    create: function (t) {\n      if (i.Box.apply(this, [].slice.call(arguments)), t instanceof i.Element) {\n        var a;\n        try {\n          if (!e.documentElement.contains) {\n            for (var s = t.node; s.parentNode;) s = s.parentNode;\n            if (s != e) throw new Error(\"Element not in the dom\");\n          }\n          a = t.node.getBBox();\n        } catch (e) {\n          if (t instanceof i.Shape) {\n            i.parser.draw || i.prepare();\n            var r = t.clone(i.parser.draw.instance).show();\n            r && r.node && \"function\" == typeof r.node.getBBox && (a = r.node.getBBox()), r && \"function\" == typeof r.remove && r.remove();\n          } else a = {\n            x: t.node.clientLeft,\n            y: t.node.clientTop,\n            width: t.node.clientWidth,\n            height: t.node.clientHeight\n          };\n        }\n        i.Box.call(this, a);\n      }\n    },\n    inherit: i.Box,\n    parent: i.Element,\n    construct: {\n      bbox: function () {\n        return new i.BBox(this);\n      }\n    }\n  }), i.BBox.prototype.constructor = i.BBox, i.Matrix = i.invent({\n    create: function (t) {\n      var e = f([1, 0, 0, 1, 0, 0]);\n      t = null === t ? e : t instanceof i.Element ? t.matrixify() : \"string\" == typeof t ? f(t.split(i.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? f([].slice.call(arguments)) : Array.isArray(t) ? f(t) : t && \"object\" === b(t) ? t : e;\n      for (var a = v.length - 1; a >= 0; --a) this[v[a]] = null != t[v[a]] ? t[v[a]] : e[v[a]];\n    },\n    extend: {\n      extract: function () {\n        var t = u(this, 0, 1);\n        u(this, 1, 0);\n        var e = 180 / Math.PI * Math.atan2(t.y, t.x) - 90;\n        return {\n          x: this.e,\n          y: this.f,\n          transformedX: (this.e * Math.cos(e * Math.PI / 180) + this.f * Math.sin(e * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n          transformedY: (this.f * Math.cos(e * Math.PI / 180) + this.e * Math.sin(-e * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),\n          rotation: e,\n          a: this.a,\n          b: this.b,\n          c: this.c,\n          d: this.d,\n          e: this.e,\n          f: this.f,\n          matrix: new i.Matrix(this)\n        };\n      },\n      clone: function () {\n        return new i.Matrix(this);\n      },\n      morph: function (t) {\n        return this.destination = new i.Matrix(t), this;\n      },\n      multiply: function (t) {\n        return new i.Matrix(this.native().multiply(function (t) {\n          return t instanceof i.Matrix || (t = new i.Matrix(t)), t;\n        }(t).native()));\n      },\n      inverse: function () {\n        return new i.Matrix(this.native().inverse());\n      },\n      translate: function (t, e) {\n        return new i.Matrix(this.native().translate(t || 0, e || 0));\n      },\n      native: function () {\n        for (var t = i.parser.native.createSVGMatrix(), e = v.length - 1; e >= 0; e--) t[v[e]] = this[v[e]];\n        return t;\n      },\n      toString: function () {\n        return \"matrix(\" + x(this.a) + \",\" + x(this.b) + \",\" + x(this.c) + \",\" + x(this.d) + \",\" + x(this.e) + \",\" + x(this.f) + \")\";\n      }\n    },\n    parent: i.Element,\n    construct: {\n      ctm: function () {\n        return new i.Matrix(this.node.getCTM());\n      },\n      screenCTM: function () {\n        if (this instanceof i.Nested) {\n          var t = this.rect(1, 1),\n            e = t.node.getScreenCTM();\n          return t.remove(), new i.Matrix(e);\n        }\n        return new i.Matrix(this.node.getScreenCTM());\n      }\n    }\n  }), i.Point = i.invent({\n    create: function (t, e) {\n      var i;\n      i = Array.isArray(t) ? {\n        x: t[0],\n        y: t[1]\n      } : \"object\" === b(t) ? {\n        x: t.x,\n        y: t.y\n      } : null != t ? {\n        x: t,\n        y: null != e ? e : t\n      } : {\n        x: 0,\n        y: 0\n      }, this.x = i.x, this.y = i.y;\n    },\n    extend: {\n      clone: function () {\n        return new i.Point(this);\n      },\n      morph: function (t, e) {\n        return this.destination = new i.Point(t, e), this;\n      }\n    }\n  }), i.extend(i.Element, {\n    point: function (t, e) {\n      return new i.Point(t, e).transform(this.screenCTM().inverse());\n    }\n  }), i.extend(i.Element, {\n    attr: function (t, e, a) {\n      if (null == t) {\n        for (t = {}, a = (e = this.node.attributes).length - 1; a >= 0; a--) t[e[a].nodeName] = i.regex.isNumber.test(e[a].nodeValue) ? parseFloat(e[a].nodeValue) : e[a].nodeValue;\n        return t;\n      }\n      if (\"object\" === b(t)) for (var s in t) this.attr(s, t[s]);else if (null === e) this.node.removeAttribute(t);else {\n        if (null == e) return null == (e = this.node.getAttribute(t)) ? i.defaults.attrs[t] : i.regex.isNumber.test(e) ? parseFloat(e) : e;\n        \"stroke-width\" == t ? this.attr(\"stroke\", parseFloat(e) > 0 ? this._stroke : null) : \"stroke\" == t && (this._stroke = e), \"fill\" != t && \"stroke\" != t || (i.regex.isImage.test(e) && (e = this.doc().defs().image(e, 0, 0)), e instanceof i.Image && (e = this.doc().defs().pattern(0, 0, function () {\n          this.add(e);\n        }))), \"number\" == typeof e ? e = new i.Number(e) : i.Color.isColor(e) ? e = new i.Color(e) : Array.isArray(e) && (e = new i.Array(e)), \"leading\" == t ? this.leading && this.leading(e) : \"string\" == typeof a ? this.node.setAttributeNS(a, t, e.toString()) : this.node.setAttribute(t, e.toString()), !this.rebuild || \"font-size\" != t && \"x\" != t || this.rebuild(t, e);\n      }\n      return this;\n    }\n  }), i.extend(i.Element, {\n    transform: function (t, e) {\n      var a;\n      return \"object\" !== b(t) ? (a = new i.Matrix(this).extract(), \"string\" == typeof t ? a[t] : a) : (a = new i.Matrix(this), e = !!e || !!t.relative, null != t.a && (a = e ? a.multiply(new i.Matrix(t)) : new i.Matrix(t)), this.attr(\"transform\", a));\n    }\n  }), i.extend(i.Element, {\n    untransform: function () {\n      return this.attr(\"transform\", null);\n    },\n    matrixify: function () {\n      return (this.attr(\"transform\") || \"\").split(i.regex.transforms).slice(0, -1).map(function (t) {\n        var e = t.trim().split(\"(\");\n        return [e[0], e[1].split(i.regex.delimiter).map(function (t) {\n          return parseFloat(t);\n        })];\n      }).reduce(function (t, e) {\n        return \"matrix\" == e[0] ? t.multiply(f(e[1])) : t[e[0]].apply(t, e[1]);\n      }, new i.Matrix());\n    },\n    toParent: function (t) {\n      if (this == t) return this;\n      var e = this.screenCTM(),\n        i = t.screenCTM().inverse();\n      return this.addTo(t).untransform().transform(i.multiply(e)), this;\n    },\n    toDoc: function () {\n      return this.toParent(this.doc());\n    }\n  }), i.Transformation = i.invent({\n    create: function (t, e) {\n      if (arguments.length > 1 && \"boolean\" != typeof e) return this.constructor.call(this, [].slice.call(arguments));\n      if (Array.isArray(t)) for (var i = 0, a = this.arguments.length; i < a; ++i) this[this.arguments[i]] = t[i];else if (t && \"object\" === b(t)) for (i = 0, a = this.arguments.length; i < a; ++i) this[this.arguments[i]] = t[this.arguments[i]];\n      this.inversed = !1, !0 === e && (this.inversed = !0);\n    }\n  }), i.Translate = i.invent({\n    parent: i.Matrix,\n    inherit: i.Transformation,\n    create: function (t, e) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: [\"transformedX\", \"transformedY\"],\n      method: \"translate\"\n    }\n  }), i.extend(i.Element, {\n    style: function (t, e) {\n      if (0 == arguments.length) return this.node.style.cssText || \"\";\n      if (arguments.length < 2) {\n        if (\"object\" === b(t)) for (var a in t) this.style(a, t[a]);else {\n          if (!i.regex.isCss.test(t)) return this.node.style[h(t)];\n          for (t = t.split(/\\s*;\\s*/).filter(function (t) {\n            return !!t;\n          }).map(function (t) {\n            return t.split(/\\s*:\\s*/);\n          }); e = t.pop();) this.style(e[0], e[1]);\n        }\n      } else this.node.style[h(t)] = null === e || i.regex.isBlank.test(e) ? \"\" : e;\n      return this;\n    }\n  }), i.Parent = i.invent({\n    create: function (t) {\n      this.constructor.call(this, t);\n    },\n    inherit: i.Element,\n    extend: {\n      children: function () {\n        return i.utils.map(i.utils.filterSVGElements(this.node.childNodes), function (t) {\n          return i.adopt(t);\n        });\n      },\n      add: function (t, e) {\n        return null == e ? this.node.appendChild(t.node) : t.node != this.node.childNodes[e] && this.node.insertBefore(t.node, this.node.childNodes[e]), this;\n      },\n      put: function (t, e) {\n        return this.add(t, e), t;\n      },\n      has: function (t) {\n        return this.index(t) >= 0;\n      },\n      index: function (t) {\n        return [].slice.call(this.node.childNodes).indexOf(t.node);\n      },\n      get: function (t) {\n        return i.adopt(this.node.childNodes[t]);\n      },\n      first: function () {\n        return this.get(0);\n      },\n      last: function () {\n        return this.get(this.node.childNodes.length - 1);\n      },\n      each: function (t, e) {\n        for (var a = this.children(), s = 0, r = a.length; s < r; s++) a[s] instanceof i.Element && t.apply(a[s], [s, a]), e && a[s] instanceof i.Container && a[s].each(t, e);\n        return this;\n      },\n      removeElement: function (t) {\n        return this.node.removeChild(t.node), this;\n      },\n      clear: function () {\n        for (; this.node.hasChildNodes();) this.node.removeChild(this.node.lastChild);\n        return delete this._defs, this;\n      },\n      defs: function () {\n        return this.doc().defs();\n      }\n    }\n  }), i.extend(i.Parent, {\n    ungroup: function (t, e) {\n      return 0 === e || this instanceof i.Defs || this.node == i.parser.draw || (t = t || (this instanceof i.Doc ? this : this.parent(i.Parent)), e = e || 1 / 0, this.each(function () {\n        return this instanceof i.Defs ? this : this instanceof i.Parent ? this.ungroup(t, e - 1) : this.toParent(t);\n      }), this.node.firstChild || this.remove()), this;\n    },\n    flatten: function (t, e) {\n      return this.ungroup(t, e);\n    }\n  }), i.Container = i.invent({\n    create: function (t) {\n      this.constructor.call(this, t);\n    },\n    inherit: i.Parent\n  }), i.ViewBox = i.invent({\n    parent: i.Container,\n    construct: {}\n  }), [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseover\", \"mouseout\", \"mousemove\", \"touchstart\", \"touchmove\", \"touchleave\", \"touchend\", \"touchcancel\"].forEach(function (t) {\n    i.Element.prototype[t] = function (e) {\n      return i.on(this.node, t, e), this;\n    };\n  }), i.listeners = [], i.handlerMap = [], i.listenerId = 0, i.on = function (t, e, a, s, r) {\n    var o = a.bind(s || t.instance || t),\n      n = (i.handlerMap.indexOf(t) + 1 || i.handlerMap.push(t)) - 1,\n      l = e.split(\".\")[0],\n      h = e.split(\".\")[1] || \"*\";\n    i.listeners[n] = i.listeners[n] || {}, i.listeners[n][l] = i.listeners[n][l] || {}, i.listeners[n][l][h] = i.listeners[n][l][h] || {}, a._svgjsListenerId || (a._svgjsListenerId = ++i.listenerId), i.listeners[n][l][h][a._svgjsListenerId] = o, t.addEventListener(l, o, r || {\n      passive: !1\n    });\n  }, i.off = function (t, e, a) {\n    var s = i.handlerMap.indexOf(t),\n      r = e && e.split(\".\")[0],\n      o = e && e.split(\".\")[1],\n      n = \"\";\n    if (-1 != s) if (a) {\n      if (\"function\" == typeof a && (a = a._svgjsListenerId), !a) return;\n      i.listeners[s][r] && i.listeners[s][r][o || \"*\"] && (t.removeEventListener(r, i.listeners[s][r][o || \"*\"][a], !1), delete i.listeners[s][r][o || \"*\"][a]);\n    } else if (o && r) {\n      if (i.listeners[s][r] && i.listeners[s][r][o]) {\n        for (var l in i.listeners[s][r][o]) i.off(t, [r, o].join(\".\"), l);\n        delete i.listeners[s][r][o];\n      }\n    } else if (o) for (var h in i.listeners[s]) for (var n in i.listeners[s][h]) o === n && i.off(t, [h, o].join(\".\"));else if (r) {\n      if (i.listeners[s][r]) {\n        for (var n in i.listeners[s][r]) i.off(t, [r, n].join(\".\"));\n        delete i.listeners[s][r];\n      }\n    } else {\n      for (var h in i.listeners[s]) i.off(t, h);\n      delete i.listeners[s], delete i.handlerMap[s];\n    }\n  }, i.extend(i.Element, {\n    on: function (t, e, a, s) {\n      return i.on(this.node, t, e, a, s), this;\n    },\n    off: function (t, e) {\n      return i.off(this.node, t, e), this;\n    },\n    fire: function (e, a) {\n      return e instanceof t.Event ? this.node.dispatchEvent(e) : this.node.dispatchEvent(e = new i.CustomEvent(e, {\n        detail: a,\n        cancelable: !0\n      })), this._event = e, this;\n    },\n    event: function () {\n      return this._event;\n    }\n  }), i.Defs = i.invent({\n    create: \"defs\",\n    inherit: i.Container\n  }), i.G = i.invent({\n    create: \"g\",\n    inherit: i.Container,\n    extend: {\n      x: function (t) {\n        return null == t ? this.transform(\"x\") : this.transform({\n          x: t - this.x()\n        }, !0);\n      }\n    },\n    construct: {\n      group: function () {\n        return this.put(new i.G());\n      }\n    }\n  }), i.Doc = i.invent({\n    create: function (t) {\n      t && (\"svg\" == (t = \"string\" == typeof t ? e.getElementById(t) : t).nodeName ? this.constructor.call(this, t) : (this.constructor.call(this, i.create(\"svg\")), t.appendChild(this.node), this.size(\"100%\", \"100%\")), this.namespace().defs());\n    },\n    inherit: i.Container,\n    extend: {\n      namespace: function () {\n        return this.attr({\n          xmlns: i.ns,\n          version: \"1.1\"\n        }).attr(\"xmlns:xlink\", i.xlink, i.xmlns).attr(\"xmlns:svgjs\", i.svgjs, i.xmlns);\n      },\n      defs: function () {\n        var t;\n        return this._defs || ((t = this.node.getElementsByTagName(\"defs\")[0]) ? this._defs = i.adopt(t) : this._defs = new i.Defs(), this.node.appendChild(this._defs.node)), this._defs;\n      },\n      parent: function () {\n        return this.node.parentNode && \"#document\" != this.node.parentNode.nodeName ? this.node.parentNode : null;\n      },\n      remove: function () {\n        return this.parent() && this.parent().removeChild(this.node), this;\n      },\n      clear: function () {\n        for (; this.node.hasChildNodes();) this.node.removeChild(this.node.lastChild);\n        return delete this._defs, i.parser.draw && !i.parser.draw.parentNode && this.node.appendChild(i.parser.draw), this;\n      },\n      clone: function (t) {\n        this.writeDataToDom();\n        var e = this.node,\n          i = p(e.cloneNode(!0));\n        return t ? (t.node || t).appendChild(i.node) : e.parentNode.insertBefore(i.node, e.nextSibling), i;\n      }\n    }\n  }), i.extend(i.Element, {}), i.Gradient = i.invent({\n    create: function (t) {\n      this.constructor.call(this, i.create(t + \"Gradient\")), this.type = t;\n    },\n    inherit: i.Container,\n    extend: {\n      at: function (t, e, a) {\n        return this.put(new i.Stop()).update(t, e, a);\n      },\n      update: function (t) {\n        return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n      },\n      fill: function () {\n        return \"url(#\" + this.id() + \")\";\n      },\n      toString: function () {\n        return this.fill();\n      },\n      attr: function (t, e, a) {\n        return \"transform\" == t && (t = \"gradientTransform\"), i.Container.prototype.attr.call(this, t, e, a);\n      }\n    },\n    construct: {\n      gradient: function (t, e) {\n        return this.defs().gradient(t, e);\n      }\n    }\n  }), i.extend(i.Gradient, i.FX, {\n    from: function (t, e) {\n      return \"radial\" == (this._target || this).type ? this.attr({\n        fx: new i.Number(t),\n        fy: new i.Number(e)\n      }) : this.attr({\n        x1: new i.Number(t),\n        y1: new i.Number(e)\n      });\n    },\n    to: function (t, e) {\n      return \"radial\" == (this._target || this).type ? this.attr({\n        cx: new i.Number(t),\n        cy: new i.Number(e)\n      }) : this.attr({\n        x2: new i.Number(t),\n        y2: new i.Number(e)\n      });\n    }\n  }), i.extend(i.Defs, {\n    gradient: function (t, e) {\n      return this.put(new i.Gradient(t)).update(e);\n    }\n  }), i.Stop = i.invent({\n    create: \"stop\",\n    inherit: i.Element,\n    extend: {\n      update: function (t) {\n        return (\"number\" == typeof t || t instanceof i.Number) && (t = {\n          offset: arguments[0],\n          color: arguments[1],\n          opacity: arguments[2]\n        }), null != t.opacity && this.attr(\"stop-opacity\", t.opacity), null != t.color && this.attr(\"stop-color\", t.color), null != t.offset && this.attr(\"offset\", new i.Number(t.offset)), this;\n      }\n    }\n  }), i.Pattern = i.invent({\n    create: \"pattern\",\n    inherit: i.Container,\n    extend: {\n      fill: function () {\n        return \"url(#\" + this.id() + \")\";\n      },\n      update: function (t) {\n        return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n      },\n      toString: function () {\n        return this.fill();\n      },\n      attr: function (t, e, a) {\n        return \"transform\" == t && (t = \"patternTransform\"), i.Container.prototype.attr.call(this, t, e, a);\n      }\n    },\n    construct: {\n      pattern: function (t, e, i) {\n        return this.defs().pattern(t, e, i);\n      }\n    }\n  }), i.extend(i.Defs, {\n    pattern: function (t, e, a) {\n      return this.put(new i.Pattern()).update(a).attr({\n        x: 0,\n        y: 0,\n        width: t,\n        height: e,\n        patternUnits: \"userSpaceOnUse\"\n      });\n    }\n  }), i.Shape = i.invent({\n    create: function (t) {\n      this.constructor.call(this, t);\n    },\n    inherit: i.Element\n  }), i.Symbol = i.invent({\n    create: \"symbol\",\n    inherit: i.Container,\n    construct: {\n      symbol: function () {\n        return this.put(new i.Symbol());\n      }\n    }\n  }), i.Use = i.invent({\n    create: \"use\",\n    inherit: i.Shape,\n    extend: {\n      element: function (t, e) {\n        return this.attr(\"href\", (e || \"\") + \"#\" + t, i.xlink);\n      }\n    },\n    construct: {\n      use: function (t, e) {\n        return this.put(new i.Use()).element(t, e);\n      }\n    }\n  }), i.Rect = i.invent({\n    create: \"rect\",\n    inherit: i.Shape,\n    construct: {\n      rect: function (t, e) {\n        return this.put(new i.Rect()).size(t, e);\n      }\n    }\n  }), i.Circle = i.invent({\n    create: \"circle\",\n    inherit: i.Shape,\n    construct: {\n      circle: function (t) {\n        return this.put(new i.Circle()).rx(new i.Number(t).divide(2)).move(0, 0);\n      }\n    }\n  }), i.extend(i.Circle, i.FX, {\n    rx: function (t) {\n      return this.attr(\"r\", t);\n    },\n    ry: function (t) {\n      return this.rx(t);\n    }\n  }), i.Ellipse = i.invent({\n    create: \"ellipse\",\n    inherit: i.Shape,\n    construct: {\n      ellipse: function (t, e) {\n        return this.put(new i.Ellipse()).size(t, e).move(0, 0);\n      }\n    }\n  }), i.extend(i.Ellipse, i.Rect, i.FX, {\n    rx: function (t) {\n      return this.attr(\"rx\", t);\n    },\n    ry: function (t) {\n      return this.attr(\"ry\", t);\n    }\n  }), i.extend(i.Circle, i.Ellipse, {\n    x: function (t) {\n      return null == t ? this.cx() - this.rx() : this.cx(t + this.rx());\n    },\n    y: function (t) {\n      return null == t ? this.cy() - this.ry() : this.cy(t + this.ry());\n    },\n    cx: function (t) {\n      return null == t ? this.attr(\"cx\") : this.attr(\"cx\", t);\n    },\n    cy: function (t) {\n      return null == t ? this.attr(\"cy\") : this.attr(\"cy\", t);\n    },\n    width: function (t) {\n      return null == t ? 2 * this.rx() : this.rx(new i.Number(t).divide(2));\n    },\n    height: function (t) {\n      return null == t ? 2 * this.ry() : this.ry(new i.Number(t).divide(2));\n    },\n    size: function (t, e) {\n      var a = g(this, t, e);\n      return this.rx(new i.Number(a.width).divide(2)).ry(new i.Number(a.height).divide(2));\n    }\n  }), i.Line = i.invent({\n    create: \"line\",\n    inherit: i.Shape,\n    extend: {\n      array: function () {\n        return new i.PointArray([[this.attr(\"x1\"), this.attr(\"y1\")], [this.attr(\"x2\"), this.attr(\"y2\")]]);\n      },\n      plot: function (t, e, a, s) {\n        return null == t ? this.array() : (t = void 0 !== e ? {\n          x1: t,\n          y1: e,\n          x2: a,\n          y2: s\n        } : new i.PointArray(t).toLine(), this.attr(t));\n      },\n      move: function (t, e) {\n        return this.attr(this.array().move(t, e).toLine());\n      },\n      size: function (t, e) {\n        var i = g(this, t, e);\n        return this.attr(this.array().size(i.width, i.height).toLine());\n      }\n    },\n    construct: {\n      line: function (t, e, a, s) {\n        return i.Line.prototype.plot.apply(this.put(new i.Line()), null != t ? [t, e, a, s] : [0, 0, 0, 0]);\n      }\n    }\n  }), i.Polyline = i.invent({\n    create: \"polyline\",\n    inherit: i.Shape,\n    construct: {\n      polyline: function (t) {\n        return this.put(new i.Polyline()).plot(t || new i.PointArray());\n      }\n    }\n  }), i.Polygon = i.invent({\n    create: \"polygon\",\n    inherit: i.Shape,\n    construct: {\n      polygon: function (t) {\n        return this.put(new i.Polygon()).plot(t || new i.PointArray());\n      }\n    }\n  }), i.extend(i.Polyline, i.Polygon, {\n    array: function () {\n      return this._array || (this._array = new i.PointArray(this.attr(\"points\")));\n    },\n    plot: function (t) {\n      return null == t ? this.array() : this.clear().attr(\"points\", \"string\" == typeof t ? t : this._array = new i.PointArray(t));\n    },\n    clear: function () {\n      return delete this._array, this;\n    },\n    move: function (t, e) {\n      return this.attr(\"points\", this.array().move(t, e));\n    },\n    size: function (t, e) {\n      var i = g(this, t, e);\n      return this.attr(\"points\", this.array().size(i.width, i.height));\n    }\n  }), i.extend(i.Line, i.Polyline, i.Polygon, {\n    morphArray: i.PointArray,\n    x: function (t) {\n      return null == t ? this.bbox().x : this.move(t, this.bbox().y);\n    },\n    y: function (t) {\n      return null == t ? this.bbox().y : this.move(this.bbox().x, t);\n    },\n    width: function (t) {\n      var e = this.bbox();\n      return null == t ? e.width : this.size(t, e.height);\n    },\n    height: function (t) {\n      var e = this.bbox();\n      return null == t ? e.height : this.size(e.width, t);\n    }\n  }), i.Path = i.invent({\n    create: \"path\",\n    inherit: i.Shape,\n    extend: {\n      morphArray: i.PathArray,\n      array: function () {\n        return this._array || (this._array = new i.PathArray(this.attr(\"d\")));\n      },\n      plot: function (t) {\n        return null == t ? this.array() : this.clear().attr(\"d\", \"string\" == typeof t ? t : this._array = new i.PathArray(t));\n      },\n      clear: function () {\n        return delete this._array, this;\n      }\n    },\n    construct: {\n      path: function (t) {\n        return this.put(new i.Path()).plot(t || new i.PathArray());\n      }\n    }\n  }), i.Image = i.invent({\n    create: \"image\",\n    inherit: i.Shape,\n    extend: {\n      load: function (e) {\n        if (!e) return this;\n        var a = this,\n          s = new t.Image();\n        return i.on(s, \"load\", function () {\n          i.off(s);\n          var t = a.parent(i.Pattern);\n          null !== t && (0 == a.width() && 0 == a.height() && a.size(s.width, s.height), t && 0 == t.width() && 0 == t.height() && t.size(a.width(), a.height()), \"function\" == typeof a._loaded && a._loaded.call(a, {\n            width: s.width,\n            height: s.height,\n            ratio: s.width / s.height,\n            url: e\n          }));\n        }), i.on(s, \"error\", function (t) {\n          i.off(s), \"function\" == typeof a._error && a._error.call(a, t);\n        }), this.attr(\"href\", s.src = this.src = e, i.xlink);\n      },\n      loaded: function (t) {\n        return this._loaded = t, this;\n      },\n      error: function (t) {\n        return this._error = t, this;\n      }\n    },\n    construct: {\n      image: function (t, e, a) {\n        return this.put(new i.Image()).load(t).size(e || 0, a || e || 0);\n      }\n    }\n  }), i.Text = i.invent({\n    create: function () {\n      this.constructor.call(this, i.create(\"text\")), this.dom.leading = new i.Number(1.3), this._rebuild = !0, this._build = !1, this.attr(\"font-family\", i.defaults.attrs[\"font-family\"]);\n    },\n    inherit: i.Shape,\n    extend: {\n      x: function (t) {\n        return null == t ? this.attr(\"x\") : this.attr(\"x\", t);\n      },\n      text: function (t) {\n        if (void 0 === t) {\n          t = \"\";\n          for (var e = this.node.childNodes, a = 0, s = e.length; a < s; ++a) 0 != a && 3 != e[a].nodeType && 1 == i.adopt(e[a]).dom.newLined && (t += \"\\n\"), t += e[a].textContent;\n          return t;\n        }\n        if (this.clear().build(!0), \"function\" == typeof t) t.call(this, this);else {\n          a = 0;\n          for (var r = (t = t.split(\"\\n\")).length; a < r; a++) this.tspan(t[a]).newLine();\n        }\n        return this.build(!1).rebuild();\n      },\n      size: function (t) {\n        return this.attr(\"font-size\", t).rebuild();\n      },\n      leading: function (t) {\n        return null == t ? this.dom.leading : (this.dom.leading = new i.Number(t), this.rebuild());\n      },\n      lines: function () {\n        var t = (this.textPath && this.textPath() || this).node,\n          e = i.utils.map(i.utils.filterSVGElements(t.childNodes), function (t) {\n            return i.adopt(t);\n          });\n        return new i.Set(e);\n      },\n      rebuild: function (t) {\n        if (\"boolean\" == typeof t && (this._rebuild = t), this._rebuild) {\n          var e = this,\n            a = 0,\n            s = this.dom.leading * new i.Number(this.attr(\"font-size\"));\n          this.lines().each(function () {\n            this.dom.newLined && (e.textPath() || this.attr(\"x\", e.attr(\"x\")), \"\\n\" == this.text() ? a += s : (this.attr(\"dy\", s + a), a = 0));\n          }), this.fire(\"rebuild\");\n        }\n        return this;\n      },\n      build: function (t) {\n        return this._build = !!t, this;\n      },\n      setData: function (t) {\n        return this.dom = t, this.dom.leading = new i.Number(t.leading || 1.3), this;\n      }\n    },\n    construct: {\n      text: function (t) {\n        return this.put(new i.Text()).text(t);\n      },\n      plain: function (t) {\n        return this.put(new i.Text()).plain(t);\n      }\n    }\n  }), i.Tspan = i.invent({\n    create: \"tspan\",\n    inherit: i.Shape,\n    extend: {\n      text: function (t) {\n        return null == t ? this.node.textContent + (this.dom.newLined ? \"\\n\" : \"\") : (\"function\" == typeof t ? t.call(this, this) : this.plain(t), this);\n      },\n      dx: function (t) {\n        return this.attr(\"dx\", t);\n      },\n      dy: function (t) {\n        return this.attr(\"dy\", t);\n      },\n      newLine: function () {\n        var t = this.parent(i.Text);\n        return this.dom.newLined = !0, this.dy(t.dom.leading * t.attr(\"font-size\")).attr(\"x\", t.x());\n      }\n    }\n  }), i.extend(i.Text, i.Tspan, {\n    plain: function (t) {\n      return !1 === this._build && this.clear(), this.node.appendChild(e.createTextNode(t)), this;\n    },\n    tspan: function (t) {\n      var e = (this.textPath && this.textPath() || this).node,\n        a = new i.Tspan();\n      return !1 === this._build && this.clear(), e.appendChild(a.node), a.text(t);\n    },\n    clear: function () {\n      for (var t = (this.textPath && this.textPath() || this).node; t.hasChildNodes();) t.removeChild(t.lastChild);\n      return this;\n    },\n    length: function () {\n      return this.node.getComputedTextLength();\n    }\n  }), i.TextPath = i.invent({\n    create: \"textPath\",\n    inherit: i.Parent,\n    parent: i.Text,\n    construct: {\n      morphArray: i.PathArray,\n      array: function () {\n        var t = this.track();\n        return t ? t.array() : null;\n      },\n      plot: function (t) {\n        var e = this.track(),\n          i = null;\n        return e && (i = e.plot(t)), null == t ? i : this;\n      },\n      track: function () {\n        var t = this.textPath();\n        if (t) return t.reference(\"href\");\n      },\n      textPath: function () {\n        if (this.node.firstChild && \"textPath\" == this.node.firstChild.nodeName) return i.adopt(this.node.firstChild);\n      }\n    }\n  }), i.Nested = i.invent({\n    create: function () {\n      this.constructor.call(this, i.create(\"svg\")), this.style(\"overflow\", \"visible\");\n    },\n    inherit: i.Container,\n    construct: {\n      nested: function () {\n        return this.put(new i.Nested());\n      }\n    }\n  });\n  var n = {\n    stroke: [\"color\", \"width\", \"opacity\", \"linecap\", \"linejoin\", \"miterlimit\", \"dasharray\", \"dashoffset\"],\n    fill: [\"color\", \"opacity\", \"rule\"],\n    prefix: function (t, e) {\n      return \"color\" == e ? t : t + \"-\" + e;\n    }\n  };\n  function l(t, e, a, s) {\n    return a + s.replace(i.regex.dots, \" .\");\n  }\n  function h(t) {\n    return t.toLowerCase().replace(/-(.)/g, function (t, e) {\n      return e.toUpperCase();\n    });\n  }\n  function c(t) {\n    return t.charAt(0).toUpperCase() + t.slice(1);\n  }\n  function d(t) {\n    var e = t.toString(16);\n    return 1 == e.length ? \"0\" + e : e;\n  }\n  function g(t, e, i) {\n    if (null == e || null == i) {\n      var a = t.bbox();\n      null == e ? e = a.width / a.height * i : null == i && (i = a.height / a.width * e);\n    }\n    return {\n      width: e,\n      height: i\n    };\n  }\n  function u(t, e, i) {\n    return {\n      x: e * t.a + i * t.c + 0,\n      y: e * t.b + i * t.d + 0\n    };\n  }\n  function f(t) {\n    return {\n      a: t[0],\n      b: t[1],\n      c: t[2],\n      d: t[3],\n      e: t[4],\n      f: t[5]\n    };\n  }\n  function p(e) {\n    for (var a = e.childNodes.length - 1; a >= 0; a--) e.childNodes[a] instanceof t.SVGElement && p(e.childNodes[a]);\n    return i.adopt(e).id(i.eid(e.nodeName));\n  }\n  function x(t) {\n    return Math.abs(t) > 1e-37 ? t : 0;\n  }\n  [\"fill\", \"stroke\"].forEach(function (t) {\n    var e = {};\n    e[t] = function (e) {\n      if (void 0 === e) return this;\n      if (\"string\" == typeof e || i.Color.isRgb(e) || e && \"function\" == typeof e.fill) this.attr(t, e);else for (var a = n[t].length - 1; a >= 0; a--) null != e[n[t][a]] && this.attr(n.prefix(t, n[t][a]), e[n[t][a]]);\n      return this;\n    }, i.extend(i.Element, i.FX, e);\n  }), i.extend(i.Element, i.FX, {\n    translate: function (t, e) {\n      return this.transform({\n        x: t,\n        y: e\n      });\n    },\n    matrix: function (t) {\n      return this.attr(\"transform\", new i.Matrix(6 == arguments.length ? [].slice.call(arguments) : t));\n    },\n    opacity: function (t) {\n      return this.attr(\"opacity\", t);\n    },\n    dx: function (t) {\n      return this.x(new i.Number(t).plus(this instanceof i.FX ? 0 : this.x()), !0);\n    },\n    dy: function (t) {\n      return this.y(new i.Number(t).plus(this instanceof i.FX ? 0 : this.y()), !0);\n    }\n  }), i.extend(i.Path, {\n    length: function () {\n      return this.node.getTotalLength();\n    },\n    pointAt: function (t) {\n      return this.node.getPointAtLength(t);\n    }\n  }), i.Set = i.invent({\n    create: function (t) {\n      Array.isArray(t) ? this.members = t : this.clear();\n    },\n    extend: {\n      add: function () {\n        for (var t = [].slice.call(arguments), e = 0, i = t.length; e < i; e++) this.members.push(t[e]);\n        return this;\n      },\n      remove: function (t) {\n        var e = this.index(t);\n        return e > -1 && this.members.splice(e, 1), this;\n      },\n      each: function (t) {\n        for (var e = 0, i = this.members.length; e < i; e++) t.apply(this.members[e], [e, this.members]);\n        return this;\n      },\n      clear: function () {\n        return this.members = [], this;\n      },\n      length: function () {\n        return this.members.length;\n      },\n      has: function (t) {\n        return this.index(t) >= 0;\n      },\n      index: function (t) {\n        return this.members.indexOf(t);\n      },\n      get: function (t) {\n        return this.members[t];\n      },\n      first: function () {\n        return this.get(0);\n      },\n      last: function () {\n        return this.get(this.members.length - 1);\n      },\n      valueOf: function () {\n        return this.members;\n      }\n    },\n    construct: {\n      set: function (t) {\n        return new i.Set(t);\n      }\n    }\n  }), i.FX.Set = i.invent({\n    create: function (t) {\n      this.set = t;\n    }\n  }), i.Set.inherit = function () {\n    var t = [];\n    for (var e in i.Shape.prototype) \"function\" == typeof i.Shape.prototype[e] && \"function\" != typeof i.Set.prototype[e] && t.push(e);\n    for (var e in t.forEach(function (t) {\n      i.Set.prototype[t] = function () {\n        for (var e = 0, a = this.members.length; e < a; e++) this.members[e] && \"function\" == typeof this.members[e][t] && this.members[e][t].apply(this.members[e], arguments);\n        return \"animate\" == t ? this.fx || (this.fx = new i.FX.Set(this)) : this;\n      };\n    }), t = [], i.FX.prototype) \"function\" == typeof i.FX.prototype[e] && \"function\" != typeof i.FX.Set.prototype[e] && t.push(e);\n    t.forEach(function (t) {\n      i.FX.Set.prototype[t] = function () {\n        for (var e = 0, i = this.set.members.length; e < i; e++) this.set.members[e].fx[t].apply(this.set.members[e].fx, arguments);\n        return this;\n      };\n    });\n  }, i.extend(i.Element, {}), i.extend(i.Element, {\n    remember: function (t, e) {\n      if (\"object\" === b(arguments[0])) for (var i in t) this.remember(i, t[i]);else {\n        if (1 == arguments.length) return this.memory()[t];\n        this.memory()[t] = e;\n      }\n      return this;\n    },\n    forget: function () {\n      if (0 == arguments.length) this._memory = {};else for (var t = arguments.length - 1; t >= 0; t--) delete this.memory()[arguments[t]];\n      return this;\n    },\n    memory: function () {\n      return this._memory || (this._memory = {});\n    }\n  }), i.get = function (t) {\n    var a = e.getElementById(function (t) {\n      var e = (t || \"\").toString().match(i.regex.reference);\n      if (e) return e[1];\n    }(t) || t);\n    return i.adopt(a);\n  }, i.select = function (t, a) {\n    return new i.Set(i.utils.map((a || e).querySelectorAll(t), function (t) {\n      return i.adopt(t);\n    }));\n  }, i.extend(i.Parent, {\n    select: function (t) {\n      return i.select(t, this.node);\n    }\n  });\n  var v = \"abcdef\".split(\"\");\n  if (\"function\" != typeof t.CustomEvent) {\n    var m = function (t, i) {\n      i = i || {\n        bubbles: !1,\n        cancelable: !1,\n        detail: void 0\n      };\n      var a = e.createEvent(\"CustomEvent\");\n      return a.initCustomEvent(t, i.bubbles, i.cancelable, i.detail), a;\n    };\n    m.prototype = t.Event.prototype, i.CustomEvent = m;\n  } else i.CustomEvent = t.CustomEvent;\n  return i;\n}, \"function\" == typeof define && define.amd ? define(function () {\n  return Wt(Nt, Nt.document);\n}) : \"object\" === (\"undefined\" == typeof exports ? \"undefined\" : b(exports)) && \"undefined\" != typeof module ? module.exports = Nt.document ? Wt(Nt, Nt.document) : function (t) {\n  return Wt(t, t.document);\n} : Nt.SVG = Wt(Nt, Nt.document),\n/*! svg.filter.js - v2.0.2 - 2016-02-24\n* https://github.com/wout/svg.filter.js\n* Copyright (c) 2016 Wout Fierens; Licensed MIT */\nfunction () {\n  SVG.Filter = SVG.invent({\n    create: \"filter\",\n    inherit: SVG.Parent,\n    extend: {\n      source: \"SourceGraphic\",\n      sourceAlpha: \"SourceAlpha\",\n      background: \"BackgroundImage\",\n      backgroundAlpha: \"BackgroundAlpha\",\n      fill: \"FillPaint\",\n      stroke: \"StrokePaint\",\n      autoSetIn: !0,\n      put: function (t, e) {\n        return this.add(t, e), !t.attr(\"in\") && this.autoSetIn && t.attr(\"in\", this.source), t.attr(\"result\") || t.attr(\"result\", t), t;\n      },\n      blend: function (t, e, i) {\n        return this.put(new SVG.BlendEffect(t, e, i));\n      },\n      colorMatrix: function (t, e) {\n        return this.put(new SVG.ColorMatrixEffect(t, e));\n      },\n      convolveMatrix: function (t) {\n        return this.put(new SVG.ConvolveMatrixEffect(t));\n      },\n      componentTransfer: function (t) {\n        return this.put(new SVG.ComponentTransferEffect(t));\n      },\n      composite: function (t, e, i) {\n        return this.put(new SVG.CompositeEffect(t, e, i));\n      },\n      flood: function (t, e) {\n        return this.put(new SVG.FloodEffect(t, e));\n      },\n      offset: function (t, e) {\n        return this.put(new SVG.OffsetEffect(t, e));\n      },\n      image: function (t) {\n        return this.put(new SVG.ImageEffect(t));\n      },\n      merge: function () {\n        var t = [void 0];\n        for (var e in arguments) t.push(arguments[e]);\n        return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t))());\n      },\n      gaussianBlur: function (t, e) {\n        return this.put(new SVG.GaussianBlurEffect(t, e));\n      },\n      morphology: function (t, e) {\n        return this.put(new SVG.MorphologyEffect(t, e));\n      },\n      diffuseLighting: function (t, e, i) {\n        return this.put(new SVG.DiffuseLightingEffect(t, e, i));\n      },\n      displacementMap: function (t, e, i, a, s) {\n        return this.put(new SVG.DisplacementMapEffect(t, e, i, a, s));\n      },\n      specularLighting: function (t, e, i, a) {\n        return this.put(new SVG.SpecularLightingEffect(t, e, i, a));\n      },\n      tile: function () {\n        return this.put(new SVG.TileEffect());\n      },\n      turbulence: function (t, e, i, a, s) {\n        return this.put(new SVG.TurbulenceEffect(t, e, i, a, s));\n      },\n      toString: function () {\n        return \"url(#\" + this.attr(\"id\") + \")\";\n      }\n    }\n  }), SVG.extend(SVG.Defs, {\n    filter: function (t) {\n      var e = this.put(new SVG.Filter());\n      return \"function\" == typeof t && t.call(e, e), e;\n    }\n  }), SVG.extend(SVG.Container, {\n    filter: function (t) {\n      return this.defs().filter(t);\n    }\n  }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {\n    filter: function (t) {\n      return this.filterer = t instanceof SVG.Element ? t : this.doc().filter(t), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr(\"filter\", this.filterer), this.filterer;\n    },\n    unfilter: function (t) {\n      return this.filterer && !0 === t && this.filterer.remove(), delete this.filterer, this.attr(\"filter\", null);\n    }\n  }), SVG.Effect = SVG.invent({\n    create: function () {\n      this.constructor.call(this);\n    },\n    inherit: SVG.Element,\n    extend: {\n      in: function (t) {\n        return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in\") + '\"]').get(0) || this.attr(\"in\") : this.attr(\"in\", t);\n      },\n      result: function (t) {\n        return null == t ? this.attr(\"result\") : this.attr(\"result\", t);\n      },\n      toString: function () {\n        return this.result();\n      }\n    }\n  }), SVG.ParentEffect = SVG.invent({\n    create: function () {\n      this.constructor.call(this);\n    },\n    inherit: SVG.Parent,\n    extend: {\n      in: function (t) {\n        return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in\") + '\"]').get(0) || this.attr(\"in\") : this.attr(\"in\", t);\n      },\n      result: function (t) {\n        return null == t ? this.attr(\"result\") : this.attr(\"result\", t);\n      },\n      toString: function () {\n        return this.result();\n      }\n    }\n  });\n  var t = {\n    blend: function (t, e) {\n      return this.parent() && this.parent().blend(this, t, e);\n    },\n    colorMatrix: function (t, e) {\n      return this.parent() && this.parent().colorMatrix(t, e).in(this);\n    },\n    convolveMatrix: function (t) {\n      return this.parent() && this.parent().convolveMatrix(t).in(this);\n    },\n    componentTransfer: function (t) {\n      return this.parent() && this.parent().componentTransfer(t).in(this);\n    },\n    composite: function (t, e) {\n      return this.parent() && this.parent().composite(this, t, e);\n    },\n    flood: function (t, e) {\n      return this.parent() && this.parent().flood(t, e);\n    },\n    offset: function (t, e) {\n      return this.parent() && this.parent().offset(t, e).in(this);\n    },\n    image: function (t) {\n      return this.parent() && this.parent().image(t);\n    },\n    merge: function () {\n      return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));\n    },\n    gaussianBlur: function (t, e) {\n      return this.parent() && this.parent().gaussianBlur(t, e).in(this);\n    },\n    morphology: function (t, e) {\n      return this.parent() && this.parent().morphology(t, e).in(this);\n    },\n    diffuseLighting: function (t, e, i) {\n      return this.parent() && this.parent().diffuseLighting(t, e, i).in(this);\n    },\n    displacementMap: function (t, e, i, a) {\n      return this.parent() && this.parent().displacementMap(this, t, e, i, a);\n    },\n    specularLighting: function (t, e, i, a) {\n      return this.parent() && this.parent().specularLighting(t, e, i, a).in(this);\n    },\n    tile: function () {\n      return this.parent() && this.parent().tile().in(this);\n    },\n    turbulence: function (t, e, i, a, s) {\n      return this.parent() && this.parent().turbulence(t, e, i, a, s).in(this);\n    }\n  };\n  SVG.extend(SVG.Effect, t), SVG.extend(SVG.ParentEffect, t), SVG.ChildEffect = SVG.invent({\n    create: function () {\n      this.constructor.call(this);\n    },\n    inherit: SVG.Element,\n    extend: {\n      in: function (t) {\n        this.attr(\"in\", t);\n      }\n    }\n  });\n  var e = {\n      blend: function (t, e, i) {\n        this.attr({\n          in: t,\n          in2: e,\n          mode: i || \"normal\"\n        });\n      },\n      colorMatrix: function (t, e) {\n        \"matrix\" == t && (e = s(e)), this.attr({\n          type: t,\n          values: void 0 === e ? null : e\n        });\n      },\n      convolveMatrix: function (t) {\n        t = s(t), this.attr({\n          order: Math.sqrt(t.split(\" \").length),\n          kernelMatrix: t\n        });\n      },\n      composite: function (t, e, i) {\n        this.attr({\n          in: t,\n          in2: e,\n          operator: i\n        });\n      },\n      flood: function (t, e) {\n        this.attr(\"flood-color\", t), null != e && this.attr(\"flood-opacity\", e);\n      },\n      offset: function (t, e) {\n        this.attr({\n          dx: t,\n          dy: e\n        });\n      },\n      image: function (t) {\n        this.attr(\"href\", t, SVG.xlink);\n      },\n      displacementMap: function (t, e, i, a, s) {\n        this.attr({\n          in: t,\n          in2: e,\n          scale: i,\n          xChannelSelector: a,\n          yChannelSelector: s\n        });\n      },\n      gaussianBlur: function (t, e) {\n        null != t || null != e ? this.attr(\"stdDeviation\", function (t) {\n          if (!Array.isArray(t)) return t;\n          for (var e = 0, i = t.length, a = []; e < i; e++) a.push(t[e]);\n          return a.join(\" \");\n        }(Array.prototype.slice.call(arguments))) : this.attr(\"stdDeviation\", \"0 0\");\n      },\n      morphology: function (t, e) {\n        this.attr({\n          operator: t,\n          radius: e\n        });\n      },\n      tile: function () {},\n      turbulence: function (t, e, i, a, s) {\n        this.attr({\n          numOctaves: e,\n          seed: i,\n          stitchTiles: a,\n          baseFrequency: t,\n          type: s\n        });\n      }\n    },\n    i = {\n      merge: function () {\n        var t;\n        if (arguments[0] instanceof SVG.Set) {\n          var e = this;\n          arguments[0].each(function (t) {\n            this instanceof SVG.MergeNode ? e.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e.put(new SVG.MergeNode(this));\n          });\n        } else {\n          t = Array.isArray(arguments[0]) ? arguments[0] : arguments;\n          for (var i = 0; i < t.length; i++) t[i] instanceof SVG.MergeNode ? this.put(t[i]) : this.put(new SVG.MergeNode(t[i]));\n        }\n      },\n      componentTransfer: function (t) {\n        if (this.rgb = new SVG.Set(), [\"r\", \"g\", \"b\", \"a\"].forEach(function (t) {\n          this[t] = new SVG[\"Func\" + t.toUpperCase()](\"identity\"), this.rgb.add(this[t]), this.node.appendChild(this[t].node);\n        }.bind(this)), t) for (var e in t.rgb && ([\"r\", \"g\", \"b\"].forEach(function (e) {\n          this[e].attr(t.rgb);\n        }.bind(this)), delete t.rgb), t) this[e].attr(t[e]);\n      },\n      diffuseLighting: function (t, e, i) {\n        this.attr({\n          surfaceScale: t,\n          diffuseConstant: e,\n          kernelUnitLength: i\n        });\n      },\n      specularLighting: function (t, e, i, a) {\n        this.attr({\n          surfaceScale: t,\n          diffuseConstant: e,\n          specularExponent: i,\n          kernelUnitLength: a\n        });\n      }\n    },\n    a = {\n      distantLight: function (t, e) {\n        this.attr({\n          azimuth: t,\n          elevation: e\n        });\n      },\n      pointLight: function (t, e, i) {\n        this.attr({\n          x: t,\n          y: e,\n          z: i\n        });\n      },\n      spotLight: function (t, e, i, a, s, r) {\n        this.attr({\n          x: t,\n          y: e,\n          z: i,\n          pointsAtX: a,\n          pointsAtY: s,\n          pointsAtZ: r\n        });\n      },\n      mergeNode: function (t) {\n        this.attr(\"in\", t);\n      }\n    };\n  function s(t) {\n    return Array.isArray(t) && (t = new SVG.Array(t)), t.toString().replace(/^\\s+/, \"\").replace(/\\s+$/, \"\").replace(/\\s+/g, \" \");\n  }\n  function r() {\n    var t = function () {};\n    for (var e in \"function\" == typeof arguments[arguments.length - 1] && (t = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments) for (var i in arguments[e]) t(arguments[e][i], i, arguments[e]);\n  }\n  [\"r\", \"g\", \"b\", \"a\"].forEach(function (t) {\n    a[\"Func\" + t.toUpperCase()] = function (t) {\n      switch (this.attr(\"type\", t), t) {\n        case \"table\":\n          this.attr(\"tableValues\", arguments[1]);\n          break;\n        case \"linear\":\n          this.attr(\"slope\", arguments[1]), this.attr(\"intercept\", arguments[2]);\n          break;\n        case \"gamma\":\n          this.attr(\"amplitude\", arguments[1]), this.attr(\"exponent\", arguments[2]), this.attr(\"offset\", arguments[2]);\n      }\n    };\n  }), r(e, function (t, e) {\n    var i = e.charAt(0).toUpperCase() + e.slice(1);\n    SVG[i + \"Effect\"] = SVG.invent({\n      create: function () {\n        this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments), this.result(this.attr(\"id\") + \"Out\");\n      },\n      inherit: SVG.Effect,\n      extend: {}\n    });\n  }), r(i, function (t, e) {\n    var i = e.charAt(0).toUpperCase() + e.slice(1);\n    SVG[i + \"Effect\"] = SVG.invent({\n      create: function () {\n        this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments), this.result(this.attr(\"id\") + \"Out\");\n      },\n      inherit: SVG.ParentEffect,\n      extend: {}\n    });\n  }), r(a, function (t, e) {\n    var i = e.charAt(0).toUpperCase() + e.slice(1);\n    SVG[i] = SVG.invent({\n      create: function () {\n        this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments);\n      },\n      inherit: SVG.ChildEffect,\n      extend: {}\n    });\n  }), SVG.extend(SVG.MergeEffect, {\n    in: function (t) {\n      return t instanceof SVG.MergeNode ? this.add(t, 0) : this.add(new SVG.MergeNode(t), 0), this;\n    }\n  }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {\n    in2: function (t) {\n      return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in2\") + '\"]').get(0) || this.attr(\"in2\") : this.attr(\"in2\", t);\n    }\n  }), SVG.filter = {\n    sepiatone: [.343, .669, .119, 0, 0, .249, .626, .13, 0, 0, .172, .334, .111, 0, 0, 0, 0, 0, 1, 0]\n  };\n}.call(void 0), function () {\n  function t(t, s, r, o, n, l, h) {\n    for (var c = t.slice(s, r || h), d = o.slice(n, l || h), g = 0, u = {\n        pos: [0, 0],\n        start: [0, 0]\n      }, f = {\n        pos: [0, 0],\n        start: [0, 0]\n      };;) {\n      if (c[g] = e.call(u, c[g]), d[g] = e.call(f, d[g]), c[g][0] != d[g][0] || \"M\" == c[g][0] || \"A\" == c[g][0] && (c[g][4] != d[g][4] || c[g][5] != d[g][5]) ? (Array.prototype.splice.apply(c, [g, 1].concat(a.call(u, c[g]))), Array.prototype.splice.apply(d, [g, 1].concat(a.call(f, d[g])))) : (c[g] = i.call(u, c[g]), d[g] = i.call(f, d[g])), ++g == c.length && g == d.length) break;\n      g == c.length && c.push([\"C\", u.pos[0], u.pos[1], u.pos[0], u.pos[1], u.pos[0], u.pos[1]]), g == d.length && d.push([\"C\", f.pos[0], f.pos[1], f.pos[0], f.pos[1], f.pos[0], f.pos[1]]);\n    }\n    return {\n      start: c,\n      dest: d\n    };\n  }\n  function e(t) {\n    switch (t[0]) {\n      case \"z\":\n      case \"Z\":\n        t[0] = \"L\", t[1] = this.start[0], t[2] = this.start[1];\n        break;\n      case \"H\":\n        t[0] = \"L\", t[2] = this.pos[1];\n        break;\n      case \"V\":\n        t[0] = \"L\", t[2] = t[1], t[1] = this.pos[0];\n        break;\n      case \"T\":\n        t[0] = \"Q\", t[3] = t[1], t[4] = t[2], t[1] = this.reflection[1], t[2] = this.reflection[0];\n        break;\n      case \"S\":\n        t[0] = \"C\", t[6] = t[4], t[5] = t[3], t[4] = t[2], t[3] = t[1], t[2] = this.reflection[1], t[1] = this.reflection[0];\n    }\n    return t;\n  }\n  function i(t) {\n    var e = t.length;\n    return this.pos = [t[e - 2], t[e - 1]], -1 != \"SCQT\".indexOf(t[0]) && (this.reflection = [2 * this.pos[0] - t[e - 4], 2 * this.pos[1] - t[e - 3]]), t;\n  }\n  function a(t) {\n    var e = [t];\n    switch (t[0]) {\n      case \"M\":\n        return this.pos = this.start = [t[1], t[2]], e;\n      case \"L\":\n        t[5] = t[3] = t[1], t[6] = t[4] = t[2], t[1] = this.pos[0], t[2] = this.pos[1];\n        break;\n      case \"Q\":\n        t[6] = t[4], t[5] = t[3], t[4] = 1 * t[4] / 3 + 2 * t[2] / 3, t[3] = 1 * t[3] / 3 + 2 * t[1] / 3, t[2] = 1 * this.pos[1] / 3 + 2 * t[2] / 3, t[1] = 1 * this.pos[0] / 3 + 2 * t[1] / 3;\n        break;\n      case \"A\":\n        e = function (t, e) {\n          var i,\n            a,\n            s,\n            r,\n            o,\n            n,\n            l,\n            h,\n            c,\n            d,\n            g,\n            u,\n            f,\n            p,\n            x,\n            b,\n            v,\n            m,\n            y,\n            w,\n            k,\n            A,\n            S,\n            C,\n            L,\n            P,\n            M = Math.abs(e[1]),\n            I = Math.abs(e[2]),\n            T = e[3] % 360,\n            z = e[4],\n            X = e[5],\n            E = e[6],\n            Y = e[7],\n            R = new SVG.Point(t),\n            F = new SVG.Point(E, Y),\n            D = [];\n          if (0 === M || 0 === I || R.x === F.x && R.y === F.y) return [[\"C\", R.x, R.y, F.x, F.y, F.x, F.y]];\n          i = new SVG.Point((R.x - F.x) / 2, (R.y - F.y) / 2).transform(new SVG.Matrix().rotate(T)), (a = i.x * i.x / (M * M) + i.y * i.y / (I * I)) > 1 && (M *= a = Math.sqrt(a), I *= a);\n          s = new SVG.Matrix().rotate(T).scale(1 / M, 1 / I).rotate(-T), R = R.transform(s), F = F.transform(s), r = [F.x - R.x, F.y - R.y], n = r[0] * r[0] + r[1] * r[1], o = Math.sqrt(n), r[0] /= o, r[1] /= o, l = n < 4 ? Math.sqrt(1 - n / 4) : 0, z === X && (l *= -1);\n          h = new SVG.Point((F.x + R.x) / 2 + l * -r[1], (F.y + R.y) / 2 + l * r[0]), c = new SVG.Point(R.x - h.x, R.y - h.y), d = new SVG.Point(F.x - h.x, F.y - h.y), g = Math.acos(c.x / Math.sqrt(c.x * c.x + c.y * c.y)), c.y < 0 && (g *= -1);\n          u = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)), d.y < 0 && (u *= -1);\n          X && g > u && (u += 2 * Math.PI);\n          !X && g < u && (u -= 2 * Math.PI);\n          for (p = Math.ceil(2 * Math.abs(g - u) / Math.PI), b = [], v = g, f = (u - g) / p, x = 4 * Math.tan(f / 4) / 3, k = 0; k <= p; k++) y = Math.cos(v), m = Math.sin(v), w = new SVG.Point(h.x + y, h.y + m), b[k] = [new SVG.Point(w.x + x * m, w.y - x * y), w, new SVG.Point(w.x - x * m, w.y + x * y)], v += f;\n          for (b[0][0] = b[0][1].clone(), b[b.length - 1][2] = b[b.length - 1][1].clone(), s = new SVG.Matrix().rotate(T).scale(M, I).rotate(-T), k = 0, A = b.length; k < A; k++) b[k][0] = b[k][0].transform(s), b[k][1] = b[k][1].transform(s), b[k][2] = b[k][2].transform(s);\n          for (k = 1, A = b.length; k < A; k++) S = (w = b[k - 1][2]).x, C = w.y, L = (w = b[k][0]).x, P = w.y, E = (w = b[k][1]).x, Y = w.y, D.push([\"C\", S, C, L, P, E, Y]);\n          return D;\n        }(this.pos, t), t = e[0];\n    }\n    return t[0] = \"C\", this.pos = [t[5], t[6]], this.reflection = [2 * t[5] - t[3], 2 * t[6] - t[4]], e;\n  }\n  function s(t, e) {\n    if (!1 === e) return !1;\n    for (var i = e, a = t.length; i < a; ++i) if (\"M\" == t[i][0]) return i;\n    return !1;\n  }\n  SVG.extend(SVG.PathArray, {\n    morph: function (e) {\n      for (var i = this.value, a = this.parse(e), r = 0, o = 0, n = !1, l = !1; !1 !== r || !1 !== o;) {\n        var h;\n        n = s(i, !1 !== r && r + 1), l = s(a, !1 !== o && o + 1), !1 === r && (r = 0 == (h = new SVG.PathArray(c.start).bbox()).height || 0 == h.width ? i.push(i[0]) - 1 : i.push([\"M\", h.x + h.width / 2, h.y + h.height / 2]) - 1), !1 === o && (o = 0 == (h = new SVG.PathArray(c.dest).bbox()).height || 0 == h.width ? a.push(a[0]) - 1 : a.push([\"M\", h.x + h.width / 2, h.y + h.height / 2]) - 1);\n        var c = t(i, r, n, a, o, l);\n        i = i.slice(0, r).concat(c.start, !1 === n ? [] : i.slice(n)), a = a.slice(0, o).concat(c.dest, !1 === l ? [] : a.slice(l)), r = !1 !== n && r + c.start.length, o = !1 !== l && o + c.dest.length;\n      }\n      return this.value = i, this.destination = new SVG.PathArray(), this.destination.value = a, this;\n    }\n  });\n}(),\n/*! svg.draggable.js - v2.2.2 - 2019-01-08\n* https://github.com/svgdotjs/svg.draggable.js\n* Copyright (c) 2019 Wout Fierens; Licensed MIT */\nfunction () {\n  function t(t) {\n    t.remember(\"_draggable\", this), this.el = t;\n  }\n  t.prototype.init = function (t, e) {\n    var i = this;\n    this.constraint = t, this.value = e, this.el.on(\"mousedown.drag\", function (t) {\n      i.start(t);\n    }), this.el.on(\"touchstart.drag\", function (t) {\n      i.start(t);\n    });\n  }, t.prototype.transformPoint = function (t, e) {\n    var i = (t = t || window.event).changedTouches && t.changedTouches[0] || t;\n    return this.p.x = i.clientX - (e || 0), this.p.y = i.clientY, this.p.matrixTransform(this.m);\n  }, t.prototype.getBBox = function () {\n    var t = this.el.bbox();\n    return this.el instanceof SVG.Nested && (t = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t.x = this.el.x(), t.y = this.el.y()), t;\n  }, t.prototype.start = function (t) {\n    if (\"click\" != t.type && \"mousedown\" != t.type && \"mousemove\" != t.type || 1 == (t.which || t.buttons)) {\n      var e = this;\n      if (this.el.fire(\"beforedrag\", {\n        event: t,\n        handler: this\n      }), !this.el.event().defaultPrevented) {\n        t.preventDefault(), t.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();\n        var i,\n          a = this.getBBox();\n        if (this.el instanceof SVG.Text) switch (i = this.el.node.getComputedTextLength(), this.el.attr(\"text-anchor\")) {\n          case \"middle\":\n            i /= 2;\n            break;\n          case \"start\":\n            i = 0;\n        }\n        this.startPoints = {\n          point: this.transformPoint(t, i),\n          box: a,\n          transform: this.el.transform()\n        }, SVG.on(window, \"mousemove.drag\", function (t) {\n          e.drag(t);\n        }), SVG.on(window, \"touchmove.drag\", function (t) {\n          e.drag(t);\n        }), SVG.on(window, \"mouseup.drag\", function (t) {\n          e.end(t);\n        }), SVG.on(window, \"touchend.drag\", function (t) {\n          e.end(t);\n        }), this.el.fire(\"dragstart\", {\n          event: t,\n          p: this.startPoints.point,\n          m: this.m,\n          handler: this\n        });\n      }\n    }\n  }, t.prototype.drag = function (t) {\n    var e = this.getBBox(),\n      i = this.transformPoint(t),\n      a = this.startPoints.box.x + i.x - this.startPoints.point.x,\n      s = this.startPoints.box.y + i.y - this.startPoints.point.y,\n      r = this.constraint,\n      o = i.x - this.startPoints.point.x,\n      n = i.y - this.startPoints.point.y;\n    if (this.el.fire(\"dragmove\", {\n      event: t,\n      p: i,\n      m: this.m,\n      handler: this\n    }), this.el.event().defaultPrevented) return i;\n    if (\"function\" == typeof r) {\n      var l = r.call(this.el, a, s, this.m);\n      \"boolean\" == typeof l && (l = {\n        x: l,\n        y: l\n      }), !0 === l.x ? this.el.x(a) : !1 !== l.x && this.el.x(l.x), !0 === l.y ? this.el.y(s) : !1 !== l.y && this.el.y(l.y);\n    } else \"object\" == typeof r && (null != r.minX && a < r.minX ? o = (a = r.minX) - this.startPoints.box.x : null != r.maxX && a > r.maxX - e.width && (o = (a = r.maxX - e.width) - this.startPoints.box.x), null != r.minY && s < r.minY ? n = (s = r.minY) - this.startPoints.box.y : null != r.maxY && s > r.maxY - e.height && (n = (s = r.maxY - e.height) - this.startPoints.box.y), null != r.snapToGrid && (a -= a % r.snapToGrid, s -= s % r.snapToGrid, o -= o % r.snapToGrid, n -= n % r.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({\n      x: o,\n      y: n\n    }, !0) : this.el.move(a, s));\n    return i;\n  }, t.prototype.end = function (t) {\n    var e = this.drag(t);\n    this.el.fire(\"dragend\", {\n      event: t,\n      p: e,\n      m: this.m,\n      handler: this\n    }), SVG.off(window, \"mousemove.drag\"), SVG.off(window, \"touchmove.drag\"), SVG.off(window, \"mouseup.drag\"), SVG.off(window, \"touchend.drag\");\n  }, SVG.extend(SVG.Element, {\n    draggable: function (e, i) {\n      \"function\" != typeof e && \"object\" != typeof e || (i = e, e = !0);\n      var a = this.remember(\"_draggable\") || new t(this);\n      return (e = void 0 === e || e) ? a.init(i || {}, e) : (this.off(\"mousedown.drag\"), this.off(\"touchstart.drag\")), this;\n    }\n  });\n}.call(void 0), function () {\n  function t(t) {\n    this.el = t, t.remember(\"_selectHandler\", this), this.pointSelection = {\n      isSelected: !1\n    }, this.rectSelection = {\n      isSelected: !1\n    }, this.pointsList = {\n      lt: [0, 0],\n      rt: [\"width\", 0],\n      rb: [\"width\", \"height\"],\n      lb: [0, \"height\"],\n      t: [\"width\", 0],\n      r: [\"width\", \"height\"],\n      b: [\"width\", \"height\"],\n      l: [0, \"height\"]\n    }, this.pointCoord = function (t, e, i) {\n      var a = \"string\" != typeof t ? t : e[t];\n      return i ? a / 2 : a;\n    }, this.pointCoords = function (t, e) {\n      var i = this.pointsList[t];\n      return {\n        x: this.pointCoord(i[0], e, \"t\" === t || \"b\" === t),\n        y: this.pointCoord(i[1], e, \"r\" === t || \"l\" === t)\n      };\n    };\n  }\n  t.prototype.init = function (t, e) {\n    var i = this.el.bbox();\n    this.options = {};\n    var a = this.el.selectize.defaults.points;\n    for (var s in this.el.selectize.defaults) this.options[s] = this.el.selectize.defaults[s], void 0 !== e[s] && (this.options[s] = e[s]);\n    var r = [\"points\", \"pointsExclude\"];\n    for (var s in r) {\n      var o = this.options[r[s]];\n      \"string\" == typeof o ? o = o.length > 0 ? o.split(/\\s*,\\s*/i) : [] : \"boolean\" == typeof o && \"points\" === r[s] && (o = o ? a : []), this.options[r[s]] = o;\n    }\n    this.options.points = [a, this.options.points].reduce(function (t, e) {\n      return t.filter(function (t) {\n        return e.indexOf(t) > -1;\n      });\n    }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function (t, e) {\n      return t.filter(function (t) {\n        return e.indexOf(t) < 0;\n      });\n    }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)), this.options.deepSelect && -1 !== [\"line\", \"polyline\", \"polygon\"].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t), this.observe(), this.cleanup();\n  }, t.prototype.selectPoints = function (t) {\n    return this.pointSelection.isSelected = t, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;\n  }, t.prototype.getPointArray = function () {\n    var t = this.el.bbox();\n    return this.el.array().valueOf().map(function (e) {\n      return [e[0] - t.x, e[1] - t.y];\n    });\n  }, t.prototype.drawPoints = function () {\n    for (var t = this, e = this.getPointArray(), i = 0, a = e.length; i < a; ++i) {\n      var s = function (e) {\n          return function (i) {\n            (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();\n            var a = i.pageX || i.touches[0].pageX,\n              s = i.pageY || i.touches[0].pageY;\n            t.el.fire(\"point\", {\n              x: a,\n              y: s,\n              i: e,\n              event: i\n            });\n          };\n        }(i),\n        r = this.drawPoint(e[i][0], e[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + \"_point\").on(\"touchstart\", s).on(\"mousedown\", s);\n      this.pointSelection.set.add(r);\n    }\n  }, t.prototype.drawPoint = function (t, e) {\n    var i = this.options.pointType;\n    switch (i) {\n      case \"circle\":\n        return this.drawCircle(t, e);\n      case \"rect\":\n        return this.drawRect(t, e);\n      default:\n        if (\"function\" == typeof i) return i.call(this, t, e);\n        throw new Error(\"Unknown \" + i + \" point type!\");\n    }\n  }, t.prototype.drawCircle = function (t, e) {\n    return this.nested.circle(this.options.pointSize).center(t, e);\n  }, t.prototype.drawRect = function (t, e) {\n    return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t, e);\n  }, t.prototype.updatePointSelection = function () {\n    var t = this.getPointArray();\n    this.pointSelection.set.each(function (e) {\n      this.cx() === t[e][0] && this.cy() === t[e][1] || this.center(t[e][0], t[e][1]);\n    });\n  }, t.prototype.updateRectSelection = function () {\n    var t = this,\n      e = this.el.bbox();\n    if (this.rectSelection.set.get(0).attr({\n      width: e.width,\n      height: e.height\n    }), this.options.points.length && this.options.points.map(function (i, a) {\n      var s = t.pointCoords(i, e);\n      t.rectSelection.set.get(a + 1).center(s.x, s.y);\n    }), this.options.rotationPoint) {\n      var i = this.rectSelection.set.length();\n      this.rectSelection.set.get(i - 1).center(e.width / 2, 20);\n    }\n  }, t.prototype.selectRect = function (t) {\n    var e = this,\n      i = this.el.bbox();\n    function a(t) {\n      return function (i) {\n        (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();\n        var a = i.pageX || i.touches[0].pageX,\n          s = i.pageY || i.touches[0].pageY;\n        e.el.fire(t, {\n          x: a,\n          y: s,\n          event: i\n        });\n      };\n    }\n    if (this.rectSelection.isSelected = t, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i.width, i.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {\n      this.options.points.map(function (t, s) {\n        var r = e.pointCoords(t, i),\n          o = e.drawPoint(r.x, r.y).attr(\"class\", e.options.classPoints + \"_\" + t).on(\"mousedown\", a(t)).on(\"touchstart\", a(t));\n        e.rectSelection.set.add(o);\n      }), this.rectSelection.set.each(function () {\n        this.addClass(e.options.classPoints);\n      });\n    }\n    if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {\n      var s = function (t) {\n          (t = t || window.event).preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation();\n          var i = t.pageX || t.touches[0].pageX,\n            a = t.pageY || t.touches[0].pageY;\n          e.el.fire(\"rot\", {\n            x: i,\n            y: a,\n            event: t\n          });\n        },\n        r = this.drawPoint(i.width / 2, 20).attr(\"class\", this.options.classPoints + \"_rot\").on(\"touchstart\", s).on(\"mousedown\", s);\n      this.rectSelection.set.add(r);\n    }\n  }, t.prototype.handler = function () {\n    var t = this.el.bbox();\n    this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();\n  }, t.prototype.observe = function () {\n    var t = this;\n    if (MutationObserver) {\n      if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function () {\n        t.handler();\n      }), this.observerInst.observe(this.el.node, {\n        attributes: !0\n      });else try {\n        this.observerInst.disconnect(), delete this.observerInst;\n      } catch (t) {}\n    } else this.el.off(\"DOMAttrModified.select\"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on(\"DOMAttrModified.select\", function () {\n      t.handler();\n    });\n  }, t.prototype.cleanup = function () {\n    !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function () {\n      this.remove();\n    }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function () {\n      this.remove();\n    }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);\n  }, SVG.extend(SVG.Element, {\n    selectize: function (e, i) {\n      return \"object\" == typeof e && (i = e, e = !0), (this.remember(\"_selectHandler\") || new t(this)).init(void 0 === e || e, i || {}), this;\n    }\n  }), SVG.Element.prototype.selectize.defaults = {\n    points: [\"lt\", \"rt\", \"rb\", \"lb\", \"t\", \"r\", \"b\", \"l\"],\n    pointsExclude: [],\n    classRect: \"svg_select_boundingRect\",\n    classPoints: \"svg_select_points\",\n    pointSize: 7,\n    rotationPoint: !0,\n    deepSelect: !1,\n    pointType: \"circle\"\n  };\n}(), function () {\n  (function () {\n    function t(t) {\n      t.remember(\"_resizeHandler\", this), this.el = t, this.parameters = {}, this.lastUpdateCall = null, this.p = t.doc().node.createSVGPoint();\n    }\n    t.prototype.transformPoint = function (t, e, i) {\n      return this.p.x = t - (this.offset.x - window.pageXOffset), this.p.y = e - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i || this.m);\n    }, t.prototype._extractPosition = function (t) {\n      return {\n        x: null != t.clientX ? t.clientX : t.touches[0].clientX,\n        y: null != t.clientY ? t.clientY : t.touches[0].clientY\n      };\n    }, t.prototype.init = function (t) {\n      var e = this;\n      if (this.stop(), \"stop\" !== t) {\n        for (var i in this.options = {}, this.el.resize.defaults) this.options[i] = this.el.resize.defaults[i], void 0 !== t[i] && (this.options[i] = t[i]);\n        this.el.on(\"lt.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"rt.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"rb.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"lb.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"t.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"r.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"b.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"l.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"rot.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.el.on(\"point.resize\", function (t) {\n          e.resize(t || window.event);\n        }), this.update();\n      }\n    }, t.prototype.stop = function () {\n      return this.el.off(\"lt.resize\"), this.el.off(\"rt.resize\"), this.el.off(\"rb.resize\"), this.el.off(\"lb.resize\"), this.el.off(\"t.resize\"), this.el.off(\"r.resize\"), this.el.off(\"b.resize\"), this.el.off(\"l.resize\"), this.el.off(\"rot.resize\"), this.el.off(\"point.resize\"), this;\n    }, t.prototype.resize = function (t) {\n      var e = this;\n      this.m = this.el.node.getScreenCTM().inverse(), this.offset = {\n        x: window.pageXOffset,\n        y: window.pageYOffset\n      };\n      var i = this._extractPosition(t.detail.event);\n      if (this.parameters = {\n        type: this.el.type,\n        p: this.transformPoint(i.x, i.y),\n        x: t.detail.x,\n        y: t.detail.y,\n        box: this.el.bbox(),\n        rotation: this.el.transform().rotation\n      }, \"text\" === this.el.type && (this.parameters.fontSize = this.el.attr()[\"font-size\"]), void 0 !== t.detail.i) {\n        var a = this.el.array().valueOf();\n        this.parameters.i = t.detail.i, this.parameters.pointCoords = [a[t.detail.i][0], a[t.detail.i][1]];\n      }\n      switch (t.type) {\n        case \"lt\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e);\n            if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height - i[1] > 0) {\n              if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize - i[0]);\n              i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y + i[1]).size(this.parameters.box.width - i[0], this.parameters.box.height - i[1]);\n            }\n          };\n          break;\n        case \"rt\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e, 2);\n            if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height - i[1] > 0) {\n              if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize + i[0]);\n              i = this.checkAspectRatio(i, !0), this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).size(this.parameters.box.width + i[0], this.parameters.box.height - i[1]);\n            }\n          };\n          break;\n        case \"rb\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e, 0);\n            if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height + i[1] > 0) {\n              if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize + i[0]);\n              i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i[0], this.parameters.box.height + i[1]);\n            }\n          };\n          break;\n        case \"lb\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e, 1);\n            if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height + i[1] > 0) {\n              if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize - i[0]);\n              i = this.checkAspectRatio(i, !0), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).size(this.parameters.box.width - i[0], this.parameters.box.height + i[1]);\n            }\n          };\n          break;\n        case \"t\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e, 2);\n            if (this.parameters.box.height - i[1] > 0) {\n              if (\"text\" === this.parameters.type) return;\n              this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).height(this.parameters.box.height - i[1]);\n            }\n          };\n          break;\n        case \"r\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e, 0);\n            if (this.parameters.box.width + i[0] > 0) {\n              if (\"text\" === this.parameters.type) return;\n              this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i[0]);\n            }\n          };\n          break;\n        case \"b\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e, 0);\n            if (this.parameters.box.height + i[1] > 0) {\n              if (\"text\" === this.parameters.type) return;\n              this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i[1]);\n            }\n          };\n          break;\n        case \"l\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e, 1);\n            if (this.parameters.box.width - i[0] > 0) {\n              if (\"text\" === this.parameters.type) return;\n              this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).width(this.parameters.box.width - i[0]);\n            }\n          };\n          break;\n        case \"rot\":\n          this.calc = function (t, e) {\n            var i = t + this.parameters.p.x,\n              a = e + this.parameters.p.y,\n              s = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2),\n              r = Math.atan2(a - this.parameters.box.y - this.parameters.box.height / 2, i - this.parameters.box.x - this.parameters.box.width / 2),\n              o = this.parameters.rotation + 180 * (r - s) / Math.PI + this.options.snapToAngle / 2;\n            this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o - o % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);\n          };\n          break;\n        case \"point\":\n          this.calc = function (t, e) {\n            var i = this.snapToGrid(t, e, this.parameters.pointCoords[0], this.parameters.pointCoords[1]),\n              a = this.el.array().valueOf();\n            a[this.parameters.i][0] = this.parameters.pointCoords[0] + i[0], a[this.parameters.i][1] = this.parameters.pointCoords[1] + i[1], this.el.plot(a);\n          };\n      }\n      this.el.fire(\"resizestart\", {\n        dx: this.parameters.x,\n        dy: this.parameters.y,\n        event: t\n      }), SVG.on(window, \"touchmove.resize\", function (t) {\n        e.update(t || window.event);\n      }), SVG.on(window, \"touchend.resize\", function () {\n        e.done();\n      }), SVG.on(window, \"mousemove.resize\", function (t) {\n        e.update(t || window.event);\n      }), SVG.on(window, \"mouseup.resize\", function () {\n        e.done();\n      });\n    }, t.prototype.update = function (t) {\n      if (t) {\n        var e = this._extractPosition(t),\n          i = this.transformPoint(e.x, e.y),\n          a = i.x - this.parameters.p.x,\n          s = i.y - this.parameters.p.y;\n        this.lastUpdateCall = [a, s], this.calc(a, s), this.el.fire(\"resizing\", {\n          dx: a,\n          dy: s,\n          event: t\n        });\n      } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\n    }, t.prototype.done = function () {\n      this.lastUpdateCall = null, SVG.off(window, \"mousemove.resize\"), SVG.off(window, \"mouseup.resize\"), SVG.off(window, \"touchmove.resize\"), SVG.off(window, \"touchend.resize\"), this.el.fire(\"resizedone\");\n    }, t.prototype.snapToGrid = function (t, e, i, a) {\n      var s;\n      return void 0 !== a ? s = [(i + t) % this.options.snapToGrid, (a + e) % this.options.snapToGrid] : (i = null == i ? 3 : i, s = [(this.parameters.box.x + t + (1 & i ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e + (2 & i ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t < 0 && (s[0] -= this.options.snapToGrid), e < 0 && (s[1] -= this.options.snapToGrid), t -= Math.abs(s[0]) < this.options.snapToGrid / 2 ? s[0] : s[0] - (t < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e -= Math.abs(s[1]) < this.options.snapToGrid / 2 ? s[1] : s[1] - (e < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t, e, i, a);\n    }, t.prototype.constraintToBox = function (t, e, i, a) {\n      var s,\n        r,\n        o = this.options.constraint || {};\n      return void 0 !== a ? (s = i, r = a) : (s = this.parameters.box.x + (1 & i ? 0 : this.parameters.box.width), r = this.parameters.box.y + (2 & i ? 0 : this.parameters.box.height)), void 0 !== o.minX && s + t < o.minX && (t = o.minX - s), void 0 !== o.maxX && s + t > o.maxX && (t = o.maxX - s), void 0 !== o.minY && r + e < o.minY && (e = o.minY - r), void 0 !== o.maxY && r + e > o.maxY && (e = o.maxY - r), [t, e];\n    }, t.prototype.checkAspectRatio = function (t, e) {\n      if (!this.options.saveAspectRatio) return t;\n      var i = t.slice(),\n        a = this.parameters.box.width / this.parameters.box.height,\n        s = this.parameters.box.width + t[0],\n        r = this.parameters.box.height - t[1],\n        o = s / r;\n      return o < a ? (i[1] = s / a - this.parameters.box.height, e && (i[1] = -i[1])) : o > a && (i[0] = this.parameters.box.width - r * a, e && (i[0] = -i[0])), i;\n    }, SVG.extend(SVG.Element, {\n      resize: function (e) {\n        return (this.remember(\"_resizeHandler\") || new t(this)).init(e || {}), this;\n      }\n    }), SVG.Element.prototype.resize.defaults = {\n      snapToAngle: .1,\n      snapToGrid: 1,\n      constraint: {},\n      saveAspectRatio: !1\n    };\n  }).call(this);\n}(), void 0 === window.Apex && (window.Apex = {});\nvar qt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"initModules\",\n      value: function () {\n        this.ctx.publicMethods = [\"updateOptions\", \"updateSeries\", \"appendData\", \"appendSeries\", \"isSeriesHidden\", \"highlightSeries\", \"toggleSeries\", \"showSeries\", \"hideSeries\", \"setLocale\", \"resetSeries\", \"zoomX\", \"toggleDataPointSelection\", \"dataURI\", \"exportToCSV\", \"addXaxisAnnotation\", \"addYaxisAnnotation\", \"addPointAnnotation\", \"clearAnnotations\", \"removeAnnotation\", \"paper\", \"destroy\"], this.ctx.eventList = [\"click\", \"mousedown\", \"mousemove\", \"mouseleave\", \"touchstart\", \"touchmove\", \"touchleave\", \"mouseup\", \"touchend\"], this.ctx.animations = new y(this.ctx), this.ctx.axes = new et(this.ctx), this.ctx.core = new _t(this.ctx.el, this.ctx), this.ctx.config = new D({}), this.ctx.data = new _(this.ctx), this.ctx.grid = new Z(this.ctx), this.ctx.graphics = new k(this.ctx), this.ctx.coreUtils = new A(this.ctx), this.ctx.crosshairs = new it(this.ctx), this.ctx.events = new K(this.ctx), this.ctx.exports = new U(this.ctx), this.ctx.fill = new N(this.ctx), this.ctx.localization = new tt(this.ctx), this.ctx.options = new X(), this.ctx.responsive = new at(this.ctx), this.ctx.series = new V(this.ctx), this.ctx.theme = new st(this.ctx), this.ctx.formatters = new P(this.ctx), this.ctx.titleSubtitle = new rt(this.ctx), this.ctx.legend = new gt(this.ctx), this.ctx.toolbar = new ut(this.ctx), this.ctx.tooltip = new wt(this.ctx), this.ctx.dimensions = new ct(this.ctx), this.ctx.updateHelpers = new Ut(this.ctx), this.ctx.zoomPanSelection = new ft(this.ctx), this.ctx.w.globals.tooltip = new wt(this.ctx);\n      }\n    }]), t;\n  }(),\n  Zt = function () {\n    function t(e) {\n      i(this, t), this.ctx = e, this.w = e.w;\n    }\n    return s(t, [{\n      key: \"clear\",\n      value: function (t) {\n        var e = t.isUpdating;\n        this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({\n          isUpdating: e\n        });\n      }\n    }, {\n      key: \"killSVG\",\n      value: function (t) {\n        t.each(function () {\n          this.removeClass(\"*\"), this.off(), this.stop();\n        }, !0), t.ungroup(), t.clear();\n      }\n    }, {\n      key: \"clearDomElements\",\n      value: function (t) {\n        var e = this,\n          i = t.isUpdating,\n          a = this.w.globals.dom.Paper.node;\n        a.parentNode && a.parentNode.parentNode && !i && (a.parentNode.parentNode.style.minHeight = \"unset\");\n        var s = this.w.globals.dom.baseEl;\n        s && this.ctx.eventList.forEach(function (t) {\n          s.removeEventListener(t, e.ctx.events.documentEvent);\n        });\n        var r = this.w.globals.dom;\n        if (null !== this.ctx.el) for (; this.ctx.el.firstChild;) this.ctx.el.removeChild(this.ctx.el.firstChild);\n        this.killSVG(r.Paper), r.Paper.remove(), r.elWrap = null, r.elGraphical = null, r.elLegendWrap = null, r.elLegendForeign = null, r.baseEl = null, r.elGridRect = null, r.elGridRectMask = null, r.elGridRectBarMask = null, r.elGridRectMarkerMask = null, r.elForecastMask = null, r.elNonForecastMask = null, r.elDefs = null;\n      }\n    }]), t;\n  }(),\n  $t = new WeakMap();\nvar Jt = function () {\n  function t(e, a) {\n    i(this, t), this.opts = a, this.ctx = this, this.w = new O(a).init(), this.el = e, this.w.globals.cuid = m.randomId(), this.w.globals.chartID = this.w.config.chart.id ? m.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new qt(this).initModules(), this.create = m.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);\n  }\n  return s(t, [{\n    key: \"render\",\n    value: function () {\n      var t = this;\n      return new Promise(function (e, i) {\n        if (null !== t.el) {\n          void 0 === Apex._chartInstances && (Apex._chartInstances = []), t.w.config.chart.id && Apex._chartInstances.push({\n            id: t.w.globals.chartID,\n            group: t.w.config.chart.group,\n            chart: t\n          }), t.setLocale(t.w.config.chart.defaultLocale);\n          var a = t.w.config.chart.events.beforeMount;\n          \"function\" == typeof a && a(t, t.w), t.events.fireEvent(\"beforeMount\", [t, t.w]), window.addEventListener(\"resize\", t.windowResizeHandler), function (t, e) {\n            var i = !1;\n            if (t.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\n              var a = t.getBoundingClientRect();\n              \"none\" !== t.style.display && 0 !== a.width || (i = !0);\n            }\n            var s = new ResizeObserver(function (a) {\n              i && e.call(t, a), i = !0;\n            });\n            t.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t.children).forEach(function (t) {\n              return s.observe(t);\n            }) : s.observe(t), $t.set(e, s);\n          }(t.el.parentNode, t.parentResizeHandler);\n          var s = t.el.getRootNode && t.el.getRootNode(),\n            r = m.is(\"ShadowRoot\", s),\n            o = t.el.ownerDocument,\n            n = r ? s.getElementById(\"apexcharts-css\") : o.getElementById(\"apexcharts-css\");\n          if (!n) {\n            var l;\n            (n = document.createElement(\"style\")).id = \"apexcharts-css\", n.textContent = '@keyframes opaque {\\n  0% {\\n    opacity: 0\\n  }\\n\\n  to {\\n    opacity: 1\\n  }\\n}\\n\\n@keyframes resizeanim {\\n\\n  0%,\\n  to {\\n    opacity: 0\\n  }\\n}\\n\\n.apexcharts-canvas {\\n  position: relative;\\n  direction: ltr !important;\\n  user-select: none\\n}\\n\\n.apexcharts-canvas ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n  width: 6px\\n}\\n\\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  background-color: rgba(0, 0, 0, .5);\\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5)\\n}\\n\\n.apexcharts-inner {\\n  position: relative\\n}\\n\\n.apexcharts-text tspan {\\n  font-family: inherit\\n}\\n\\nrect.legend-mouseover-inactive,\\n.legend-mouseover-inactive rect,\\n.legend-mouseover-inactive path,\\n.legend-mouseover-inactive circle,\\n.legend-mouseover-inactive line,\\n.legend-mouseover-inactive text.apexcharts-yaxis-title-text,\\n.legend-mouseover-inactive text.apexcharts-yaxis-label {\\n  transition: .15s ease all;\\n  opacity: .2\\n}\\n\\n.apexcharts-legend-text {\\n  padding-left: 15px;\\n  margin-left: -15px;\\n}\\n\\n.apexcharts-series-collapsed {\\n  opacity: 0\\n}\\n\\n.apexcharts-tooltip {\\n  border-radius: 5px;\\n  box-shadow: 2px 2px 6px -4px #999;\\n  cursor: default;\\n  font-size: 14px;\\n  left: 62px;\\n  opacity: 0;\\n  pointer-events: none;\\n  position: absolute;\\n  top: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n  white-space: nowrap;\\n  z-index: 12;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-tooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light {\\n  border: 1px solid #e3e3e3;\\n  background: rgba(255, 255, 255, .96)\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark {\\n  color: #fff;\\n  background: rgba(30, 30, 30, .8)\\n}\\n\\n.apexcharts-tooltip * {\\n  font-family: inherit\\n}\\n\\n.apexcharts-tooltip-title {\\n  padding: 6px;\\n  font-size: 15px;\\n  margin-bottom: 4px\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\\n  background: #eceff1;\\n  border-bottom: 1px solid #ddd\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\\n  background: rgba(0, 0, 0, .7);\\n  border-bottom: 1px solid #333\\n}\\n\\n.apexcharts-tooltip-text-goals-value,\\n.apexcharts-tooltip-text-y-value,\\n.apexcharts-tooltip-text-z-value {\\n  display: inline-block;\\n  margin-left: 5px;\\n  font-weight: 600\\n}\\n\\n.apexcharts-tooltip-text-goals-label:empty,\\n.apexcharts-tooltip-text-goals-value:empty,\\n.apexcharts-tooltip-text-y-label:empty,\\n.apexcharts-tooltip-text-y-value:empty,\\n.apexcharts-tooltip-text-z-value:empty,\\n.apexcharts-tooltip-title:empty {\\n  display: none\\n}\\n\\n.apexcharts-tooltip-text-goals-label,\\n.apexcharts-tooltip-text-goals-value {\\n  padding: 6px 0 5px\\n}\\n\\n.apexcharts-tooltip-goals-group,\\n.apexcharts-tooltip-text-goals-label,\\n.apexcharts-tooltip-text-goals-value {\\n  display: flex\\n}\\n\\n.apexcharts-tooltip-text-goals-label:not(:empty),\\n.apexcharts-tooltip-text-goals-value:not(:empty) {\\n  margin-top: -6px\\n}\\n\\n.apexcharts-tooltip-marker {\\n  width: 12px;\\n  height: 12px;\\n  position: relative;\\n  top: 0;\\n  margin-right: 10px;\\n  border-radius: 50%\\n}\\n\\n.apexcharts-tooltip-series-group {\\n  padding: 0 10px;\\n  display: none;\\n  text-align: left;\\n  justify-content: left;\\n  align-items: center\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\\n  opacity: 1\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active,\\n.apexcharts-tooltip-series-group:last-child {\\n  padding-bottom: 4px\\n}\\n\\n.apexcharts-tooltip-y-group {\\n  padding: 6px 0 5px\\n}\\n\\n.apexcharts-custom-tooltip,\\n.apexcharts-tooltip-box {\\n  padding: 4px 8px\\n}\\n\\n.apexcharts-tooltip-boxPlot {\\n  display: flex;\\n  flex-direction: column-reverse\\n}\\n\\n.apexcharts-tooltip-box>div {\\n  margin: 4px 0\\n}\\n\\n.apexcharts-tooltip-box span.value {\\n  font-weight: 700\\n}\\n\\n.apexcharts-tooltip-rangebar {\\n  padding: 5px 8px\\n}\\n\\n.apexcharts-tooltip-rangebar .category {\\n  font-weight: 600;\\n  color: #777\\n}\\n\\n.apexcharts-tooltip-rangebar .series-name {\\n  font-weight: 700;\\n  display: block;\\n  margin-bottom: 5px\\n}\\n\\n.apexcharts-xaxistooltip,\\n.apexcharts-yaxistooltip {\\n  opacity: 0;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n  background: #eceff1;\\n  border: 1px solid #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip {\\n  padding: 9px 10px;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0, 0, 0, .7);\\n  border: 1px solid rgba(0, 0, 0, .5);\\n  color: #fff\\n}\\n\\n.apexcharts-xaxistooltip:after,\\n.apexcharts-xaxistooltip:before {\\n  left: 50%;\\n  border: solid transparent;\\n  content: \" \";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none\\n}\\n\\n.apexcharts-xaxistooltip:after {\\n  border-color: transparent;\\n  border-width: 6px;\\n  margin-left: -6px\\n}\\n\\n.apexcharts-xaxistooltip:before {\\n  border-color: transparent;\\n  border-width: 7px;\\n  margin-left: -7px\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after,\\n.apexcharts-xaxistooltip-bottom:before {\\n  bottom: 100%\\n}\\n\\n.apexcharts-xaxistooltip-top:after,\\n.apexcharts-xaxistooltip-top:before {\\n  top: 100%\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after {\\n  border-bottom-color: #eceff1\\n}\\n\\n.apexcharts-xaxistooltip-bottom:before {\\n  border-bottom-color: #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\\n  border-bottom-color: rgba(0, 0, 0, .5)\\n}\\n\\n.apexcharts-xaxistooltip-top:after {\\n  border-top-color: #eceff1\\n}\\n\\n.apexcharts-xaxistooltip-top:before {\\n  border-top-color: #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\\n  border-top-color: rgba(0, 0, 0, .5)\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-yaxistooltip {\\n  padding: 4px 10px\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0, 0, 0, .7);\\n  border: 1px solid rgba(0, 0, 0, .5);\\n  color: #fff\\n}\\n\\n.apexcharts-yaxistooltip:after,\\n.apexcharts-yaxistooltip:before {\\n  top: 50%;\\n  border: solid transparent;\\n  content: \" \";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none\\n}\\n\\n.apexcharts-yaxistooltip:after {\\n  border-color: transparent;\\n  border-width: 6px;\\n  margin-top: -6px\\n}\\n\\n.apexcharts-yaxistooltip:before {\\n  border-color: transparent;\\n  border-width: 7px;\\n  margin-top: -7px\\n}\\n\\n.apexcharts-yaxistooltip-left:after,\\n.apexcharts-yaxistooltip-left:before {\\n  left: 100%\\n}\\n\\n.apexcharts-yaxistooltip-right:after,\\n.apexcharts-yaxistooltip-right:before {\\n  right: 100%\\n}\\n\\n.apexcharts-yaxistooltip-left:after {\\n  border-left-color: #eceff1\\n}\\n\\n.apexcharts-yaxistooltip-left:before {\\n  border-left-color: #90a4ae\\n}\\n\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\\n  border-left-color: rgba(0, 0, 0, .5)\\n}\\n\\n.apexcharts-yaxistooltip-right:after {\\n  border-right-color: #eceff1\\n}\\n\\n.apexcharts-yaxistooltip-right:before {\\n  border-right-color: #90a4ae\\n}\\n\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\\n  border-right-color: rgba(0, 0, 0, .5)\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-active {\\n  opacity: 1\\n}\\n\\n.apexcharts-yaxistooltip-hidden {\\n  display: none\\n}\\n\\n.apexcharts-xcrosshairs,\\n.apexcharts-ycrosshairs {\\n  pointer-events: none;\\n  opacity: 0;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-xcrosshairs.apexcharts-active,\\n.apexcharts-ycrosshairs.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-ycrosshairs-hidden {\\n  opacity: 0\\n}\\n\\n.apexcharts-selection-rect {\\n  cursor: move\\n}\\n\\n.svg_select_boundingRect,\\n.svg_select_points_rot {\\n  pointer-events: none;\\n  opacity: 0;\\n  visibility: hidden\\n}\\n\\n.apexcharts-selection-rect+g .svg_select_boundingRect,\\n.apexcharts-selection-rect+g .svg_select_points_rot {\\n  opacity: 0;\\n  visibility: hidden\\n}\\n\\n.apexcharts-selection-rect+g .svg_select_points_l,\\n.apexcharts-selection-rect+g .svg_select_points_r {\\n  cursor: ew-resize;\\n  opacity: 1;\\n  visibility: visible\\n}\\n\\n.svg_select_points {\\n  fill: #efefef;\\n  stroke: #333;\\n  rx: 2\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\\n  cursor: crosshair\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\\n  cursor: move\\n}\\n\\n.apexcharts-menu-icon,\\n.apexcharts-pan-icon,\\n.apexcharts-reset-icon,\\n.apexcharts-selection-icon,\\n.apexcharts-toolbar-custom-icon,\\n.apexcharts-zoom-icon,\\n.apexcharts-zoomin-icon,\\n.apexcharts-zoomout-icon {\\n  cursor: pointer;\\n  width: 20px;\\n  height: 20px;\\n  line-height: 24px;\\n  color: #6e8192;\\n  text-align: center\\n}\\n\\n.apexcharts-menu-icon svg,\\n.apexcharts-reset-icon svg,\\n.apexcharts-zoom-icon svg,\\n.apexcharts-zoomin-icon svg,\\n.apexcharts-zoomout-icon svg {\\n  fill: #6e8192\\n}\\n\\n.apexcharts-selection-icon svg {\\n  fill: #444;\\n  transform: scale(.76)\\n}\\n\\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\\n  fill: #f3f4f5\\n}\\n\\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,\\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\\n  fill: #008ffb\\n}\\n\\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\\n  fill: #333\\n}\\n\\n.apexcharts-menu-icon,\\n.apexcharts-selection-icon {\\n  position: relative\\n}\\n\\n.apexcharts-reset-icon {\\n  margin-left: 5px\\n}\\n\\n.apexcharts-menu-icon,\\n.apexcharts-reset-icon,\\n.apexcharts-zoom-icon {\\n  transform: scale(.85)\\n}\\n\\n.apexcharts-zoomin-icon,\\n.apexcharts-zoomout-icon {\\n  transform: scale(.7)\\n}\\n\\n.apexcharts-zoomout-icon {\\n  margin-right: 3px\\n}\\n\\n.apexcharts-pan-icon {\\n  transform: scale(.62);\\n  position: relative;\\n  left: 1px;\\n  top: 0\\n}\\n\\n.apexcharts-pan-icon svg {\\n  fill: #fff;\\n  stroke: #6e8192;\\n  stroke-width: 2\\n}\\n\\n.apexcharts-pan-icon.apexcharts-selected svg {\\n  stroke: #008ffb\\n}\\n\\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\\n  stroke: #333\\n}\\n\\n.apexcharts-toolbar {\\n  position: absolute;\\n  z-index: 11;\\n  max-width: 176px;\\n  text-align: right;\\n  border-radius: 3px;\\n  padding: 0 6px 2px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center\\n}\\n\\n.apexcharts-menu {\\n  background: #fff;\\n  position: absolute;\\n  top: 100%;\\n  border: 1px solid #ddd;\\n  border-radius: 3px;\\n  padding: 3px;\\n  right: 10px;\\n  opacity: 0;\\n  min-width: 110px;\\n  transition: .15s ease all;\\n  pointer-events: none\\n}\\n\\n.apexcharts-menu.apexcharts-menu-open {\\n  opacity: 1;\\n  pointer-events: all;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-menu-item {\\n  padding: 6px 7px;\\n  font-size: 12px;\\n  cursor: pointer\\n}\\n\\n.apexcharts-theme-light .apexcharts-menu-item:hover {\\n  background: #eee\\n}\\n\\n.apexcharts-theme-dark .apexcharts-menu {\\n  background: rgba(0, 0, 0, .7);\\n  color: #fff\\n}\\n\\n@media screen and (min-width:768px) {\\n  .apexcharts-canvas:hover .apexcharts-toolbar {\\n    opacity: 1\\n  }\\n}\\n\\n.apexcharts-canvas .apexcharts-element-hidden,\\n.apexcharts-datalabel.apexcharts-element-hidden,\\n.apexcharts-hide .apexcharts-series-points {\\n  opacity: 0;\\n}\\n\\n.apexcharts-hidden-element-shown {\\n  opacity: 1;\\n  transition: 0.25s ease all;\\n}\\n\\n.apexcharts-datalabel,\\n.apexcharts-datalabel-label,\\n.apexcharts-datalabel-value,\\n.apexcharts-datalabels,\\n.apexcharts-pie-label {\\n  cursor: default;\\n  pointer-events: none\\n}\\n\\n.apexcharts-pie-label-delay {\\n  opacity: 0;\\n  animation-name: opaque;\\n  animation-duration: .3s;\\n  animation-fill-mode: forwards;\\n  animation-timing-function: ease\\n}\\n\\n.apexcharts-radialbar-label {\\n  cursor: pointer;\\n}\\n\\n.apexcharts-annotation-rect,\\n.apexcharts-area-series .apexcharts-area,\\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\\n.apexcharts-gridline,\\n.apexcharts-line,\\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\\n.apexcharts-point-annotation-label,\\n.apexcharts-radar-series path:not(.apexcharts-marker),\\n.apexcharts-radar-series polygon,\\n.apexcharts-toolbar svg,\\n.apexcharts-tooltip .apexcharts-marker,\\n.apexcharts-xaxis-annotation-label,\\n.apexcharts-yaxis-annotation-label,\\n.apexcharts-zoom-rect {\\n  pointer-events: none\\n}\\n\\n.apexcharts-tooltip-active .apexcharts-marker {\\n  transition: .15s ease all\\n}\\n\\n.resize-triggers {\\n  animation: 1ms resizeanim;\\n  visibility: hidden;\\n  opacity: 0;\\n  height: 100%;\\n  width: 100%;\\n  overflow: hidden\\n}\\n\\n.contract-trigger:before,\\n.resize-triggers,\\n.resize-triggers>div {\\n  content: \" \";\\n  display: block;\\n  position: absolute;\\n  top: 0;\\n  left: 0\\n}\\n\\n.resize-triggers>div {\\n  height: 100%;\\n  width: 100%;\\n  background: #eee;\\n  overflow: auto\\n}\\n\\n.contract-trigger:before {\\n  overflow: hidden;\\n  width: 200%;\\n  height: 200%\\n}\\n\\n.apexcharts-bar-goals-markers {\\n  pointer-events: none\\n}\\n\\n.apexcharts-bar-shadows {\\n  pointer-events: none\\n}\\n\\n.apexcharts-rangebar-goals-markers {\\n  pointer-events: none\\n}\\n';\n            var h = (null === (l = t.opts.chart) || void 0 === l ? void 0 : l.nonce) || t.w.config.chart.nonce;\n            h && n.setAttribute(\"nonce\", h), r ? s.prepend(n) : o.head.appendChild(n);\n          }\n          var c = t.create(t.w.config.series, {});\n          if (!c) return e(t);\n          t.mount(c).then(function () {\n            \"function\" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.events.fireEvent(\"mounted\", [t, t.w]), e(c);\n          }).catch(function (t) {\n            i(t);\n          });\n        } else i(new Error(\"Element not found\"));\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function (t, e) {\n      var i = this,\n        a = this.w;\n      new qt(this).initModules();\n      var s = this.w.globals;\n      (s.noData = !1, s.animationEnded = !1, this.responsive.checkResponsiveConfig(e), a.config.xaxis.convertedCatToNumeric) && new F(a.config).convertCatToNumericXaxis(a.config, this.ctx);\n      if (null === this.el) return s.animationEnded = !0, null;\n      if (this.core.setupElements(), \"treemap\" === a.config.chart.type && (a.config.grid.show = !1, a.config.yaxis[0].show = !1), 0 === s.svgWidth) return s.animationEnded = !0, null;\n      var r = t;\n      t.forEach(function (t, e) {\n        t.hidden && (r = i.legend.legendHelpers.getSeriesAfterCollapsing({\n          realIndex: e\n        }));\n      });\n      var o = A.checkComboSeries(r, a.config.chart.type);\n      s.comboCharts = o.comboCharts, s.comboBarCount = o.comboBarCount;\n      var n = r.every(function (t) {\n        return t.data && 0 === t.data.length;\n      });\n      (0 === r.length || n && s.collapsedSeries.length < 1) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(r), this.theme.init(), new W(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), s.noData && s.collapsedSeries.length !== s.series.length && !a.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), s.axisCharts && (this.core.coreCalculations(), \"category\" !== a.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = a.globals.minX, this.ctx.toolbar.maxX = a.globals.maxX), this.formatters.heatmapLabelFormatters(), new A(this).getLargestMarkerSize(), this.dimensions.plotCoords();\n      var l = this.core.xySettings();\n      this.grid.createGridMask();\n      var h = this.core.plotChartType(r, l),\n        c = new G(this);\n      return c.bringForward(), a.config.dataLabels.background.enabled && c.dataLabelsBackground(), this.core.shiftGraphPosition(), {\n        elGraph: h,\n        xyRatios: l,\n        dimensions: {\n          plot: {\n            left: a.globals.translateX,\n            top: a.globals.translateY,\n            width: a.globals.gridWidth,\n            height: a.globals.gridHeight\n          }\n        }\n      };\n    }\n  }, {\n    key: \"mount\",\n    value: function () {\n      var t = this,\n        e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n        i = this,\n        a = i.w;\n      return new Promise(function (s, r) {\n        if (null === i.el) return r(new Error(\"Not enough data to display or target element not found\"));\n        (null === e || a.globals.allSeriesCollapsed) && i.series.handleNoData(), i.grid = new Z(i);\n        var o,\n          n,\n          l = i.grid.drawGrid();\n        (i.annotations = new E(i), i.annotations.drawImageAnnos(), i.annotations.drawTextAnnos(), \"back\" === a.config.grid.position) && (l && a.globals.dom.elGraphical.add(l.el), null != l && null !== (o = l.elGridBorders) && void 0 !== o && o.node && a.globals.dom.elGraphical.add(l.elGridBorders));\n        if (Array.isArray(e.elGraph)) for (var h = 0; h < e.elGraph.length; h++) a.globals.dom.elGraphical.add(e.elGraph[h]);else a.globals.dom.elGraphical.add(e.elGraph);\n        \"front\" === a.config.grid.position && (l && a.globals.dom.elGraphical.add(l.el), null != l && null !== (n = l.elGridBorders) && void 0 !== n && n.node && a.globals.dom.elGraphical.add(l.elGridBorders));\n        \"front\" === a.config.xaxis.crosshairs.position && i.crosshairs.drawXCrosshairs(), \"front\" === a.config.yaxis[0].crosshairs.position && i.crosshairs.drawYCrosshairs(), \"treemap\" !== a.config.chart.type && i.axes.drawAxis(a.config.chart.type, l);\n        var c = new q(t.ctx, l),\n          d = new Q(t.ctx, l);\n        if (null !== l && (c.xAxisLabelCorrections(l.xAxisTickWidth), d.setYAxisTextAlignments(), a.config.yaxis.map(function (t, e) {\n          -1 === a.globals.ignoreYAxisIndexes.indexOf(e) && d.yAxisTitleRotate(e, t.opposite);\n        })), i.annotations.drawAxesAnnotations(), !a.globals.noData) {\n          if (a.config.tooltip.enabled && !a.globals.noData && i.w.globals.tooltip.drawTooltip(e.xyRatios), a.globals.axisCharts && (a.globals.isXNumeric || a.config.xaxis.convertedCatToNumeric || a.globals.isRangeBar)) (a.config.chart.zoom.enabled || a.config.chart.selection && a.config.chart.selection.enabled || a.config.chart.pan && a.config.chart.pan.enabled) && i.zoomPanSelection.init({\n            xyRatios: e.xyRatios\n          });else {\n            var g = a.config.chart.toolbar.tools;\n            [\"zoom\", \"zoomin\", \"zoomout\", \"selection\", \"pan\", \"reset\"].forEach(function (t) {\n              g[t] = !1;\n            });\n          }\n          a.config.chart.toolbar.show && !a.globals.allSeriesCollapsed && i.toolbar.createToolbar();\n        }\n        a.globals.memory.methodsToExec.length > 0 && a.globals.memory.methodsToExec.forEach(function (t) {\n          t.method(t.params, !1, t.context);\n        }), a.globals.axisCharts || a.globals.noData || i.core.resizeNonAxisCharts(), s(i);\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var t, e;\n      window.removeEventListener(\"resize\", this.windowResizeHandler), this.el.parentNode, t = this.parentResizeHandler, (e = $t.get(t)) && (e.disconnect(), $t.delete(t));\n      var i = this.w.config.chart.id;\n      i && Apex._chartInstances.forEach(function (t, e) {\n        t.id === m.escapeString(i) && Apex._chartInstances.splice(e, 1);\n      }), new Zt(this.ctx).clear({\n        isUpdating: !1\n      });\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function (t) {\n      var e = this,\n        i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n        a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n        s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],\n        r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],\n        o = this.w;\n      return o.globals.selection = void 0, t.series && (this.series.resetSeries(!1, !0, !1), t.series.length && t.series[0].data && (t.series = t.series.map(function (t, i) {\n        return e.updateHelpers._extendSeries(t, i);\n      })), this.updateHelpers.revertDefaultAxisMinMax()), t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)), t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)), o.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t.theme && (t = this.theme.updateThemeOptions(t)), this.updateHelpers._updateOptions(t, i, a, s, r);\n    }\n  }, {\n    key: \"updateSeries\",\n    value: function () {\n      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n        e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n        i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n      return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t, e, i);\n    }\n  }, {\n    key: \"appendSeries\",\n    value: function (t) {\n      var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n        i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n        a = this.w.config.series.slice();\n      return a.push(t), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a, e, i);\n    }\n  }, {\n    key: \"appendData\",\n    value: function (t) {\n      var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n        i = this;\n      i.w.globals.dataChanged = !0, i.series.getPreviousPaths();\n      for (var a = i.w.config.series.slice(), s = 0; s < a.length; s++) if (null !== t[s] && void 0 !== t[s]) for (var r = 0; r < t[s].data.length; r++) a[s].data.push(t[s].data[r]);\n      return i.w.config.series = a, e && (i.w.globals.initialSeries = m.clone(i.w.config.series)), this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function (t) {\n      var e = this;\n      return new Promise(function (i, a) {\n        new Zt(e.ctx).clear({\n          isUpdating: !0\n        });\n        var s = e.create(e.w.config.series, t);\n        if (!s) return i(e);\n        e.mount(s).then(function () {\n          \"function\" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.events.fireEvent(\"updated\", [e, e.w]), e.w.globals.isDirty = !0, i(e);\n        }).catch(function (t) {\n          a(t);\n        });\n      });\n    }\n  }, {\n    key: \"getSyncedCharts\",\n    value: function () {\n      var t = this.getGroupedCharts(),\n        e = [this];\n      return t.length && (e = [], t.forEach(function (t) {\n        e.push(t);\n      })), e;\n    }\n  }, {\n    key: \"getGroupedCharts\",\n    value: function () {\n      var t = this;\n      return Apex._chartInstances.filter(function (t) {\n        if (t.group) return !0;\n      }).map(function (e) {\n        return t.w.config.chart.group === e.group ? e.chart : t;\n      });\n    }\n  }, {\n    key: \"toggleSeries\",\n    value: function (t) {\n      return this.series.toggleSeries(t);\n    }\n  }, {\n    key: \"highlightSeriesOnLegendHover\",\n    value: function (t, e) {\n      return this.series.toggleSeriesOnHover(t, e);\n    }\n  }, {\n    key: \"showSeries\",\n    value: function (t) {\n      this.series.showSeries(t);\n    }\n  }, {\n    key: \"hideSeries\",\n    value: function (t) {\n      this.series.hideSeries(t);\n    }\n  }, {\n    key: \"highlightSeries\",\n    value: function (t) {\n      this.series.highlightSeries(t);\n    }\n  }, {\n    key: \"isSeriesHidden\",\n    value: function (t) {\n      this.series.isSeriesHidden(t);\n    }\n  }, {\n    key: \"resetSeries\",\n    value: function () {\n      var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],\n        e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n      this.series.resetSeries(t, e);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function (t, e) {\n      this.events.addEventListener(t, e);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function (t, e) {\n      this.events.removeEventListener(t, e);\n    }\n  }, {\n    key: \"addXaxisAnnotation\",\n    value: function (t) {\n      var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n        i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n        a = this;\n      i && (a = i), a.annotations.addXaxisAnnotationExternal(t, e, a);\n    }\n  }, {\n    key: \"addYaxisAnnotation\",\n    value: function (t) {\n      var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n        i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n        a = this;\n      i && (a = i), a.annotations.addYaxisAnnotationExternal(t, e, a);\n    }\n  }, {\n    key: \"addPointAnnotation\",\n    value: function (t) {\n      var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n        i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n        a = this;\n      i && (a = i), a.annotations.addPointAnnotationExternal(t, e, a);\n    }\n  }, {\n    key: \"clearAnnotations\",\n    value: function () {\n      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0,\n        e = this;\n      t && (e = t), e.annotations.clearAnnotations(e);\n    }\n  }, {\n    key: \"removeAnnotation\",\n    value: function (t) {\n      var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0,\n        i = this;\n      e && (i = e), i.annotations.removeAnnotation(i, t);\n    }\n  }, {\n    key: \"getChartArea\",\n    value: function () {\n      return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner\");\n    }\n  }, {\n    key: \"getSeriesTotalXRange\",\n    value: function (t, e) {\n      return this.coreUtils.getSeriesTotalsXRange(t, e);\n    }\n  }, {\n    key: \"getHighestValueInSeries\",\n    value: function () {\n      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n      return new J(this.ctx).getMinYMaxY(t).highestY;\n    }\n  }, {\n    key: \"getLowestValueInSeries\",\n    value: function () {\n      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n      return new J(this.ctx).getMinYMaxY(t).lowestY;\n    }\n  }, {\n    key: \"getSeriesTotal\",\n    value: function () {\n      return this.w.globals.seriesTotals;\n    }\n  }, {\n    key: \"toggleDataPointSelection\",\n    value: function (t, e) {\n      return this.updateHelpers.toggleDataPointSelection(t, e);\n    }\n  }, {\n    key: \"zoomX\",\n    value: function (t, e) {\n      this.ctx.toolbar.zoomUpdateOptions(t, e);\n    }\n  }, {\n    key: \"setLocale\",\n    value: function (t) {\n      this.localization.setCurrentLocaleValues(t);\n    }\n  }, {\n    key: \"dataURI\",\n    value: function (t) {\n      return new U(this.ctx).dataURI(t);\n    }\n  }, {\n    key: \"exportToCSV\",\n    value: function () {\n      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n      return new U(this.ctx).exportToCSV(t);\n    }\n  }, {\n    key: \"paper\",\n    value: function () {\n      return this.w.globals.dom.Paper;\n    }\n  }, {\n    key: \"_parentResizeCallback\",\n    value: function () {\n      this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();\n    }\n  }, {\n    key: \"_windowResize\",\n    value: function () {\n      var t = this;\n      clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function () {\n        t.w.globals.resized = !0, t.w.globals.dataChanged = !1, t.ctx.update();\n      }, 150);\n    }\n  }, {\n    key: \"_windowResizeHandler\",\n    value: function () {\n      var t = this.w.config.chart.redrawOnWindowResize;\n      \"function\" == typeof t && (t = t()), t && this._windowResize();\n    }\n  }], [{\n    key: \"getChartByID\",\n    value: function (t) {\n      var e = m.escapeString(t);\n      if (Apex._chartInstances) {\n        var i = Apex._chartInstances.filter(function (t) {\n          return t.id === e;\n        })[0];\n        return i && i.chart;\n      }\n    }\n  }, {\n    key: \"initOnLoad\",\n    value: function () {\n      for (var e = document.querySelectorAll(\"[data-apexcharts]\"), i = 0; i < e.length; i++) {\n        new t(e[i], JSON.parse(e[i].getAttribute(\"data-options\"))).render();\n      }\n    }\n  }, {\n    key: \"exec\",\n    value: function (t, e) {\n      var i = this.getChartByID(t);\n      if (i) {\n        i.w.globals.isExecCalled = !0;\n        var a = null;\n        if (-1 !== i.publicMethods.indexOf(e)) {\n          for (var s = arguments.length, r = new Array(s > 2 ? s - 2 : 0), o = 2; o < s; o++) r[o - 2] = arguments[o];\n          a = i[e].apply(i, r);\n        }\n        return a;\n      }\n    }\n  }, {\n    key: \"merge\",\n    value: function (t, e) {\n      return m.extend(t, e);\n    }\n  }]), t;\n}();\nmodule.exports = Jt;","map":null,"metadata":{},"sourceType":"script"}