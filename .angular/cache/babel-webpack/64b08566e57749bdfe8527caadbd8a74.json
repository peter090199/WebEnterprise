{"ast":null,"code":"import { ENTER, COMMA } from '@angular/cdk/keycodes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/card\";\nimport * as i2 from \"@angular/material/chips\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/icon\";\nfunction ChipsComponent_mat_chip_29_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 12);\n    i0.ɵɵtext(1, \"cancel\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChipsComponent_mat_chip_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 10);\n    i0.ɵɵlistener(\"removed\", function ChipsComponent_mat_chip_29_Template_mat_chip_removed_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const fruit_r3 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.remove(fruit_r3);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ChipsComponent_mat_chip_29_mat_icon_2_Template, 2, 0, \"mat-icon\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const fruit_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectable\", ctx_r1.selectable)(\"removable\", ctx_r1.removable);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", fruit_r3.name, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.removable);\n  }\n}\nfunction ChipsComponent_mat_chip_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-chip\", 13);\n    i0.ɵɵlistener(\"focus\", function ChipsComponent_mat_chip_41_Template_mat_chip_focus_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const aColor_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.color = aColor_r7.color;\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const aColor_r7 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"color\", aColor_r7.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", aColor_r7.name, \" \");\n  }\n}\nexport let ChipsComponent = /*#__PURE__*/(() => {\n  class ChipsComponent {\n    constructor() {\n      this.visible = true;\n      this.selectable = true;\n      this.removable = true;\n      this.addOnBlur = true;\n      this.availableColors = [{\n        name: 'none',\n        color: 'gray'\n      }, {\n        name: 'Primary',\n        color: 'primary'\n      }, {\n        name: 'Accent',\n        color: 'accent'\n      }, {\n        name: 'Warn',\n        color: 'warn'\n      }];\n      // Enter, comma\n      this.separatorKeysCodes = [ENTER, COMMA];\n      this.fruits = [{\n        name: 'Lemon'\n      }, {\n        name: 'Lime'\n      }, {\n        name: 'Apple'\n      }];\n    }\n    add(event) {\n      const input = event.input;\n      const value = event.value;\n      // Add our fruit\n      if ((value || '').trim()) {\n        this.fruits.push({\n          name: value.trim()\n        });\n      }\n      // Reset the input value\n      if (input) {\n        input.value = '';\n      }\n    }\n    remove(fruit) {\n      const index = this.fruits.indexOf(fruit);\n      if (index >= 0) {\n        this.fruits.splice(index, 1);\n      }\n    }\n  }\n  ChipsComponent.ɵfac = function ChipsComponent_Factory(t) {\n    return new (t || ChipsComponent)();\n  };\n  ChipsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChipsComponent,\n    selectors: [[\"app-chips\"]],\n    decls: 42,\n    vars: 5,\n    consts: [[1, \"\"], [\"href\", \"https://material.angular.io/components/chips/overview\"], [\"color\", \"primary\", \"selected\", \"true\"], [\"color\", \"accent\", \"selected\", \"true\"], [1, \"demo-chip-list\"], [\"chipList\", \"\"], [3, \"selectable\", \"removable\", \"removed\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"New fruit...\", 3, \"matChipInputFor\", \"matChipInputSeparatorKeyCodes\", \"matChipInputAddOnBlur\", \"matChipInputTokenEnd\"], [1, \"mat-chip-list-stacked\"], [\"selected\", \"true\", 3, \"color\", \"focus\", 4, \"ngFor\", \"ngForOf\"], [3, \"selectable\", \"removable\", \"removed\"], [\"matChipRemove\", \"\", 4, \"ngIf\"], [\"matChipRemove\", \"\"], [\"selected\", \"true\", 3, \"color\", \"focus\"]],\n    template: function ChipsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵelementStart(1, \"mat-card-content\");\n        i0.ɵɵelementStart(2, \"mat-card-title\");\n        i0.ɵɵtext(3, \"Basic Chips\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-card-subtitle\");\n        i0.ɵɵelementStart(5, \"code\");\n        i0.ɵɵtext(6, \"<mat-chip>\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(7, \"displays a list of values as individual, keyboard accessible, chips. \");\n        i0.ɵɵelementStart(8, \"code\", 0);\n        i0.ɵɵelementStart(9, \"a\", 1);\n        i0.ɵɵtext(10, \"Official Component\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-chip-list\");\n        i0.ɵɵelementStart(12, \"mat-chip\");\n        i0.ɵɵtext(13, \"One fish\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-chip\");\n        i0.ɵɵtext(15, \"Two fish\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"mat-chip\", 2);\n        i0.ɵɵtext(17, \"Primary fish\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"mat-chip\", 3);\n        i0.ɵɵtext(19, \"Accent fish\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-card\");\n        i0.ɵɵelementStart(21, \"mat-card-content\");\n        i0.ɵɵelementStart(22, \"mat-card-title\");\n        i0.ɵɵtext(23, \"Chip input\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-card-subtitle\");\n        i0.ɵɵtext(25, \"The MatChipInput directive can be used together with a chip-list to streamline the interaction between the two components. This directive adds chip-specific behaviors to the input element within for adding and removing chips. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"mat-form-field\", 4);\n        i0.ɵɵelementStart(27, \"mat-chip-list\", null, 5);\n        i0.ɵɵtemplate(29, ChipsComponent_mat_chip_29_Template, 3, 4, \"mat-chip\", 6);\n        i0.ɵɵelementStart(30, \"input\", 7);\n        i0.ɵɵlistener(\"matChipInputTokenEnd\", function ChipsComponent_Template_input_matChipInputTokenEnd_30_listener($event) {\n          return ctx.add($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"mat-card\");\n        i0.ɵɵelementStart(32, \"mat-card-content\");\n        i0.ɵɵelementStart(33, \"mat-card-title\");\n        i0.ɵɵtext(34, \"Stacked Chips\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"mat-card-subtitle\");\n        i0.ɵɵtext(36, \"You can also stack the chips if you want them on top of each other and/or use the \");\n        i0.ɵɵelementStart(37, \"code\");\n        i0.ɵɵtext(38, \"(focus)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(39, \" event to run custom code.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"mat-chip-list\", 8);\n        i0.ɵɵtemplate(41, ChipsComponent_mat_chip_41_Template, 2, 2, \"mat-chip\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(28);\n        i0.ɵɵadvance(29);\n        i0.ɵɵproperty(\"ngForOf\", ctx.fruits);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matChipInputFor\", _r0)(\"matChipInputSeparatorKeyCodes\", ctx.separatorKeysCodes)(\"matChipInputAddOnBlur\", ctx.addOnBlur);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngForOf\", ctx.availableColors);\n      }\n    },\n    directives: [i1.MatCard, i1.MatCardContent, i1.MatCardTitle, i1.MatCardSubtitle, i2.MatChipList, i2.MatChip, i3.MatFormField, i4.NgForOf, i2.MatChipInput, i4.NgIf, i5.MatIcon, i2.MatChipRemove],\n    styles: [\".demo-chip-list[_ngcontent-%COMP%]{width:100%}\"]\n  });\n  return ChipsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}