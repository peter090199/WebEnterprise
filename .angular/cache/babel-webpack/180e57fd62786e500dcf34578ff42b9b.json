{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Validators } from '@angular/forms';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Services/Menu/menu.service\";\nimport * as i3 from \"src/app/Services/Global/notifications.service\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/dialog\";\nimport * as i7 from \"@angular/material/divider\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"@angular/material/icon\";\nimport * as i14 from \"@angular/material/core\";\nconst _c0 = [\"imageInput\"];\nfunction ModuleTaskUIComponent_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r5.module);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r5.module, \" \");\n  }\n}\nfunction ModuleTaskUIComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function ModuleTaskUIComponent_div_27_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const i_r7 = restoredCtx.index;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.removePrice(i_r7);\n    });\n    i0.ɵɵelementStart(4, \"mat-icon\");\n    i0.ɵɵtext(5, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const priceCtrl_r6 = ctx.$implicit;\n    const i_r7 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Price \", i_r7 + 1, \": \", priceCtrl_r6.value, \"\");\n  }\n}\nfunction ModuleTaskUIComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const descImage_r10 = ctx.$implicit;\n    const i_r11 = ctx.index;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Description Image \", i_r11 + 1, \": \", descImage_r10, \"\");\n  }\n}\nexport let ModuleTaskUIComponent = /*#__PURE__*/(() => {\n  class ModuleTaskUIComponent {\n    constructor(fb, menuServices, alert, http) {\n      this.fb = fb;\n      this.menuServices = menuServices;\n      this.alert = alert;\n      this.http = http;\n      this.btnSave = \"Save\";\n      this.modules = [];\n      this.selectedImages = []; // Store selected image files\n      this.uploadedImages = []; // Store uploaded image URLs\n      this.isModuleSelected = false; // Flag to hide combo box after selection\n      this.menuForm = this.fb.group({\n        module: ['', Validators.required],\n        description: ['', Validators.required],\n        price: this.fb.array([]),\n        // image: this.fb.array([]), // Using an array for images\n        desc_images: this.fb.array([]) // Using an array for description images\n        //  images: [null, Validators.required] \n      });\n    }\n    // Add price to the FormArray\n    addPrice(price) {\n      // Convert price to number and add it to the FormArray\n      const parsedPrice = parseFloat(price);\n      if (!isNaN(parsedPrice) && parsedPrice > 0) {\n        this.price.push(this.fb.control(parsedPrice)); // Add price control to FormArray\n      }\n    }\n    get image() {\n      return this.menuForm.get('image');\n    }\n    get price() {\n      return this.menuForm.get('price');\n    }\n    onImageSelected(event) {\n      const files = event.target.files;\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        // Convert image to Base64\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => {\n          this.image.push(this.fb.control(reader.result)); // Store Base64\n        };\n      }\n    }\n    // onFileSelected(event: any): void {\n    //   this.selectedImages = Array.from(event.target.files);\n    // }\n    removeImage(index) {\n      this.image.removeAt(index);\n    }\n    removePrice(index) {\n      this.price.removeAt(index);\n    }\n    ngOnInit() {\n      this.getWebsiteMenu();\n    }\n    getWebsiteMenu() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const res = yield firstValueFrom(this.menuServices.getWebsiteMenu());\n          if (res && res.data) {\n            // Assuming 'data' is the key for the actual data in the response\n            this.modules = res.data;\n          } else {\n            //  this.notificationsService.toastrWarning(\"No data found\");\n          }\n        } catch (error) {\n          //   this.notificationsService.toastrError(error);\n        } finally {\n          // Ensure that loading is false even if there is an error\n          //   this.isLoading = false;\n        }\n      });\n    }\n    // Add image URL to the form\n    addImage(image) {\n      var _a;\n      (_a = this.menuForm.get('image')) === null || _a === void 0 ? void 0 : _a.value.push(image);\n    }\n    // Add description image to the form\n    // addDescImage(descImage: string) {\n    //   this.menuForm.get('descImages')?.value.push(descImage);\n    // }\n    get desc_images() {\n      return this.menuForm.get('desc_images');\n    }\n    addDescImage(descImage) {\n      if (descImage && descImage.trim() !== '') {\n        this.desc_images.push(this.fb.control(descImage)); // Use fb.control to add form control to FormArray\n      }\n    }\n    onSubmitxx() {\n      var _a, _b, _c;\n      // Create a FormData object to handle file uploads\n      const formData = new FormData();\n      // Add other form fields to the FormData\n      formData.append('module', (_a = this.menuForm.get('module')) === null || _a === void 0 ? void 0 : _a.value);\n      formData.append('description', (_b = this.menuForm.get('description')) === null || _b === void 0 ? void 0 : _b.value);\n      formData.append('price', JSON.stringify(this.price.value)); // Array of prices as string\n      formData.append('desc_images', JSON.stringify((_c = this.menuForm.get('descImages')) === null || _c === void 0 ? void 0 : _c.value)); // Array of descriptions\n      const imageInput = this.imageInput.nativeElement; // Reference to the file input element\n      // Add the filenames of selected images to FormData\n      const imageFilenames = []; // Array to store filenames\n      for (let i = 0; i < imageInput.files.length; i++) {\n        const file = imageInput.files[i];\n        formData.append('image[]', file, file.name); // Append file to FormData with its filename\n        imageFilenames.push(file.name); // Add the filename to the array\n      }\n      // Add the array of filenames to the FormData\n      formData.append('image_filenames', JSON.stringify(imageFilenames));\n      // Log the FormData content manually\n      formData.forEach((value, key) => {\n        console.log(`${key}:`, value);\n      });\n      this.menuServices.submitMenu(formData).subscribe(res => {\n        console.log('Form submitted successfully:', res);\n        if (res.success) {\n          console.log(res.message); // e.g., Show success message\n        }\n      }, error => {\n        console.error('Error submitting form:', error);\n      });\n    }\n    onSubmitxxx() {\n      if (this.menuForm.valid) {\n        const formData = new FormData();\n        // Append form values\n        formData.append('module', this.menuForm.value.module);\n        formData.append('description', this.menuForm.value.description);\n        // Append prices\n        this.menuForm.value.price.forEach((price, index) => {\n          formData.append(`price[${index}]`, price);\n        });\n        // Append description images\n        this.menuForm.value.desc_images.forEach((descImage, index) => {\n          formData.append(`desc_images[${index}]`, descImage);\n        });\n        // Append images\n        this.selectedImages.forEach((file, index) => {\n          formData.append(`images[${index}]`, file);\n        });\n        // Upload data to Laravel API\n        this.http.post('http://127.0.0.1:8000/api/upload-images', formData).subscribe(response => {\n          alert('Form submitted successfully!');\n          this.uploadedImages = response.images.map(img => `http://127.0.0.1:8000/uploads/${img.filename}`);\n        }, error => {\n          console.error('Upload failed:', error);\n        });\n      } else {\n        alert('Please fill all required fields.');\n      }\n    }\n    onModuleSelect(event) {\n      // Get the transNo based on the selected module\n      const selectedModule = this.modules.find(module => module.module === event.value);\n      if (selectedModule) {\n        this.selectedTransNo = selectedModule.transNo; // Save transNo\n        console.log('Selected transNo:', this.selectedTransNo);\n      }\n    }\n    onSubmit() {\n      const menu = this.menuForm.value;\n      menu.transNo = this.selectedTransNo;\n      console.log(menu); // Log the full menu object with transNo\n      this.menuServices.submitMenus(menu).subscribe(res => {\n        if (res.success) {\n          this.alert.toastrSuccess(res.message);\n          this.ResetForm();\n        } else {\n          this.alert.toastrError(res.error);\n        }\n      }, error => {\n        this.alert.toastrError(error.error);\n      });\n      this.ResetForm();\n    }\n    ResetForm() {\n      this.menuForm.reset(); // Reset form fields\n      // // Clear and reinitialize FormArrays\n      this.price.clear();\n      this.desc_images.clear();\n      // // Optionally set default values (if needed)\n      // this.menuForm.patchValue({\n      //   module: '',\n      //   desc_images: '',\n      // });\n    }\n  }\n  ModuleTaskUIComponent.ɵfac = function ModuleTaskUIComponent_Factory(t) {\n    return new (t || ModuleTaskUIComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MenuService), i0.ɵɵdirectiveInject(i3.NotificationsService), i0.ɵɵdirectiveInject(i4.HttpClient));\n  };\n  ModuleTaskUIComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModuleTaskUIComponent,\n    selectors: [[\"app-module-task-ui\"]],\n    viewQuery: function ModuleTaskUIComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.imageInput = _t.first);\n      }\n    },\n    decls: 42,\n    vars: 7,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"form-container\"], [3, \"formGroup\"], [\"appearance\", \"standard\", 1, \"full-width\"], [\"formControlName\", \"module\", \"placeholder\", \"Select a module\", 3, \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"formControlName\", \"description\", \"placeholder\", \"Description\", \"rows\", \"4\"], [\"formArrayName\", \"price\"], [\"appearance\", \"standard\", 1, \"half-width\"], [\"matInput\", \"\", \"placeholder\", \"Enter Price\", \"type\", \"number\", \"min\", \"0\"], [\"priceInput\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"basic\", 1, \"half-width\", 3, \"click\"], [1, \"price-list\"], [\"class\", \"form-row\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"desc_images\"], [\"matInput\", \"\", \"placeholder\", \"Enter Description Image URL\"], [\"descImageInput\", \"\"], [4, \"ngFor\", \"ngForOf\"], [1, \"button-end\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"mat-dialog-close\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\", \"click\"], [3, \"value\"], [1, \"form-row\"], [\"mat-icon-button\", \"\", \"color\", \"warn\", 3, \"click\"]],\n    template: function ModuleTaskUIComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r12 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"mat-card-header\");\n        i0.ɵɵelementStart(1, \"h2\", 0);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"mat-divider\");\n        i0.ɵɵelementStart(4, \"div\", 1);\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵelementStart(6, \"form\", 2);\n        i0.ɵɵelementStart(7, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(8, \"mat-label\");\n        i0.ɵɵtext(9, \"Module\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-select\", 4);\n        i0.ɵɵlistener(\"selectionChange\", function ModuleTaskUIComponent_Template_mat_select_selectionChange_10_listener($event) {\n          return ctx.onModuleSelect($event);\n        });\n        i0.ɵɵtemplate(11, ModuleTaskUIComponent_mat_option_11_Template, 2, 2, \"mat-option\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(13, \"mat-label\");\n        i0.ɵɵtext(14, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"textarea\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 7);\n        i0.ɵɵelementStart(17, \"mat-form-field\", 8);\n        i0.ɵɵelementStart(18, \"mat-label\");\n        i0.ɵɵtext(19, \"Price\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"input\", 9, 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function ModuleTaskUIComponent_Template_button_click_22_listener() {\n          i0.ɵɵrestoreView(_r12);\n          const _r1 = i0.ɵɵreference(21);\n          ctx.addPrice(_r1.value);\n          return _r1.value = \"\";\n        });\n        i0.ɵɵelementStart(23, \"mat-icon\");\n        i0.ɵɵtext(24, \"add_circle\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(25, \" Add Price \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 12);\n        i0.ɵɵtemplate(27, ModuleTaskUIComponent_div_27_Template, 6, 2, \"div\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 14);\n        i0.ɵɵelementStart(29, \"mat-form-field\", 8);\n        i0.ɵɵelementStart(30, \"mat-label\");\n        i0.ɵɵtext(31, \"Description Image URL\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(32, \"input\", 15, 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function ModuleTaskUIComponent_Template_button_click_34_listener() {\n          i0.ɵɵrestoreView(_r12);\n          const _r3 = i0.ɵɵreference(33);\n          return ctx.addDescImage(_r3.value);\n        });\n        i0.ɵɵtext(35, \"Add Description Image\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(36, ModuleTaskUIComponent_div_36_Template, 3, 2, \"div\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-card-footer\", 18);\n        i0.ɵɵelementStart(38, \"button\", 19);\n        i0.ɵɵtext(39, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"button\", 20);\n        i0.ɵɵlistener(\"click\", function ModuleTaskUIComponent_Template_button_click_40_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(41, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        let tmp_4_0;\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.btnSave, \" Module Task\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.menuForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.modules);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"ngForOf\", ctx.price.controls);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngForOf\", (tmp_4_0 = ctx.menuForm.get(\"desc_images\")) == null ? null : tmp_4_0.value);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.menuForm.invalid);\n      }\n    },\n    directives: [i5.MatCardHeader, i6.MatDialogTitle, i7.MatDivider, i5.MatCardContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i8.MatFormField, i8.MatLabel, i9.MatSelect, i1.NgControlStatus, i1.FormControlName, i10.NgForOf, i11.MatInput, i1.DefaultValueAccessor, i1.FormArrayName, i12.MatButton, i13.MatIcon, i5.MatCardFooter, i6.MatDialogClose, i14.MatOption],\n    styles: [\"textarea[_ngcontent-%COMP%]{height:80px;resize:vertical}.container[_ngcontent-%COMP%]{max-width:600px;margin:0 auto;padding:10px;max-height:500px}.image-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;grid-gap:10px;gap:10px;margin-top:10px}.image-item[_ngcontent-%COMP%]{display:flex;align-items:center;grid-gap:10px;gap:10px}.image-item[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:100px;height:100px;-o-object-fit:cover;object-fit:cover;border-radius:8px;border:1px solid #ddd}.image-item[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background:none;border:none;cursor:pointer}.price-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;grid-gap:10px;gap:10px;margin-top:10px}.form-row[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:space-between;background:#f9f9f9;padding:20px;border-radius:8px;border:1px solid #ddd}.form-row[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;font-size:16px;font-weight:500}.half-width[_ngcontent-%COMP%]{width:48%}button[_ngcontent-%COMP%]{cursor:pointer}\"]\n  });\n  return ModuleTaskUIComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}