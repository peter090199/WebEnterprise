{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Services/SubMenu/sub-menu.service\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/material/divider\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/core\";\nfunction AddSubMenuComponent_div_7_button_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function AddSubMenuComponent_div_7_button_29_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.removeSubmenu(i_r2);\n    });\n    i0.ɵɵtext(1, \"Remove\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddSubMenuComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 9);\n    i0.ɵɵelementStart(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Submenu Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-form-field\", 9);\n    i0.ɵɵelementStart(6, \"mat-label\");\n    i0.ɵɵtext(7, \"Route\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"mat-form-field\", 9);\n    i0.ɵɵelementStart(10, \"mat-label\");\n    i0.ɵɵtext(11, \"Class\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"mat-form-field\", 9);\n    i0.ɵɵelementStart(14, \"mat-label\");\n    i0.ɵɵtext(15, \"Sort Order\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"input\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"mat-form-field\", 9);\n    i0.ɵɵelementStart(18, \"mat-label\");\n    i0.ɵɵtext(19, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"mat-select\", 14);\n    i0.ɵɵelementStart(21, \"mat-option\", 15);\n    i0.ɵɵtext(22, \"Active\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"mat-option\", 16);\n    i0.ɵɵtext(24, \"Inactive\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"mat-form-field\", 9);\n    i0.ɵɵelementStart(26, \"mat-label\");\n    i0.ɵɵtext(27, \"Icon\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(28, \"input\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(29, AddSubMenuComponent_div_7_button_29_Template, 2, 0, \"button\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Description \", i_r2 + 1, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Route \", i_r2 + 1, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Class \", i_r2 + 1, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Sort Order \", i_r2 + 1, \"\");\n    i0.ɵɵadvance(12);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"Icon \", i_r2 + 1, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.lines.length > 1);\n  }\n}\nexport let AddSubMenuComponent = /*#__PURE__*/(() => {\n  class AddSubMenuComponent {\n    constructor(fb, submenuService, data) {\n      this.fb = fb;\n      this.submenuService = submenuService;\n      this.data = data;\n      this.transNo = data.transNo;\n    }\n    ngOnInit() {\n      // Initialize the form with transNo\n      this.submenuForm = this.fb.group({\n        transNo: [this.transNo, Validators.required],\n        lines: this.fb.array([this.createSubmenu()]) // Initialize with one submenu entry\n      });\n    }\n    // Method to create a submenu entry with validations\n    createSubmenu() {\n      return this.fb.group({\n        description: ['', [Validators.required, Validators.maxLength(255)]],\n        icon: ['', Validators.required],\n        class: ['', Validators.required],\n        routes: ['', Validators.required],\n        sort: [null, [Validators.required, Validators.min(1)]],\n        status: ['A']\n      });\n    }\n    // Getter for lines FormArray\n    get lines() {\n      return this.submenuForm.get('lines');\n    }\n    // Method to add a new submenu entry\n    addSubmenu() {\n      this.lines.push(this.createSubmenu());\n    }\n    // Method to remove a submenu entry\n    removeSubmenu(index) {\n      this.lines.removeAt(index);\n    }\n    // Method to save submenu data\n    saveSubmenus() {\n      // Check if form is valid before submitting\n      if (this.submenuForm.valid) {\n        const data = this.submenuForm.value;\n        console.log('Form Data:', data);\n        // Sending the data to the backend\n        this.submenuService.saveSubmenu(data).subscribe(response => {\n          console.log('Submenu data saved successfully:', response);\n          // Optionally, show a success message to the user\n        }, error => {\n          console.error('Error saving submenu data:', error);\n        });\n      } else {\n        console.log('Form is invalid!');\n      }\n    }\n  }\n  AddSubMenuComponent.ɵfac = function AddSubMenuComponent_Factory(t) {\n    return new (t || AddSubMenuComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.SubMenuService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n  AddSubMenuComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddSubMenuComponent,\n    selectors: [[\"app-add-sub-menu\"]],\n    decls: 15,\n    vars: 4,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"form-container\", 3, \"formGroup\", \"ngSubmit\"], [\"formArrayName\", \"lines\"], [\"class\", \"submenu-item\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"button-end\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"mat-dialog-close\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", \"type\", \"submit\"], [1, \"submenu-item\", 3, \"formGroupName\"], [\"appearance\", \"standard\", 1, \"full-width\"], [\"matInput\", \"\", \"formControlName\", \"description\", 3, \"placeholder\"], [\"matInput\", \"\", \"formControlName\", \"routes\", 3, \"placeholder\"], [\"matInput\", \"\", \"formControlName\", \"class\", 3, \"placeholder\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"sort\", 3, \"placeholder\"], [\"formControlName\", \"status\"], [\"value\", \"A\"], [\"value\", \"I\"], [\"matInput\", \"\", \"formControlName\", \"icon\", 3, \"placeholder\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"]],\n    template: function AddSubMenuComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card-header\");\n        i0.ɵɵelementStart(1, \"h2\", 0);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"mat-divider\");\n        i0.ɵɵelementStart(4, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function AddSubMenuComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.saveSubmenus();\n        });\n        i0.ɵɵelementStart(5, \"mat-card-content\");\n        i0.ɵɵelementStart(6, \"div\", 2);\n        i0.ɵɵtemplate(7, AddSubMenuComponent_div_7_Template, 30, 7, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 4);\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵtext(10, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function AddSubMenuComponent_Template_button_click_11_listener() {\n          return ctx.addSubmenu();\n        });\n        i0.ɵɵtext(12, \"Add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 7);\n        i0.ɵɵtext(14, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Add Submenu for TransNo: \", ctx.transNo, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.submenuForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.lines.controls);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n      }\n    },\n    directives: [i3.MatCardHeader, i4.MatDialogTitle, i5.MatDivider, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i3.MatCardContent, i1.FormArrayName, i6.NgForOf, i7.MatButton, i4.MatDialogClose, i1.FormGroupName, i8.MatFormField, i8.MatLabel, i9.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.NumberValueAccessor, i10.MatSelect, i11.MatOption, i6.NgIf],\n    styles: [\"\"]\n  });\n  return AddSubMenuComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}