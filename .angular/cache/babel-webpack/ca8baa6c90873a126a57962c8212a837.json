{"ast":null,"code":"import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i2$1 from '@angular/cdk/bidi';\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0, 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n  constructor(/** Reference to the autocomplete panel that emitted the event. */\n  source, /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n  constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    this.showPanel = false;\n    this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n    this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    this.closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n    this.optionActivated = new EventEmitter();\n    this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n    // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n    this.inertGroups = platform?.SAFARI || false;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /** Whether the autocomplete panel is open. */\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = coerceStringArray(value).reduce((classList, className) => {\n        classList[className] = true;\n        return classList;\n      }, {});\n    } else {\n      this._classList = {};\n    }\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      if (this.isOpen) {\n        this.optionActivated.emit({\n          source: this,\n          option: this.options.toArray()[index] || null\n        });\n      }\n    });\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n  ngOnDestroy() {\n    this._activeOptionChanges.unsubscribe();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /** Returns the panel's scrollTop. */\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits the `select` event. */\n  _emitSelectEvent(option) {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /** Gets the aria-labelledby for the autocomplete panel. */\n  _getPanelAriaLabelledby(labelId) {\n    if (this.ariaLabel) {\n      return null;\n    }\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  _setVisibilityClasses(classList) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n  return new (t || _MatAutocompleteBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i1.Platform));\n};\n_MatAutocompleteBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteBase,\n  viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TemplateRef, 7);\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    panelWidth: \"panelWidth\",\n    classList: [\"class\", \"classList\"]\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\",\n    optionActivated: \"optionActivated\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i1.Platform\n    }];\n  }, {\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    displayWith: [{\n      type: Input\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    panelWidth: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }]\n  });\n})();\nclass MatAutocomplete extends _MatAutocompleteBase {\n  constructor() {\n    super(...arguments);\n    this._visibleClass = 'mat-autocomplete-visible';\n    this._hiddenClass = 'mat-autocomplete-hidden';\n  }\n}\nMatAutocomplete.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocomplete_BaseFactory;\n  return function MatAutocomplete_Factory(t) {\n    return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n  };\n}();\nMatAutocomplete.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    }\n  },\n  directives: [i2.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n    }]\n  }], null, {\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n  constructor(/** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n  return new (t || _MatAutocompleteOriginBase)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n_MatAutocompleteOriginBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteOriginBase\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\nMatAutocompleteOrigin.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocompleteOrigin_BaseFactory;\n  return function MatAutocompleteOrigin_Factory(t) {\n    return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n  };\n}();\nMatAutocompleteOrigin.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n    this._onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n    this._onTouched = () => {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of changes to the selection state of the autocomplete options. */\n    this.optionSelections = defer(() => {\n      const options = this.autocomplete ? this.autocomplete.options : null;\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n      // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n      return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n  ngAfterViewInit() {\n    const window = this._getWindow();\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  ngOnDestroy() {\n    const window = this._getWindow();\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /** Opens the autocomplete suggestion panel. */\n  openPanel() {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n  /** Closes the autocomplete suggestion panel. */\n  closePanel() {\n    this._resetLabel();\n    if (!this._overlayAttached) {\n      return;\n    }\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      // The `NgZone.onStable` always emits outside of the Angular zone,\n      // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n      // We should manually run in Angular zone to update UI after panel closing.\n      this._zone.run(() => {\n        this.autocomplete.closed.emit();\n      });\n    }\n    this.autocomplete._isOpen = this._overlayAttached = false;\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition() {\n    if (this._overlayAttached) {\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe(\n    // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n    return null;\n  }\n  /** Stream of clicks outside of the autocomplete panel. */\n  _getOutsideClickStream() {\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      const clickTarget = _getEventTarget(event);\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n      // Normally focus moves inside `mousedown` so this condition will almost always be\n      // true. Its main purpose is to handle the case where the input is focused from an\n      // outside click which propagates up to the `body` listener within the same sequence\n      // and causes the panel to close immediately (see #3106).\n      this._document.activeElement !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    Promise.resolve().then(() => this._setTriggerValue(value));\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const hasModifier = hasModifierKey(event);\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE && !hasModifier) {\n      event.preventDefault();\n    }\n    if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n      if (keyCode === TAB || isArrowKey && !hasModifier && this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n      }\n    }\n  }\n  _handleInput(event) {\n    let target = event.target;\n    let value = target.value;\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n  _handleClick() {\n    if (this._canOpen() && !this.panelOpen) {\n      this.openPanel();\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /** If the label has been manually elevated, return it to its normal state. */\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  _subscribeToClosingActions() {\n    const firstStable = this._zone.onStable.pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()),\n    // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0));\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges).pipe(\n    // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n      // the Angular zone. This will lead to change detection being called outside of the Angular\n      // zone and the `autocomplete.opened` will also emit outside of the Angular.\n      this._zone.run(() => {\n        const wasOpen = this.panelOpen;\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        this._changeDetectorRef.detectChanges();\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n          // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n          // event, because we may not have emitted it when the panel was attached. This\n          // can happen if the users opens the panel and there are no options, but the\n          // options come in slightly later or as a result of the value changing.\n          if (wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n          }\n        }\n      });\n      return this.panelClosingActions;\n    }),\n    // when the first closing event occurs...\n    take(1))\n    // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /** Destroys the autocomplete suggestion panel. */\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n  _setTriggerValue(value) {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n    this._previousValue = inputValue;\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  _setValueAndClose(event) {\n    const source = event && event.source;\n    if (source) {\n      this._clearPreviousSelectedOption(source);\n      this._setTriggerValue(source.value);\n      this._onChange(source.value);\n      this.autocomplete._emitSelectEvent(source);\n      this._element.nativeElement.focus();\n    }\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n  _attachOverlay() {\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n    let overlayRef = this._overlayRef;\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n        id: this._formField?.getLabelId()\n      });\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n          this._closeKeyEventStream.next();\n          this._resetActiveItem();\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n    const wasOpen = this.panelOpen;\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir,\n      panelClass: this._defaults?.overlayPanelClass\n    });\n  }\n  _getOverlayPosition() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  _setStrategyPositions(positionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }];\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    const panelClass = this._aboveClass;\n    const abovePositions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass\n    }];\n    let positions;\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n    positionStrategy.withPositions(positions);\n  }\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /** Returns the width of the input element, so the panel width can match it. */\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  _resetActiveItem() {\n    const autocomplete = this.autocomplete;\n    if (autocomplete.autoActiveFirstOption) {\n      // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n      // the former will find the next enabled option, if the first one is disabled.\n      autocomplete._keyManager.setFirstItemActive();\n    } else {\n      autocomplete._keyManager.setActiveItem(-1);\n    }\n  }\n  /** Determines whether the panel can be opened. */\n  _canOpen() {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  _getWindow() {\n    return this._document?.defaultView || window;\n  }\n  /** Scrolls to a particular option in the list. */\n  _scrollToOption(index) {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n    const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else if (autocomplete.panel) {\n      const option = autocomplete.options.toArray()[index];\n      if (option) {\n        const element = option._getHostElement();\n        const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n  return new (t || _MatAutocompleteTriggerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i2$1.Directionality, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n};\n_MatAutocompleteTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteTriggerBase,\n  inputs: {\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    position: [\"matAutocompletePosition\", \"position\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"],\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1$1.Overlay\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i2$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i3.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }]\n  });\n})();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  constructor() {\n    super(...arguments);\n    this._aboveClass = 'mat-autocomplete-panel-above';\n  }\n}\nMatAutocompleteTrigger.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocompleteTrigger_BaseFactory;\n  return function MatAutocompleteTrigger_Factory(t) {\n    return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n  };\n}();\nMatAutocompleteTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostAttrs: [1, \"mat-autocomplete-trigger\"],\n  hostVars: 7,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"click\", function MatAutocompleteTrigger_click_HostBindingHandler() {\n        return ctx._handleClick();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", ctx.autocompleteDisabled ? null : \"listbox\");\n    }\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [i0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        'class': 'mat-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick()'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\nMatAutocompleteModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule, MatOptionModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","i1","_getEventTarget","i0","InjectionToken","EventEmitter","TemplateRef","Directive","Inject","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","i2","DOCUMENT","CommonModule","i1$1","Overlay","OverlayConfig","OverlayModule","i3","CdkScrollableModule","i2$1","hasModifierKey","ESCAPE","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","i4","MAT_FORM_FIELD","startWith","switchMap","take","filter","map","tap","delay","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵnextContext","ɵɵproperty","_classList","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","classList","length","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","ElementRef","Platform","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatAutocompleteBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ngDevMode","ɵsetClassMetadata","undefined","decorators","args","static","MatAutocomplete","arguments","ɵMatAutocomplete_BaseFactory","MatAutocomplete_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","directives","NgClass","styles","encapsulation","changeDetection","selector","None","OnPush","host","providers","descendants","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","ɵMatAutocompleteOrigin_BaseFactory","MatAutocompleteOrigin_Factory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","changes","pipe","onSelectionChange","onStable","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","run","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","hasModifier","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_MatAutocompleteTriggerBase_Factory","ViewContainerRef","NgZone","Directionality","ViewportRuler","ɵɵNgOnChangesFeature","MatFormField","ɵMatAutocompleteTrigger_BaseFactory","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","MatAutocompleteTrigger_keydown_HostBindingHandler","MatAutocompleteTrigger_click_HostBindingHandler","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["C:/Users/Mariosoft/Desktop/New folder/material-pro-angular-lite-master/material-pro-angular-lite-master/angular-13/node_modules/@angular/material/fesm2020/autocomplete.mjs"],"sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i2$1 from '@angular/cdk/bidi';\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() {\n        return this._autoActiveFirstOption;\n    }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteBase, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Directive });\n_MatAutocompleteBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", panelWidth: \"panelWidth\", classList: [\"class\", \"classList\"] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }]; }, propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }] } });\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocomplete, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatAutocomplete.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { disableRipple: \"disableRipple\" }, host: { classAttribute: \"mat-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }], exportAs: [\"matAutocomplete\"], usesInheritance: true, ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                        'class': 'mat-autocomplete',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"] }]\n        }], propDecorators: { optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteOriginBase, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatAutocompleteOriginBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteOriginBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteOriginBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteOrigin, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatAutocompleteOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() {\n        return this._autocompleteDisabled;\n    }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // The `NgZone.onStable` always emits outside of the Angular zone,\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve().then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this.openPanel();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this.autocomplete._setVisibility();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                    // event, because we may not have emitted it when the panel was attached. This\n                    // can happen if the users opens the panel and there are no options, but the\n                    // options come in slightly later or as a result of the value changing.\n                    if (wasOpen !== this.panelOpen) {\n                        this.autocomplete.opened.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\n            ? this.autocomplete.displayWith(value)\n            : value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const source = event && event.source;\n        if (source) {\n            this._clearPreviousSelectedOption(source);\n            this._setTriggerValue(source.value);\n            this._onChange(source.value);\n            this.autocomplete._emitSelectEvent(source);\n            this._element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._closeKeyEventStream.next();\n                    this._resetActiveItem();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteTriggerBase, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatAutocompleteTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteTriggerBase, inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteTriggerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: ['matAutocompleteDisabled']\n            }] } });\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatAutocompleteTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-owns\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatAutocompleteModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [MatAutocomplete,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin,\n        CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\nMatAutocompleteModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n                    exports: [\n                        MatAutocomplete,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                        CdkScrollableModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,mBAAmB;AAC9D,SAASC,qBAAqB,EAAEC,iBAAiB,QAAQ,uBAAuB;AAChF,OAAO,KAAKC,EAAE,MAAM,uBAAuB;AAC3C,SAASC,eAAe,QAAQ,uBAAuB;AACvD,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,cAAc,EAAEC,YAAY,EAAEC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,eAAe,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,eAAe;AACpO,SAASC,kBAAkB,EAAEC,2BAA2B,EAAEC,YAAY,EAAEC,SAAS,EAAEC,wBAAwB,EAAEC,6BAA6B,EAAEC,wBAAwB,EAAEC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;AACtO,SAASC,YAAY,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AACzE,OAAO,KAAKC,EAAE,MAAM,iBAAiB;AACrC,SAASC,QAAQ,EAAEC,YAAY,QAAQ,iBAAiB;AACxD,OAAO,KAAKC,IAAI,MAAM,sBAAsB;AAC5C,SAASC,OAAO,EAAEC,aAAa,EAAEC,aAAa,QAAQ,sBAAsB;AAC5E,OAAO,KAAKC,EAAE,MAAM,wBAAwB;AAC5C,SAASC,mBAAmB,QAAQ,wBAAwB;AAC5D,OAAO,KAAKC,IAAI,MAAM,mBAAmB;AACzC,SAASC,cAAc,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,GAAG,QAAQ,uBAAuB;AAChG,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,OAAO,KAAKC,EAAE,MAAM,8BAA8B;AAClD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,SAAS,EAAEC,SAAS,EAAEC,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,QAAQ,gBAAgB;;AAEpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA,MAAAC,GAAA;AAAA,SAAAC,uCAAAC,EAAA,EAAAC,GAAA;EAAA,IAAAD,EAAA;IA6IuG7D,EAAE,CAAA+D,cAAA,eA6CquB,CAAC;IA7CxuB/D,EAAE,CAAAgE,YAAA,EA6CowB,CAAC;IA7CvwBhE,EAAE,CAAAiE,YAAA,CA6C8wB,CAAC;EAAA;EAAA,IAAAJ,EAAA;IAAA,MAAAK,cAAA,GAAAJ,GAAA,CAAAK,EAAA;IAAA,MAAAC,MAAA,GA7CjxBpE,EAAE,CAAAqE,aAAA;IAAFrE,EAAE,CAAAsE,UAAA,OAAAF,MAAA,CAAAD,EA6C4jB,CAAC,YAAAC,MAAA,CAAAG,UAAD,CAAC;IA7C/jBvE,EAAE,CAAAwE,WAAA,eAAAJ,MAAA,CAAAK,SAAA,QA6C4mB,CAAC,oBAAAL,MAAA,CAAAM,uBAAA,CAAAR,cAAA,CAAD,CAAC;EAAA;AAAA;AAAA,MAAAS,GAAA;AAtLttB,IAAIC,4BAA4B,GAAG,CAAC;AACpC;AACA,MAAMC,4BAA4B,CAAC;EAC/BC,WAAWA,CACX;EACAC,MAAM,EACN;EACAC,MAAM,EAAE;IACJ,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;AACJ;AACA;AACA;AACA,MAAMC,yBAAyB,GAAGhE,kBAAkB,CAAC,MAAM,EAC1D,CAAC;AACF;AACA,MAAMiE,gCAAgC,GAAG,IAAIjF,cAAc,CAAC,kCAAkC,EAAE;EAC5FkF,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAEC;AACb,CAAC,CAAC;AACF;AACA,SAASA,wCAAwCA,CAAA,EAAG;EAChD,OAAO;IAAEC,qBAAqB,EAAE;EAAM,CAAC;AAC3C;AACA;AACA,MAAMC,oBAAoB,SAASN,yBAAyB,CAAC;EACzDH,WAAWA,CAACU,kBAAkB,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IAC7D,KAAK,CAAC,CAAC;IACP,IAAI,CAACH,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACG,oBAAoB,GAAGlE,YAAY,CAACmE,KAAK;IAC9C;IACA,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB;IACA,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB;IACA,IAAI,CAACC,cAAc,GAAG,IAAI/F,YAAY,CAAC,CAAC;IACxC;IACA,IAAI,CAACgG,MAAM,GAAG,IAAIhG,YAAY,CAAC,CAAC;IAChC;IACA,IAAI,CAACiG,MAAM,GAAG,IAAIjG,YAAY,CAAC,CAAC;IAChC;IACA,IAAI,CAACkG,eAAe,GAAG,IAAIlG,YAAY,CAAC,CAAC;IACzC,IAAI,CAACqE,UAAU,GAAG,CAAC,CAAC;IACpB;IACA,IAAI,CAACJ,EAAE,GAAG,oBAAoBS,4BAA4B,EAAE,EAAE;IAC9D;IACA;IACA;IACA;IACA,IAAI,CAACyB,WAAW,GAAGV,QAAQ,EAAEW,MAAM,IAAI,KAAK;IAC5C,IAAI,CAACC,sBAAsB,GAAG,CAAC,CAACb,QAAQ,CAACJ,qBAAqB;EAClE;EACA;EACA,IAAIkB,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACT,OAAO,IAAI,IAAI,CAACD,SAAS;EACzC;EACA;AACJ;AACA;AACA;EACI,IAAIR,qBAAqBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAACiB,sBAAsB;EACtC;EACA,IAAIjB,qBAAqBA,CAACmB,KAAK,EAAE;IAC7B,IAAI,CAACF,sBAAsB,GAAG3G,qBAAqB,CAAC6G,KAAK,CAAC;EAC9D;EACA;AACJ;AACA;AACA;EACI,IAAIC,SAASA,CAACD,KAAK,EAAE;IACjB,IAAIA,KAAK,IAAIA,KAAK,CAACE,MAAM,EAAE;MACvB,IAAI,CAACpC,UAAU,GAAG1E,iBAAiB,CAAC4G,KAAK,CAAC,CAACG,MAAM,CAAC,CAACF,SAAS,EAAEG,SAAS,KAAK;QACxEH,SAAS,CAACG,SAAS,CAAC,GAAG,IAAI;QAC3B,OAAOH,SAAS;MACpB,CAAC,EAAE,CAAC,CAAC,CAAC;IACV,CAAC,MACI;MACD,IAAI,CAACnC,UAAU,GAAG,CAAC,CAAC;IACxB;IACA,IAAI,CAACuC,qBAAqB,CAAC,IAAI,CAACvC,UAAU,CAAC;IAC3C,IAAI,CAACkB,WAAW,CAACsB,aAAa,CAACF,SAAS,GAAG,EAAE;EACjD;EACAG,kBAAkBA,CAAA,EAAG;IACjB,IAAI,CAACC,WAAW,GAAG,IAAItH,0BAA0B,CAAC,IAAI,CAACuH,OAAO,CAAC,CAACC,QAAQ,CAAC,CAAC;IAC1E,IAAI,CAACvB,oBAAoB,GAAG,IAAI,CAACqB,WAAW,CAACG,MAAM,CAACC,SAAS,CAACC,KAAK,IAAI;MACnE,IAAI,IAAI,CAACd,MAAM,EAAE;QACb,IAAI,CAACJ,eAAe,CAACmB,IAAI,CAAC;UAAExC,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE,IAAI,CAACkC,OAAO,CAACM,OAAO,CAAC,CAAC,CAACF,KAAK,CAAC,IAAI;QAAK,CAAC,CAAC;MAC9F;IACJ,CAAC,CAAC;IACF;IACA,IAAI,CAACG,cAAc,CAAC,CAAC;EACzB;EACAC,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC9B,oBAAoB,CAAC+B,WAAW,CAAC,CAAC;EAC3C;EACA;AACJ;AACA;AACA;EACIC,aAAaA,CAACC,SAAS,EAAE;IACrB,IAAI,IAAI,CAACC,KAAK,EAAE;MACZ,IAAI,CAACA,KAAK,CAACf,aAAa,CAACc,SAAS,GAAGA,SAAS;IAClD;EACJ;EACA;EACAE,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACD,KAAK,GAAG,IAAI,CAACA,KAAK,CAACf,aAAa,CAACc,SAAS,GAAG,CAAC;EAC9D;EACA;EACAJ,cAAcA,CAAA,EAAG;IACb,IAAI,CAAC3B,SAAS,GAAG,CAAC,CAAC,IAAI,CAACoB,OAAO,CAACP,MAAM;IACtC,IAAI,CAACG,qBAAqB,CAAC,IAAI,CAACvC,UAAU,CAAC;IAC3C,IAAI,CAACiB,kBAAkB,CAACwC,YAAY,CAAC,CAAC;EAC1C;EACA;EACAC,gBAAgBA,CAACjD,MAAM,EAAE;IACrB,MAAMkD,KAAK,GAAG,IAAIrD,4BAA4B,CAAC,IAAI,EAAEG,MAAM,CAAC;IAC5D,IAAI,CAACiB,cAAc,CAACsB,IAAI,CAACW,KAAK,CAAC;EACnC;EACA;EACAxD,uBAAuBA,CAACyD,OAAO,EAAE;IAC7B,IAAI,IAAI,CAAC1D,SAAS,EAAE;MAChB,OAAO,IAAI;IACf;IACA,MAAM2D,eAAe,GAAGD,OAAO,GAAGA,OAAO,GAAG,GAAG,GAAG,EAAE;IACpD,OAAO,IAAI,CAACE,cAAc,GAAGD,eAAe,GAAG,IAAI,CAACC,cAAc,GAAGF,OAAO;EAChF;EACA;EACArB,qBAAqBA,CAACJ,SAAS,EAAE;IAC7BA,SAAS,CAAC,IAAI,CAAC4B,aAAa,CAAC,GAAG,IAAI,CAACxC,SAAS;IAC9CY,SAAS,CAAC,IAAI,CAAC6B,YAAY,CAAC,GAAG,CAAC,IAAI,CAACzC,SAAS;EAClD;AACJ;AACAP,oBAAoB,CAACiD,IAAI,YAAAC,6BAAAC,CAAA;EAAA,YAAAA,CAAA,IAAwFnD,oBAAoB,EAA9BvF,EAAE,CAAA2I,iBAAA,CAA8C3I,EAAE,CAAC4I,iBAAiB,GAApE5I,EAAE,CAAA2I,iBAAA,CAA+E3I,EAAE,CAAC6I,UAAU,GAA9F7I,EAAE,CAAA2I,iBAAA,CAAyGzD,gCAAgC,GAA3IlF,EAAE,CAAA2I,iBAAA,CAAsJ7I,EAAE,CAACgJ,QAAQ;AAAA,CAA4C;AACtTvD,oBAAoB,CAACwD,IAAI,kBAD8E/I,EAAE,CAAAgJ,iBAAA;EAAAC,IAAA,EACJ1D,oBAAoB;EAAA2D,SAAA,WAAAC,2BAAAtF,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MADlB7D,EAAE,CAAAoJ,WAAA,CAC+bjJ,WAAW;MAD5cH,EAAE,CAAAoJ,WAAA,CAAAzF,GAAA;IAAA;IAAA,IAAAE,EAAA;MAAA,IAAAwF,EAAA;MAAFrJ,EAAE,CAAAsJ,cAAA,CAAAD,EAAA,GAAFrJ,EAAE,CAAAuJ,WAAA,QAAAzF,GAAA,CAAA0F,QAAA,GAAAH,EAAA,CAAAI,KAAA;MAAFzJ,EAAE,CAAAsJ,cAAA,CAAAD,EAAA,GAAFrJ,EAAE,CAAAuJ,WAAA,QAAAzF,GAAA,CAAAgE,KAAA,GAAAuB,EAAA,CAAAI,KAAA;IAAA;EAAA;EAAAC,MAAA;IAAAjF,SAAA;IAAA4D,cAAA;IAAArC,WAAA;IAAAV,qBAAA;IAAAqE,UAAA;IAAAjD,SAAA;EAAA;EAAAkD,OAAA;IAAA3D,cAAA;IAAAC,MAAA;IAAAC,MAAA;IAAAC,eAAA;EAAA;EAAAyD,QAAA,GAAF7J,EAAE,CAAA8J,0BAAA;AAAA,EACumB;AAChtB;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAFuG/J,EAAE,CAAAgK,iBAAA,CAEdzE,oBAAoB,EAAc,CAAC;IAClH0D,IAAI,EAAE7I;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAE6I,IAAI,EAAEjJ,EAAE,CAAC4I;IAAkB,CAAC,EAAE;MAAEK,IAAI,EAAEjJ,EAAE,CAAC6I;IAAW,CAAC,EAAE;MAAEI,IAAI,EAAEgB,SAAS;MAAEC,UAAU,EAAE,CAAC;QACvHjB,IAAI,EAAE5I,MAAM;QACZ8J,IAAI,EAAE,CAACjF,gCAAgC;MAC3C,CAAC;IAAE,CAAC,EAAE;MAAE+D,IAAI,EAAEnJ,EAAE,CAACgJ;IAAS,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAEU,QAAQ,EAAE,CAAC;MAC9DP,IAAI,EAAE3I,SAAS;MACf6J,IAAI,EAAE,CAAChK,WAAW,EAAE;QAAEiK,MAAM,EAAE;MAAK,CAAC;IACxC,CAAC,CAAC;IAAEtC,KAAK,EAAE,CAAC;MACRmB,IAAI,EAAE3I,SAAS;MACf6J,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC,CAAC;IAAE1F,SAAS,EAAE,CAAC;MACZwE,IAAI,EAAE1I,KAAK;MACX4J,IAAI,EAAE,CAAC,YAAY;IACvB,CAAC,CAAC;IAAE9B,cAAc,EAAE,CAAC;MACjBY,IAAI,EAAE1I,KAAK;MACX4J,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAEnE,WAAW,EAAE,CAAC;MACdiD,IAAI,EAAE1I;IACV,CAAC,CAAC;IAAE+E,qBAAqB,EAAE,CAAC;MACxB2D,IAAI,EAAE1I;IACV,CAAC,CAAC;IAAEoJ,UAAU,EAAE,CAAC;MACbV,IAAI,EAAE1I;IACV,CAAC,CAAC;IAAE0F,cAAc,EAAE,CAAC;MACjBgD,IAAI,EAAEzI;IACV,CAAC,CAAC;IAAE0F,MAAM,EAAE,CAAC;MACT+C,IAAI,EAAEzI;IACV,CAAC,CAAC;IAAE2F,MAAM,EAAE,CAAC;MACT8C,IAAI,EAAEzI;IACV,CAAC,CAAC;IAAE4F,eAAe,EAAE,CAAC;MAClB6C,IAAI,EAAEzI;IACV,CAAC,CAAC;IAAEkG,SAAS,EAAE,CAAC;MACZuC,IAAI,EAAE1I,KAAK;MACX4J,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC;EAAE,CAAC;AAAA;AAChB,MAAME,eAAe,SAAS9E,oBAAoB,CAAC;EAC/CT,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGwF,SAAS,CAAC;IACnB,IAAI,CAAChC,aAAa,GAAG,0BAA0B;IAC/C,IAAI,CAACC,YAAY,GAAG,yBAAyB;EACjD;AACJ;AACA8B,eAAe,CAAC7B,IAAI;EAAA,IAAA+B,4BAAA;EAAA,gBAAAC,wBAAA9B,CAAA;IAAA,QAAA6B,4BAAA,KAAAA,4BAAA,GA5CmFvK,EAAE,CAAAyK,qBAAA,CA4CGJ,eAAe,IAAA3B,CAAA,IAAf2B,eAAe;EAAA;AAAA,GAAqD;AAChLA,eAAe,CAACK,IAAI,kBA7CmF1K,EAAE,CAAA2K,iBAAA;EAAA1B,IAAA,EA6CToB,eAAe;EAAAO,SAAA;EAAAC,cAAA,WAAAC,+BAAAjH,EAAA,EAAAC,GAAA,EAAAiH,QAAA;IAAA,IAAAlH,EAAA;MA7CR7D,EAAE,CAAAgL,cAAA,CAAAD,QAAA,EA6C0Q5J,YAAY;MA7CxRnB,EAAE,CAAAgL,cAAA,CAAAD,QAAA,EA6CmV3J,SAAS;IAAA;IAAA,IAAAyC,EAAA;MAAA,IAAAwF,EAAA;MA7C9VrJ,EAAE,CAAAsJ,cAAA,CAAAD,EAAA,GAAFrJ,EAAE,CAAAuJ,WAAA,QAAAzF,GAAA,CAAAmH,YAAA,GAAA5B,EAAA;MAAFrJ,EAAE,CAAAsJ,cAAA,CAAAD,EAAA,GAAFrJ,EAAE,CAAAuJ,WAAA,QAAAzF,GAAA,CAAAoD,OAAA,GAAAmC,EAAA;IAAA;EAAA;EAAA6B,SAAA;EAAAxB,MAAA;IAAAyB,aAAA;EAAA;EAAAC,QAAA;EAAAvB,QAAA,GAAF7J,EAAE,CAAAqL,kBAAA,CA6C2I,CAAC;IAAEC,OAAO,EAAEpK,2BAA2B;IAAEqK,WAAW,EAAElB;EAAgB,CAAC,CAAC,GA7CrNrK,EAAE,CAAA8J,0BAAA;EAAA0B,kBAAA,EAAA7G,GAAA;EAAA8G,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAnC,QAAA,WAAAoC,yBAAA/H,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAAF7D,EAAE,CAAA6L,eAAA;MAAF7L,EAAE,CAAA8L,UAAA,IAAAlI,sCAAA,qBA6C8xB,CAAC;IAAA;EAAA;EAAAmI,UAAA,GAAksB/J,EAAE,CAACgK,OAAO;EAAAC,MAAA;EAAAC,aAAA;EAAAC,eAAA;AAAA,EAAyJ;AAC7uD;EAAA,QAAApC,SAAA,oBAAAA,SAAA,KA9CuG/J,EAAE,CAAAgK,iBAAA,CA8CdK,eAAe,EAAc,CAAC;IAC7GpB,IAAI,EAAExI,SAAS;IACf0J,IAAI,EAAE,CAAC;MAAEiC,QAAQ,EAAE,kBAAkB;MAAEF,aAAa,EAAExL,iBAAiB,CAAC2L,IAAI;MAAEF,eAAe,EAAExL,uBAAuB,CAAC2L,MAAM;MAAElB,QAAQ,EAAE,iBAAiB;MAAE1B,MAAM,EAAE,CAAC,eAAe,CAAC;MAAE6C,IAAI,EAAE;QACjL,OAAO,EAAE;MACb,CAAC;MAAEC,SAAS,EAAE,CAAC;QAAElB,OAAO,EAAEpK,2BAA2B;QAAEqK,WAAW,EAAElB;MAAgB,CAAC,CAAC;MAAEb,QAAQ,EAAE,gWAAgW;MAAEyC,MAAM,EAAE,CAAC,4pBAA4pB;IAAE,CAAC;EACxnC,CAAC,CAAC,QAAkB;IAAEhB,YAAY,EAAE,CAAC;MAC7BhC,IAAI,EAAErI,eAAe;MACrBuJ,IAAI,EAAE,CAAChJ,YAAY,EAAE;QAAEsL,WAAW,EAAE;MAAK,CAAC;IAC9C,CAAC,CAAC;IAAEvF,OAAO,EAAE,CAAC;MACV+B,IAAI,EAAErI,eAAe;MACrBuJ,IAAI,EAAE,CAAC/I,SAAS,EAAE;QAAEqL,WAAW,EAAE;MAAK,CAAC;IAC3C,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,CAAC;EAC7B5H,WAAWA,CACX;EACA6H,UAAU,EAAE;IACR,IAAI,CAACA,UAAU,GAAGA,UAAU;EAChC;AACJ;AACAD,0BAA0B,CAAClE,IAAI,YAAAoE,mCAAAlE,CAAA;EAAA,YAAAA,CAAA,IAAwFgE,0BAA0B,EA1E1C1M,EAAE,CAAA2I,iBAAA,CA0E0D3I,EAAE,CAAC6I,UAAU;AAAA,CAA4C;AAC5N6D,0BAA0B,CAAC3D,IAAI,kBA3EwE/I,EAAE,CAAAgJ,iBAAA;EAAAC,IAAA,EA2EEyD;AAA0B,EAAiB;AACtJ;EAAA,QAAA3C,SAAA,oBAAAA,SAAA,KA5EuG/J,EAAE,CAAAgK,iBAAA,CA4Ed0C,0BAA0B,EAAc,CAAC;IACxHzD,IAAI,EAAE7I;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAE6I,IAAI,EAAEjJ,EAAE,CAAC6I;IAAW,CAAC,CAAC;EAAE,CAAC;AAAA;AAC7E;AACA;AACA;AACA;AACA,MAAMgE,qBAAqB,SAASH,0BAA0B,CAAC;AAE/DG,qBAAqB,CAACrE,IAAI;EAAA,IAAAsE,kCAAA;EAAA,gBAAAC,8BAAArE,CAAA;IAAA,QAAAoE,kCAAA,KAAAA,kCAAA,GArF6E9M,EAAE,CAAAyK,qBAAA,CAqFSoC,qBAAqB,IAAAnE,CAAA,IAArBmE,qBAAqB;EAAA;AAAA,GAAqD;AAC5LA,qBAAqB,CAAC9D,IAAI,kBAtF6E/I,EAAE,CAAAgJ,iBAAA;EAAAC,IAAA,EAsFH4D,qBAAqB;EAAAjC,SAAA;EAAAQ,QAAA;EAAAvB,QAAA,GAtFpB7J,EAAE,CAAA8J,0BAAA;AAAA,EAsFoI;AAC7O;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAvFuG/J,EAAE,CAAAgK,iBAAA,CAuFd6C,qBAAqB,EAAc,CAAC;IACnH5D,IAAI,EAAE7I,SAAS;IACf+J,IAAI,EAAE,CAAC;MACCiC,QAAQ,EAAE,yBAAyB;MACnChB,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4B,gCAAgC,GAAG,IAAI/M,cAAc,CAAC,kCAAkC,CAAC;AAC/F;AACA,SAASgN,wCAAwCA,CAACC,OAAO,EAAE;EACvD,OAAO,MAAMA,OAAO,CAACC,gBAAgB,CAACC,UAAU,CAAC,CAAC;AACtD;AACA;AACA,MAAMC,iDAAiD,GAAG;EACtD/B,OAAO,EAAE0B,gCAAgC;EACzCM,IAAI,EAAE,CAAClL,OAAO,CAAC;EACfmL,UAAU,EAAEN;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMO,+BAA+B,GAAG;EACpClC,OAAO,EAAErI,iBAAiB;EAC1BsI,WAAW,EAAE1K,UAAU,CAAC,MAAM4M,sBAAsB,CAAC;EACrDC,KAAK,EAAE;AACX,CAAC;AACD;AACA;AACA;AACA;AACA,SAASC,mCAAmCA,CAAA,EAAG;EAC3C,OAAOC,KAAK,CAAC,kEAAkE,GAC3E,4EAA4E,GAC5E,iEAAiE,CAAC;AAC1E;AACA;AACA,MAAMC,2BAA2B,CAAC;EAC9B/I,WAAWA,CAACgJ,QAAQ,EAAEC,QAAQ,EAAEC,iBAAiB,EAAEC,KAAK,EAAEzI,kBAAkB,EAAE0I,cAAc,EAAEC,IAAI,EAAEC,UAAU,EAAEC,SAAS,EAAEC,cAAc,EAAEC,SAAS,EAAE;IAClJ,IAAI,CAACT,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACzI,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAAC2I,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,qBAAqB,GAAG,KAAK;IAClC;IACA,IAAI,CAACC,sBAAsB,GAAG,KAAK;IACnC;IACA,IAAI,CAACC,qBAAqB,GAAGjN,YAAY,CAACmE,KAAK;IAC/C;AACR;AACA;AACA;AACA;IACQ,IAAI,CAAC+I,mBAAmB,GAAG,IAAI;IAC/B;IACA,IAAI,CAACC,oBAAoB,GAAG,IAAIlN,OAAO,CAAC,CAAC;IACzC;AACR;AACA;AACA;IACQ,IAAI,CAACmN,kBAAkB,GAAG,MAAM;MAC5B;MACA;MACA;MACA,IAAI,CAACF,mBAAmB,GACpB,IAAI,CAACP,SAAS,CAACU,aAAa,KAAK,IAAI,CAACjB,QAAQ,CAAC/G,aAAa,IAAI,IAAI,CAACiI,SAAS;IACtF,CAAC;IACD;IACA,IAAI,CAACC,SAAS,GAAG,MAAM,CAAE,CAAC;IAC1B;IACA,IAAI,CAACC,UAAU,GAAG,MAAM,CAAE,CAAC;IAC3B;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,MAAM;IACtB;AACR;AACA;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,KAAK;IAClC,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B;IACA,IAAI,CAACC,gBAAgB,GAAG1N,KAAK,CAAC,MAAM;MAChC,MAAMsF,OAAO,GAAG,IAAI,CAACqI,YAAY,GAAG,IAAI,CAACA,YAAY,CAACrI,OAAO,GAAG,IAAI;MACpE,IAAIA,OAAO,EAAE;QACT,OAAOA,OAAO,CAACsI,OAAO,CAACC,IAAI,CAACrM,SAAS,CAAC8D,OAAO,CAAC,EAAE7D,SAAS,CAAC,MAAMxB,KAAK,CAAC,GAAGqF,OAAO,CAAC1D,GAAG,CAACwB,MAAM,IAAIA,MAAM,CAAC0K,iBAAiB,CAAC,CAAC,CAAC,CAAC;MAC/H;MACA;MACA;MACA,OAAO,IAAI,CAACzB,KAAK,CAAC0B,QAAQ,CAACF,IAAI,CAACnM,IAAI,CAAC,CAAC,CAAC,EAAED,SAAS,CAAC,MAAM,IAAI,CAACiM,gBAAgB,CAAC,CAAC;IACpF,CAAC,CAAC;IACF,IAAI,CAACM,eAAe,GAAG1B,cAAc;EACzC;EACA;AACJ;AACA;AACA;EACI,IAAI2B,oBAAoBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACpB,qBAAqB;EACrC;EACA,IAAIoB,oBAAoBA,CAACpJ,KAAK,EAAE;IAC5B,IAAI,CAACgI,qBAAqB,GAAG7O,qBAAqB,CAAC6G,KAAK,CAAC;EAC7D;EACAqJ,eAAeA,CAAA,EAAG;IACd,MAAMC,MAAM,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IAChC,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;MAC/B,IAAI,CAAC9B,KAAK,CAACgC,iBAAiB,CAAC,MAAMF,MAAM,CAACG,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACpB,kBAAkB,CAAC,CAAC;IAChG;EACJ;EACAqB,WAAWA,CAACX,OAAO,EAAE;IACjB,IAAIA,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,CAACY,iBAAiB,EAAE;MAC/C,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACD,iBAAiB,CAAC;MAClD,IAAI,IAAI,CAACpB,SAAS,EAAE;QAChB,IAAI,CAACsB,WAAW,CAACC,cAAc,CAAC,CAAC;MACrC;IACJ;EACJ;EACA7I,WAAWA,CAAA,EAAG;IACV,MAAMqI,MAAM,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;IAChC,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;MAC/BA,MAAM,CAACS,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC1B,kBAAkB,CAAC;IAC/D;IACA,IAAI,CAACH,qBAAqB,CAAChH,WAAW,CAAC,CAAC;IACxC,IAAI,CAAC6G,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACiC,aAAa,CAAC,CAAC;IACpB,IAAI,CAAC5B,oBAAoB,CAAC6B,QAAQ,CAAC,CAAC;EACxC;EACA;EACA,IAAI1B,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACK,gBAAgB,IAAI,IAAI,CAACE,YAAY,CAACzJ,SAAS;EAC/D;EACA;EACA6K,SAASA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,WAAW,CAAC,CAAC;EACtB;EACA;EACAC,UAAUA,CAAA,EAAG;IACT,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAAC,IAAI,CAAC1B,gBAAgB,EAAE;MACxB;IACJ;IACA,IAAI,IAAI,CAACL,SAAS,EAAE;MAChB;MACA;MACA;MACA;MACA,IAAI,CAACf,KAAK,CAAC+C,GAAG,CAAC,MAAM;QACjB,IAAI,CAACzB,YAAY,CAACpJ,MAAM,CAACoB,IAAI,CAAC,CAAC;MACnC,CAAC,CAAC;IACN;IACA,IAAI,CAACgI,YAAY,CAACxJ,OAAO,GAAG,IAAI,CAACsJ,gBAAgB,GAAG,KAAK;IACzD,IAAI,IAAI,CAACiB,WAAW,IAAI,IAAI,CAACA,WAAW,CAACW,WAAW,CAAC,CAAC,EAAE;MACpD,IAAI,CAACX,WAAW,CAACY,MAAM,CAAC,CAAC;MACzB,IAAI,CAACC,2BAA2B,CAACxJ,WAAW,CAAC,CAAC;IAClD;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAAC6G,mBAAmB,EAAE;MAC3B;MACA;MACA;MACA;MACA,IAAI,CAAChJ,kBAAkB,CAAC4L,aAAa,CAAC,CAAC;IAC3C;EACJ;EACA;AACJ;AACA;AACA;EACIb,cAAcA,CAAA,EAAG;IACb,IAAI,IAAI,CAAClB,gBAAgB,EAAE;MACvB,IAAI,CAACiB,WAAW,CAACC,cAAc,CAAC,CAAC;IACrC;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIc,mBAAmBA,CAAA,EAAG;IACtB,OAAOxP,KAAK,CAAC,IAAI,CAACyN,gBAAgB,EAAE,IAAI,CAACC,YAAY,CAACtI,WAAW,CAACqK,MAAM,CAAC7B,IAAI,CAAClM,MAAM,CAAC,MAAM,IAAI,CAAC8L,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAACR,oBAAoB,EAAE,IAAI,CAAC0C,sBAAsB,CAAC,CAAC,EAAE,IAAI,CAACjB,WAAW,GACxL,IAAI,CAACA,WAAW,CAACkB,WAAW,CAAC,CAAC,CAAC/B,IAAI,CAAClM,MAAM,CAAC,MAAM,IAAI,CAAC8L,gBAAgB,CAAC,CAAC,GACxEvN,EAAE,CAAC,CAAC,CAAC,CAAC2N,IAAI;IAChB;IACAjM,GAAG,CAAC0E,KAAK,IAAKA,KAAK,YAAY7G,wBAAwB,GAAG6G,KAAK,GAAG,IAAK,CAAC,CAAC;EAC7E;EACA;EACA,IAAIuJ,YAAYA,CAAA,EAAG;IACf,IAAI,IAAI,CAAClC,YAAY,IAAI,IAAI,CAACA,YAAY,CAACtI,WAAW,EAAE;MACpD,OAAO,IAAI,CAACsI,YAAY,CAACtI,WAAW,CAACyK,UAAU;IACnD;IACA,OAAO,IAAI;EACf;EACA;EACAH,sBAAsBA,CAAA,EAAG;IACrB,OAAO1P,KAAK,CAACE,SAAS,CAAC,IAAI,CAACsM,SAAS,EAAE,OAAO,CAAC,EAAEtM,SAAS,CAAC,IAAI,CAACsM,SAAS,EAAE,UAAU,CAAC,EAAEtM,SAAS,CAAC,IAAI,CAACsM,SAAS,EAAE,UAAU,CAAC,CAAC,CAACoB,IAAI,CAAClM,MAAM,CAAC2E,KAAK,IAAI;MAChJ;MACA;MACA,MAAMyJ,WAAW,GAAG5R,eAAe,CAACmI,KAAK,CAAC;MAC1C,MAAM0J,SAAS,GAAG,IAAI,CAACxD,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC3I,WAAW,CAACsB,aAAa,GAAG,IAAI;MACpF,MAAM8K,YAAY,GAAG,IAAI,CAACC,WAAW,GAAG,IAAI,CAACA,WAAW,CAACnF,UAAU,CAAC5F,aAAa,GAAG,IAAI;MACxF,OAAQ,IAAI,CAACsI,gBAAgB,IACzBsC,WAAW,KAAK,IAAI,CAAC7D,QAAQ,CAAC/G,aAAa;MAC3C;MACA;MACA;MACA;MACA,IAAI,CAACsH,SAAS,CAACU,aAAa,KAAK,IAAI,CAACjB,QAAQ,CAAC/G,aAAa,KAC3D,CAAC6K,SAAS,IAAI,CAACA,SAAS,CAACG,QAAQ,CAACJ,WAAW,CAAC,CAAC,KAC/C,CAACE,YAAY,IAAI,CAACA,YAAY,CAACE,QAAQ,CAACJ,WAAW,CAAC,CAAC,IACtD,CAAC,CAAC,IAAI,CAACrB,WAAW,IAClB,CAAC,IAAI,CAACA,WAAW,CAAC0B,cAAc,CAACD,QAAQ,CAACJ,WAAW,CAAC;IAC9D,CAAC,CAAC,CAAC;EACP;EACA;EACAM,UAAUA,CAACxL,KAAK,EAAE;IACdyL,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM,IAAI,CAACC,gBAAgB,CAAC5L,KAAK,CAAC,CAAC;EAC9D;EACA;EACA6L,gBAAgBA,CAACC,EAAE,EAAE;IACjB,IAAI,CAACtD,SAAS,GAAGsD,EAAE;EACvB;EACA;EACAC,iBAAiBA,CAACD,EAAE,EAAE;IAClB,IAAI,CAACrD,UAAU,GAAGqD,EAAE;EACxB;EACA;EACAE,gBAAgBA,CAACC,UAAU,EAAE;IACzB,IAAI,CAAC5E,QAAQ,CAAC/G,aAAa,CAAC4L,QAAQ,GAAGD,UAAU;EACrD;EACAE,cAAcA,CAAC1K,KAAK,EAAE;IAClB,MAAM2K,OAAO,GAAG3K,KAAK,CAAC2K,OAAO;IAC7B,MAAMC,WAAW,GAAGpQ,cAAc,CAACwF,KAAK,CAAC;IACzC;IACA;IACA;IACA;IACA,IAAI2K,OAAO,KAAKlQ,MAAM,IAAI,CAACmQ,WAAW,EAAE;MACpC5K,KAAK,CAAC6K,cAAc,CAAC,CAAC;IAC1B;IACA,IAAI,IAAI,CAACtB,YAAY,IAAIoB,OAAO,KAAKjQ,KAAK,IAAI,IAAI,CAACoM,SAAS,IAAI,CAAC8D,WAAW,EAAE;MAC1E,IAAI,CAACrB,YAAY,CAACuB,qBAAqB,CAAC,CAAC;MACzC,IAAI,CAACC,gBAAgB,CAAC,CAAC;MACvB/K,KAAK,CAAC6K,cAAc,CAAC,CAAC;IAC1B,CAAC,MACI,IAAI,IAAI,CAACxD,YAAY,EAAE;MACxB,MAAM2D,cAAc,GAAG,IAAI,CAAC3D,YAAY,CAACtI,WAAW,CAACyK,UAAU;MAC/D,MAAMyB,UAAU,GAAGN,OAAO,KAAKhQ,QAAQ,IAAIgQ,OAAO,KAAK/P,UAAU;MACjE,IAAI+P,OAAO,KAAK9P,GAAG,IAAKoQ,UAAU,IAAI,CAACL,WAAW,IAAI,IAAI,CAAC9D,SAAU,EAAE;QACnE,IAAI,CAACO,YAAY,CAACtI,WAAW,CAACmM,SAAS,CAAClL,KAAK,CAAC;MAClD,CAAC,MACI,IAAIiL,UAAU,IAAI,IAAI,CAACE,QAAQ,CAAC,CAAC,EAAE;QACpC,IAAI,CAAC1C,SAAS,CAAC,CAAC;MACpB;MACA,IAAIwC,UAAU,IAAI,IAAI,CAAC5D,YAAY,CAACtI,WAAW,CAACyK,UAAU,KAAKwB,cAAc,EAAE;QAC3E,IAAI,CAACI,eAAe,CAAC,IAAI,CAAC/D,YAAY,CAACtI,WAAW,CAACsM,eAAe,IAAI,CAAC,CAAC;MAC5E;IACJ;EACJ;EACAC,YAAYA,CAACtL,KAAK,EAAE;IAChB,IAAIuL,MAAM,GAAGvL,KAAK,CAACuL,MAAM;IACzB,IAAIhN,KAAK,GAAGgN,MAAM,CAAChN,KAAK;IACxB;IACA,IAAIgN,MAAM,CAACxK,IAAI,KAAK,QAAQ,EAAE;MAC1BxC,KAAK,GAAGA,KAAK,IAAI,EAAE,GAAG,IAAI,GAAGiN,UAAU,CAACjN,KAAK,CAAC;IAClD;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACkN,cAAc,KAAKlN,KAAK,EAAE;MAC/B,IAAI,CAACkN,cAAc,GAAGlN,KAAK;MAC3B,IAAI,CAACwI,SAAS,CAACxI,KAAK,CAAC;MACrB,IAAI,IAAI,CAAC4M,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAChF,SAAS,CAACU,aAAa,KAAK7G,KAAK,CAACuL,MAAM,EAAE;QAClE,IAAI,CAAC9C,SAAS,CAAC,CAAC;MACpB;IACJ;EACJ;EACAiD,YAAYA,CAAA,EAAG;IACX,IAAI,CAAC,IAAI,CAAChF,mBAAmB,EAAE;MAC3B,IAAI,CAACA,mBAAmB,GAAG,IAAI;IACnC,CAAC,MACI,IAAI,IAAI,CAACyE,QAAQ,CAAC,CAAC,EAAE;MACtB,IAAI,CAACM,cAAc,GAAG,IAAI,CAAC7F,QAAQ,CAAC/G,aAAa,CAACN,KAAK;MACvD,IAAI,CAACmK,cAAc,CAAC,CAAC;MACrB,IAAI,CAACC,WAAW,CAAC,IAAI,CAAC;IAC1B;EACJ;EACAgD,YAAYA,CAAA,EAAG;IACX,IAAI,IAAI,CAACR,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAACrE,SAAS,EAAE;MACpC,IAAI,CAAC2B,SAAS,CAAC,CAAC;IACpB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,WAAWA,CAACiD,aAAa,GAAG,KAAK,EAAE;IAC/B,IAAI,IAAI,CAAC1F,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC2F,UAAU,KAAK,MAAM,EAAE;MAC1D,IAAID,aAAa,EAAE;QACf,IAAI,CAAC1F,UAAU,CAAC4F,oBAAoB,CAAC,CAAC;MAC1C,CAAC,MACI;QACD,IAAI,CAAC5F,UAAU,CAAC2F,UAAU,GAAG,QAAQ;MACzC;MACA,IAAI,CAACrF,sBAAsB,GAAG,IAAI;IACtC;EACJ;EACA;EACAqC,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACrC,sBAAsB,EAAE;MAC7B,IAAI,CAACN,UAAU,CAAC2F,UAAU,GAAG,MAAM;MACnC,IAAI,CAACrF,sBAAsB,GAAG,KAAK;IACvC;EACJ;EACA;AACJ;AACA;AACA;EACIuF,0BAA0BA,CAAA,EAAG;IACzB,MAAMC,WAAW,GAAG,IAAI,CAACjG,KAAK,CAAC0B,QAAQ,CAACF,IAAI,CAACnM,IAAI,CAAC,CAAC,CAAC,CAAC;IACrD,MAAM6Q,aAAa,GAAG,IAAI,CAAC5E,YAAY,CAACrI,OAAO,CAACsI,OAAO,CAACC,IAAI,CAAChM,GAAG,CAAC,MAAM,IAAI,CAAC2M,iBAAiB,CAACgE,mBAAmB,CAAC,CAAC,CAAC;IACpH;IACA;IACA1Q,KAAK,CAAC,CAAC,CAAC,CAAC;IACT;IACA,OAAQ7B,KAAK,CAACqS,WAAW,EAAEC,aAAa,CAAC,CACpC1E,IAAI;IACT;IACA;IACApM,SAAS,CAAC,MAAM;MACZ;MACA;MACA;MACA,IAAI,CAAC4K,KAAK,CAAC+C,GAAG,CAAC,MAAM;QACjB,MAAMqD,OAAO,GAAG,IAAI,CAACrF,SAAS;QAC9B,IAAI,CAACiE,gBAAgB,CAAC,CAAC;QACvB,IAAI,CAAC1D,YAAY,CAAC9H,cAAc,CAAC,CAAC;QAClC,IAAI,CAACjC,kBAAkB,CAAC4L,aAAa,CAAC,CAAC;QACvC,IAAI,IAAI,CAACpC,SAAS,EAAE;UAChB,IAAI,CAACsB,WAAW,CAACC,cAAc,CAAC,CAAC;UACjC;UACA;UACA;UACA;UACA,IAAI8D,OAAO,KAAK,IAAI,CAACrF,SAAS,EAAE;YAC5B,IAAI,CAACO,YAAY,CAACrJ,MAAM,CAACqB,IAAI,CAAC,CAAC;UACnC;QACJ;MACJ,CAAC,CAAC;MACF,OAAO,IAAI,CAAC8J,mBAAmB;IACnC,CAAC,CAAC;IACF;IACA/N,IAAI,CAAC,CAAC,CAAC;IACH;IAAA,CACC+D,SAAS,CAACa,KAAK,IAAI,IAAI,CAACoM,iBAAiB,CAACpM,KAAK,CAAC,CAAC;EAC1D;EACA;EACAuI,aAAaA,CAAA,EAAG;IACZ,IAAI,IAAI,CAACH,WAAW,EAAE;MAClB,IAAI,CAACQ,UAAU,CAAC,CAAC;MACjB,IAAI,CAACR,WAAW,CAACiE,OAAO,CAAC,CAAC;MAC1B,IAAI,CAACjE,WAAW,GAAG,IAAI;IAC3B;EACJ;EACA+B,gBAAgBA,CAAC5L,KAAK,EAAE;IACpB,MAAM+N,SAAS,GAAG,IAAI,CAACjF,YAAY,IAAI,IAAI,CAACA,YAAY,CAACvJ,WAAW,GAC9D,IAAI,CAACuJ,YAAY,CAACvJ,WAAW,CAACS,KAAK,CAAC,GACpCA,KAAK;IACX;IACA;IACA,MAAMgO,UAAU,GAAGD,SAAS,IAAI,IAAI,GAAGA,SAAS,GAAG,EAAE;IACrD;IACA;IACA,IAAI,IAAI,CAACpG,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAACsG,QAAQ,CAACjO,KAAK,GAAGgO,UAAU;IAC/C,CAAC,MACI;MACD,IAAI,CAAC3G,QAAQ,CAAC/G,aAAa,CAACN,KAAK,GAAGgO,UAAU;IAClD;IACA,IAAI,CAACd,cAAc,GAAGc,UAAU;EACpC;EACA;AACJ;AACA;AACA;AACA;EACIH,iBAAiBA,CAACpM,KAAK,EAAE;IACrB,MAAMnD,MAAM,GAAGmD,KAAK,IAAIA,KAAK,CAACnD,MAAM;IACpC,IAAIA,MAAM,EAAE;MACR,IAAI,CAAC4P,4BAA4B,CAAC5P,MAAM,CAAC;MACzC,IAAI,CAACsN,gBAAgB,CAACtN,MAAM,CAAC0B,KAAK,CAAC;MACnC,IAAI,CAACwI,SAAS,CAAClK,MAAM,CAAC0B,KAAK,CAAC;MAC5B,IAAI,CAAC8I,YAAY,CAACtH,gBAAgB,CAAClD,MAAM,CAAC;MAC1C,IAAI,CAAC+I,QAAQ,CAAC/G,aAAa,CAAC6N,KAAK,CAAC,CAAC;IACvC;IACA,IAAI,CAAC9D,UAAU,CAAC,CAAC;EACrB;EACA;AACJ;AACA;EACI6D,4BAA4BA,CAACE,IAAI,EAAE;IAC/B,IAAI,CAACtF,YAAY,CAACrI,OAAO,CAAC4N,OAAO,CAAC9P,MAAM,IAAI;MACxC,IAAIA,MAAM,KAAK6P,IAAI,IAAI7P,MAAM,CAAC+P,QAAQ,EAAE;QACpC/P,MAAM,CAACgQ,QAAQ,CAAC,CAAC;MACrB;IACJ,CAAC,CAAC;EACN;EACApE,cAAcA,CAAA,EAAG;IACb,IAAI,CAAC,IAAI,CAACrB,YAAY,KAAK,OAAOxF,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MACvE,MAAM4D,mCAAmC,CAAC,CAAC;IAC/C;IACA,IAAIsH,UAAU,GAAG,IAAI,CAAC3E,WAAW;IACjC,IAAI,CAAC2E,UAAU,EAAE;MACb,IAAI,CAACC,OAAO,GAAG,IAAIlS,cAAc,CAAC,IAAI,CAACuM,YAAY,CAAC/F,QAAQ,EAAE,IAAI,CAACwE,iBAAiB,EAAE;QAClF7J,EAAE,EAAE,IAAI,CAACiK,UAAU,EAAE+G,UAAU,CAAC;MACpC,CAAC,CAAC;MACFF,UAAU,GAAG,IAAI,CAAClH,QAAQ,CAACqH,MAAM,CAAC,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAAC;MAC3D,IAAI,CAAC/E,WAAW,GAAG2E,UAAU;MAC7B;MACA;MACAA,UAAU,CAACK,aAAa,CAAC,CAAC,CAACjO,SAAS,CAACa,KAAK,IAAI;QAC1C;QACA;QACA,IAAKA,KAAK,CAAC2K,OAAO,KAAKlQ,MAAM,IAAI,CAACD,cAAc,CAACwF,KAAK,CAAC,IAClDA,KAAK,CAAC2K,OAAO,KAAKhQ,QAAQ,IAAIH,cAAc,CAACwF,KAAK,EAAE,QAAQ,CAAE,EAAE;UACjE,IAAI,CAAC2G,oBAAoB,CAAC0G,IAAI,CAAC,CAAC;UAChC,IAAI,CAACtC,gBAAgB,CAAC,CAAC;UACvB;UACA;UACA/K,KAAK,CAACsN,eAAe,CAAC,CAAC;UACvBtN,KAAK,CAAC6K,cAAc,CAAC,CAAC;QAC1B;MACJ,CAAC,CAAC;MACF,IAAI,CAACpE,qBAAqB,GAAG,IAAI,CAACL,cAAc,CAAClH,MAAM,CAAC,CAAC,CAACC,SAAS,CAAC,MAAM;QACtE,IAAI,IAAI,CAAC2H,SAAS,IAAIiG,UAAU,EAAE;UAC9BA,UAAU,CAACQ,UAAU,CAAC;YAAEC,KAAK,EAAE,IAAI,CAACC,cAAc,CAAC;UAAE,CAAC,CAAC;QAC3D;MACJ,CAAC,CAAC;IACN,CAAC,MACI;MACD;MACA,IAAI,CAACvF,iBAAiB,CAACwF,SAAS,CAAC,IAAI,CAACC,oBAAoB,CAAC,CAAC,CAAC;MAC7DZ,UAAU,CAACQ,UAAU,CAAC;QAAEC,KAAK,EAAE,IAAI,CAACC,cAAc,CAAC;MAAE,CAAC,CAAC;IAC3D;IACA,IAAIV,UAAU,IAAI,CAACA,UAAU,CAAChE,WAAW,CAAC,CAAC,EAAE;MACzCgE,UAAU,CAACa,MAAM,CAAC,IAAI,CAACZ,OAAO,CAAC;MAC/B,IAAI,CAAC/D,2BAA2B,GAAG,IAAI,CAAC8C,0BAA0B,CAAC,CAAC;IACxE;IACA,MAAMI,OAAO,GAAG,IAAI,CAACrF,SAAS;IAC9B,IAAI,CAACO,YAAY,CAAC9H,cAAc,CAAC,CAAC;IAClC,IAAI,CAAC8H,YAAY,CAACxJ,OAAO,GAAG,IAAI,CAACsJ,gBAAgB,GAAG,IAAI;IACxD;IACA;IACA,IAAI,IAAI,CAACL,SAAS,IAAIqF,OAAO,KAAK,IAAI,CAACrF,SAAS,EAAE;MAC9C,IAAI,CAACO,YAAY,CAACrJ,MAAM,CAACqB,IAAI,CAAC,CAAC;IACnC;EACJ;EACA8N,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAIhT,aAAa,CAAC;MACrB0T,gBAAgB,EAAE,IAAI,CAACC,mBAAmB,CAAC,CAAC;MAC5C9H,cAAc,EAAE,IAAI,CAAC0B,eAAe,CAAC,CAAC;MACtC8F,KAAK,EAAE,IAAI,CAACC,cAAc,CAAC,CAAC;MAC5BM,SAAS,EAAE,IAAI,CAAC9H,IAAI;MACpB+H,UAAU,EAAE,IAAI,CAAC3H,SAAS,EAAE4H;IAChC,CAAC,CAAC;EACN;EACAH,mBAAmBA,CAAA,EAAG;IAClB,MAAMI,QAAQ,GAAG,IAAI,CAACrI,QAAQ,CACzBoB,QAAQ,CAAC,CAAC,CACVkH,mBAAmB,CAAC,IAAI,CAACR,oBAAoB,CAAC,CAAC,CAAC,CAChDS,sBAAsB,CAAC,KAAK,CAAC,CAC7BC,QAAQ,CAAC,KAAK,CAAC;IACpB,IAAI,CAAClG,qBAAqB,CAAC+F,QAAQ,CAAC;IACpC,IAAI,CAAChG,iBAAiB,GAAGgG,QAAQ;IACjC,OAAOA,QAAQ;EACnB;EACA;EACA/F,qBAAqBA,CAAC0F,gBAAgB,EAAE;IACpC;IACA;IACA,MAAMS,cAAc,GAAG,CACnB;MAAEC,OAAO,EAAE,OAAO;MAAEC,OAAO,EAAE,QAAQ;MAAEC,QAAQ,EAAE,OAAO;MAAEC,QAAQ,EAAE;IAAM,CAAC,EAC3E;MAAEH,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE,QAAQ;MAAEC,QAAQ,EAAE,KAAK;MAAEC,QAAQ,EAAE;IAAM,CAAC,CAC1E;IACD;IACA;IACA;IACA,MAAMV,UAAU,GAAG,IAAI,CAACW,WAAW;IACnC,MAAMC,cAAc,GAAG,CACnB;MAAEL,OAAO,EAAE,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,QAAQ,EAAE,OAAO;MAAEC,QAAQ,EAAE,QAAQ;MAAEV;IAAW,CAAC,EACvF;MAAEO,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE,KAAK;MAAEC,QAAQ,EAAE,KAAK;MAAEC,QAAQ,EAAE,QAAQ;MAAEV;IAAW,CAAC,CACtF;IACD,IAAIa,SAAS;IACb,IAAI,IAAI,CAAC5H,QAAQ,KAAK,OAAO,EAAE;MAC3B4H,SAAS,GAAGD,cAAc;IAC9B,CAAC,MACI,IAAI,IAAI,CAAC3H,QAAQ,KAAK,OAAO,EAAE;MAChC4H,SAAS,GAAGP,cAAc;IAC9B,CAAC,MACI;MACDO,SAAS,GAAG,CAAC,GAAGP,cAAc,EAAE,GAAGM,cAAc,CAAC;IACtD;IACAf,gBAAgB,CAACiB,aAAa,CAACD,SAAS,CAAC;EAC7C;EACAlB,oBAAoBA,CAAA,EAAG;IACnB,IAAI,IAAI,CAAC/D,WAAW,EAAE;MAClB,OAAO,IAAI,CAACA,WAAW,CAACnF,UAAU;IACtC;IACA,OAAO,IAAI,CAACyB,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC6I,yBAAyB,CAAC,CAAC,GAAG,IAAI,CAACnJ,QAAQ;EACxF;EACA6H,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACpG,YAAY,CAAC5F,UAAU,IAAI,IAAI,CAACuN,aAAa,CAAC,CAAC;EAC/D;EACA;EACAA,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACrB,oBAAoB,CAAC,CAAC,CAAC9O,aAAa,CAACoQ,qBAAqB,CAAC,CAAC,CAACzB,KAAK;EAClF;EACA;AACJ;AACA;AACA;EACIzC,gBAAgBA,CAAA,EAAG;IACf,MAAM1D,YAAY,GAAG,IAAI,CAACA,YAAY;IACtC,IAAIA,YAAY,CAACjK,qBAAqB,EAAE;MACpC;MACA;MACAiK,YAAY,CAACtI,WAAW,CAACmQ,kBAAkB,CAAC,CAAC;IACjD,CAAC,MACI;MACD7H,YAAY,CAACtI,WAAW,CAACoQ,aAAa,CAAC,CAAC,CAAC,CAAC;IAC9C;EACJ;EACA;EACAhE,QAAQA,CAAA,EAAG;IACP,MAAMiE,OAAO,GAAG,IAAI,CAACxJ,QAAQ,CAAC/G,aAAa;IAC3C,OAAO,CAACuQ,OAAO,CAACC,QAAQ,IAAI,CAACD,OAAO,CAAC3E,QAAQ,IAAI,CAAC,IAAI,CAAClE,qBAAqB;EAChF;EACA;EACAuB,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC3B,SAAS,EAAEmJ,WAAW,IAAIzH,MAAM;EAChD;EACA;EACAuD,eAAeA,CAAChM,KAAK,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMiI,YAAY,GAAG,IAAI,CAACA,YAAY;IACtC,MAAMkI,UAAU,GAAGnW,6BAA6B,CAACgG,KAAK,EAAEiI,YAAY,CAACrI,OAAO,EAAEqI,YAAY,CAACtE,YAAY,CAAC;IACxG,IAAI3D,KAAK,KAAK,CAAC,IAAImQ,UAAU,KAAK,CAAC,EAAE;MACjC;MACA;MACA;MACAlI,YAAY,CAAC3H,aAAa,CAAC,CAAC,CAAC;IACjC,CAAC,MACI,IAAI2H,YAAY,CAACzH,KAAK,EAAE;MACzB,MAAM9C,MAAM,GAAGuK,YAAY,CAACrI,OAAO,CAACM,OAAO,CAAC,CAAC,CAACF,KAAK,CAAC;MACpD,IAAItC,MAAM,EAAE;QACR,MAAMsS,OAAO,GAAGtS,MAAM,CAAC0S,eAAe,CAAC,CAAC;QACxC,MAAMC,iBAAiB,GAAGpW,wBAAwB,CAAC+V,OAAO,CAACM,SAAS,EAAEN,OAAO,CAACO,YAAY,EAAEtI,YAAY,CAACxH,aAAa,CAAC,CAAC,EAAEwH,YAAY,CAACzH,KAAK,CAACf,aAAa,CAAC8Q,YAAY,CAAC;QACxKtI,YAAY,CAAC3H,aAAa,CAAC+P,iBAAiB,CAAC;MACjD;IACJ;EACJ;AACJ;AACA9J,2BAA2B,CAACrF,IAAI,YAAAsP,oCAAApP,CAAA;EAAA,YAAAA,CAAA,IAAwFmF,2BAA2B,EAvqB5C7N,EAAE,CAAA2I,iBAAA,CAuqB4D3I,EAAE,CAAC6I,UAAU,GAvqB3E7I,EAAE,CAAA2I,iBAAA,CAuqBsFxG,IAAI,CAACC,OAAO,GAvqBpGpC,EAAE,CAAA2I,iBAAA,CAuqB+G3I,EAAE,CAAC+X,gBAAgB,GAvqBpI/X,EAAE,CAAA2I,iBAAA,CAuqB+I3I,EAAE,CAACgY,MAAM,GAvqB1JhY,EAAE,CAAA2I,iBAAA,CAuqBqK3I,EAAE,CAAC4I,iBAAiB,GAvqB3L5I,EAAE,CAAA2I,iBAAA,CAuqBsMqE,gCAAgC,GAvqBxOhN,EAAE,CAAA2I,iBAAA,CAuqBmPlG,IAAI,CAACwV,cAAc,MAvqBxQjY,EAAE,CAAA2I,iBAAA,CAuqBmSxF,cAAc,MAvqBnTnD,EAAE,CAAA2I,iBAAA,CAuqB0V1G,QAAQ,MAvqBpWjC,EAAE,CAAA2I,iBAAA,CAuqB+XpG,EAAE,CAAC2V,aAAa,GAvqBjZlY,EAAE,CAAA2I,iBAAA,CAuqB4ZzD,gCAAgC;AAAA,CAA4D;AACjmB2I,2BAA2B,CAAC9E,IAAI,kBAxqBuE/I,EAAE,CAAAgJ,iBAAA;EAAAC,IAAA,EAwqBG4E,2BAA2B;EAAAnE,MAAA;IAAA6F,YAAA;IAAAJ,QAAA;IAAA2C,WAAA;IAAA1C,qBAAA;IAAAS,oBAAA;EAAA;EAAAhG,QAAA,GAxqBhC7J,EAAE,CAAAmY,oBAAA;AAAA,EAwqB+X;AACxe;EAAA,QAAApO,SAAA,oBAAAA,SAAA,KAzqBuG/J,EAAE,CAAAgK,iBAAA,CAyqBd6D,2BAA2B,EAAc,CAAC;IACzH5E,IAAI,EAAE7I;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAE6I,IAAI,EAAEjJ,EAAE,CAAC6I;IAAW,CAAC,EAAE;MAAEI,IAAI,EAAE9G,IAAI,CAACC;IAAQ,CAAC,EAAE;MAAE6G,IAAI,EAAEjJ,EAAE,CAAC+X;IAAiB,CAAC,EAAE;MAAE9O,IAAI,EAAEjJ,EAAE,CAACgY;IAAO,CAAC,EAAE;MAAE/O,IAAI,EAAEjJ,EAAE,CAAC4I;IAAkB,CAAC,EAAE;MAAEK,IAAI,EAAEgB,SAAS;MAAEC,UAAU,EAAE,CAAC;QACnMjB,IAAI,EAAE5I,MAAM;QACZ8J,IAAI,EAAE,CAAC6C,gCAAgC;MAC3C,CAAC;IAAE,CAAC,EAAE;MAAE/D,IAAI,EAAExG,IAAI,CAACwV,cAAc;MAAE/N,UAAU,EAAE,CAAC;QAC5CjB,IAAI,EAAEnI;MACV,CAAC;IAAE,CAAC,EAAE;MAAEmI,IAAI,EAAE/F,EAAE,CAACkV,YAAY;MAAElO,UAAU,EAAE,CAAC;QACxCjB,IAAI,EAAEnI;MACV,CAAC,EAAE;QACCmI,IAAI,EAAE5I,MAAM;QACZ8J,IAAI,EAAE,CAAChH,cAAc;MACzB,CAAC,EAAE;QACC8F,IAAI,EAAElI;MACV,CAAC;IAAE,CAAC,EAAE;MAAEkI,IAAI,EAAEgB,SAAS;MAAEC,UAAU,EAAE,CAAC;QAClCjB,IAAI,EAAEnI;MACV,CAAC,EAAE;QACCmI,IAAI,EAAE5I,MAAM;QACZ8J,IAAI,EAAE,CAAClI,QAAQ;MACnB,CAAC;IAAE,CAAC,EAAE;MAAEgH,IAAI,EAAE1G,EAAE,CAAC2V;IAAc,CAAC,EAAE;MAAEjP,IAAI,EAAEgB,SAAS;MAAEC,UAAU,EAAE,CAAC;QAC9DjB,IAAI,EAAEnI;MACV,CAAC,EAAE;QACCmI,IAAI,EAAE5I,MAAM;QACZ8J,IAAI,EAAE,CAACjF,gCAAgC;MAC3C,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAEqK,YAAY,EAAE,CAAC;MAC3CtG,IAAI,EAAE1I,KAAK;MACX4J,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAEgF,QAAQ,EAAE,CAAC;MACXlG,IAAI,EAAE1I,KAAK;MACX4J,IAAI,EAAE,CAAC,yBAAyB;IACpC,CAAC,CAAC;IAAE2H,WAAW,EAAE,CAAC;MACd7I,IAAI,EAAE1I,KAAK;MACX4J,IAAI,EAAE,CAAC,4BAA4B;IACvC,CAAC,CAAC;IAAEiF,qBAAqB,EAAE,CAAC;MACxBnG,IAAI,EAAE1I,KAAK;MACX4J,IAAI,EAAE,CAAC,cAAc;IACzB,CAAC,CAAC;IAAE0F,oBAAoB,EAAE,CAAC;MACvB5G,IAAI,EAAE1I,KAAK;MACX4J,IAAI,EAAE,CAAC,yBAAyB;IACpC,CAAC;EAAE,CAAC;AAAA;AAChB,MAAMsD,sBAAsB,SAASI,2BAA2B,CAAC;EAC7D/I,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGwF,SAAS,CAAC;IACnB,IAAI,CAACuM,WAAW,GAAG,8BAA8B;EACrD;AACJ;AACApJ,sBAAsB,CAACjF,IAAI;EAAA,IAAA6P,mCAAA;EAAA,gBAAAC,+BAAA5P,CAAA;IAAA,QAAA2P,mCAAA,KAAAA,mCAAA,GAvtB4ErY,EAAE,CAAAyK,qBAAA,CAutBUgD,sBAAsB,IAAA/E,CAAA,IAAtB+E,sBAAsB;EAAA;AAAA,GAAqD;AAC9LA,sBAAsB,CAAC1E,IAAI,kBAxtB4E/I,EAAE,CAAAgJ,iBAAA;EAAAC,IAAA,EAwtBFwE,sBAAsB;EAAA7C,SAAA;EAAAM,SAAA;EAAAqN,QAAA;EAAAC,YAAA,WAAAC,oCAAA5U,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAxtBtB7D,EAAE,CAAA0Y,UAAA,qBAAAC,kDAAA;QAAA,OAwtBF7U,GAAA,CAAA8P,YAAA,CAAa,CAAC;MAAA,oBAAAgF,+CAAA;QAAA,OAAd9U,GAAA,CAAAoL,UAAA,CAAW,CAAC;MAAA,qBAAA2J,gDAAAC,MAAA;QAAA,OAAZhV,GAAA,CAAA0P,YAAA,CAAAsF,MAAmB,CAAC;MAAA,uBAAAC,kDAAAD,MAAA;QAAA,OAApBhV,GAAA,CAAA8O,cAAA,CAAAkG,MAAqB,CAAC;MAAA,qBAAAE,gDAAA;QAAA,OAAtBlV,GAAA,CAAA+P,YAAA,CAAa,CAAC;MAAA;IAAA;IAAA,IAAAhQ,EAAA;MAxtBd7D,EAAE,CAAAwE,WAAA,iBAAAV,GAAA,CAAAsL,qBAAA,UAAAtL,GAAA,CAAA+L,oBAAA,2CAAA/L,GAAA,CAAA+L,oBAAA,2CAAA/L,GAAA,CAAAkL,SAAA,IAAAlL,GAAA,CAAA2N,YAAA,GAAA3N,GAAA,CAAA2N,YAAA,CAAAtN,EAAA,0BAAAL,GAAA,CAAA+L,oBAAA,UAAA/L,GAAA,CAAAkL,SAAA,CAAAiK,QAAA,iBAAAnV,GAAA,CAAA+L,oBAAA,KAAA/L,GAAA,CAAAkL,SAAA,UAAAlL,GAAA,CAAAyL,YAAA,kBAAAzL,GAAA,CAAAyL,YAAA,CAAApL,EAAA,mBAAAL,GAAA,CAAA+L,oBAAA;IAAA;EAAA;EAAAzE,QAAA;EAAAvB,QAAA,GAAF7J,EAAE,CAAAqL,kBAAA,CAwtBizB,CAACmC,+BAA+B,CAAC,GAxtBp1BxN,EAAE,CAAA8J,0BAAA;AAAA,EAwtBg6B;AACzgC;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAztBuG/J,EAAE,CAAAgK,iBAAA,CAytBdyD,sBAAsB,EAAc,CAAC;IACpHxE,IAAI,EAAE7I,SAAS;IACf+J,IAAI,EAAE,CAAC;MACCiC,QAAQ,EAAE,mDAAmD;MAC7DG,IAAI,EAAE;QACF,OAAO,EAAE,0BAA0B;QACnC,qBAAqB,EAAE,uBAAuB;QAC9C,aAAa,EAAE,0CAA0C;QACzD,0BAA0B,EAAE,sCAAsC;QAClE,8BAA8B,EAAE,sDAAsD;QACtF,sBAAsB,EAAE,oDAAoD;QAC5E,kBAAkB,EAAE,gEAAgE;QACpF,sBAAsB,EAAE,yCAAyC;QACjE;QACA;QACA,WAAW,EAAE,gBAAgB;QAC7B,QAAQ,EAAE,cAAc;QACxB,SAAS,EAAE,sBAAsB;QACjC,WAAW,EAAE,wBAAwB;QACrC,SAAS,EAAE;MACf,CAAC;MACDnB,QAAQ,EAAE,wBAAwB;MAClCoB,SAAS,EAAE,CAACgB,+BAA+B;IAC/C,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM0L,qBAAqB,CAAC;AAE5BA,qBAAqB,CAAC1Q,IAAI,YAAA2Q,8BAAAzQ,CAAA;EAAA,YAAAA,CAAA,IAAwFwQ,qBAAqB;AAAA,CAAkD;AACzLA,qBAAqB,CAACE,IAAI,kBA7vB6EpZ,EAAE,CAAAqZ,gBAAA;EAAApQ,IAAA,EA6vBUiQ;AAAqB,EAK7G;AAC3BA,qBAAqB,CAACI,IAAI,kBAnwB6EtZ,EAAE,CAAAuZ,gBAAA;EAAA/M,SAAA,EAmwB4C,CAACa,iDAAiD,CAAC;EAAAmM,OAAA,GAAY,CAAClX,aAAa,EAAEd,eAAe,EAAEC,eAAe,EAAES,YAAY,CAAC,EAAEM,mBAAmB,EAChShB,eAAe,EACfC,eAAe;AAAA,EAAI;AAC3B;EAAA,QAAAsI,SAAA,oBAAAA,SAAA,KAtwBuG/J,EAAE,CAAAgK,iBAAA,CAswBdkP,qBAAqB,EAAc,CAAC;IACnHjQ,IAAI,EAAEjI,QAAQ;IACdmJ,IAAI,EAAE,CAAC;MACCqP,OAAO,EAAE,CAAClX,aAAa,EAAEd,eAAe,EAAEC,eAAe,EAAES,YAAY,CAAC;MACxEuX,OAAO,EAAE,CACLpP,eAAe,EACfoD,sBAAsB,EACtBZ,qBAAqB,EACrBrK,mBAAmB,EACnBhB,eAAe,EACfC,eAAe,CAClB;MACDiY,YAAY,EAAE,CAACrP,eAAe,EAAEoD,sBAAsB,EAAEZ,qBAAqB,CAAC;MAC9EL,SAAS,EAAE,CAACa,iDAAiD;IACjE,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASnI,gCAAgC,EAAEG,wCAAwC,EAAE2H,gCAAgC,EAAEC,wCAAwC,EAAEI,iDAAiD,EAAEG,+BAA+B,EAAEnD,eAAe,EAAE6O,qBAAqB,EAAErM,qBAAqB,EAAEhI,4BAA4B,EAAE4I,sBAAsB,EAAElI,oBAAoB,EAAEmH,0BAA0B,EAAEmB,2BAA2B,EAAEF,mCAAmC","ignoreList":[]},"metadata":{},"sourceType":"module"}