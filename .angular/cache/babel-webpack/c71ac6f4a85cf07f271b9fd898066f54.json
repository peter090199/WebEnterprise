{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { _url } from 'src/global-variables';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ImageService = /*#__PURE__*/(() => {\n  class ImageService {\n    constructor(http) {\n      this.http = http;\n    }\n    getAuthToken() {\n      return localStorage.getItem('token') || ''; // Fetch the token from localStorage or other storage\n    }\n    createParams() {\n      return new HttpParams().set('desc_code', 'top_navigation');\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error); // Log the error for debugging\n        return of(result);\n      };\n    }\n    createHeaders() {\n      const token = this.getAuthToken();\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n    }\n    uploadImages(formData) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}upload_images`, formData, {\n        headers\n      });\n    }\n    saveAndUpdate(formData) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}saveOrUpdateImages`, formData, {\n        headers\n      });\n    }\n    //update\n    updateImages(formData) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}updateImages`, formData, {\n        headers\n      });\n    }\n    //get\n    getImages() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}get_images`, {\n        headers\n      });\n    }\n    //public\n    getPublicImages() {\n      return this.http.get(`${_url}websitemodule/getImagesPublic`);\n    }\n    get_blogByPublic() {\n      return this.http.get(`${_url}websitemodule/get_blogByPublic`);\n    }\n    deleteImage(transCode) {\n      const headers = this.createHeaders();\n      return this.http.delete(`${_url}deleteByTransCode/${transCode}`, {\n        headers\n      });\n    }\n  }\n  ImageService.ɵfac = function ImageService_Factory(t) {\n    return new (t || ImageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ImageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImageService,\n    factory: ImageService.ɵfac,\n    providedIn: 'root'\n  });\n  return ImageService;\n})();","map":null,"metadata":{},"sourceType":"module"}