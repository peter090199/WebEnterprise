{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { catchError, of } from 'rxjs';\nimport { _url } from 'src/global-variables';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SecurityRolesService = /*#__PURE__*/(() => {\n  class SecurityRolesService {\n    constructor(http) {\n      this.http = http;\n    }\n    getAuthToken() {\n      return localStorage.getItem('token') || ''; // Fetch the token from localStorage or other storage\n    }\n    createHeaders() {\n      const token = this.getAuthToken();\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    }\n    createParams() {\n      return new HttpParams().set('desc_code', 'top_navigation');\n    }\n    getSecurityRoles() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}security`, {\n        headers\n      }).pipe(catchError(error => this.handleAuthError(error)));\n    }\n    handleAuthError(error) {\n      if (error.status === 401) {\n        console.error('Unauthorized: Please log in.');\n        alert('Unauthorized access. Please log in again.');\n      } else if (error.status === 403) {\n        console.error('Forbidden: You do not have permission to access this resource.');\n        alert('Forbidden: You do not have the required permissions.');\n      } else {\n        console.error('An error occurred:', error.message);\n        alert('An unexpected error occurred. Please try again.');\n      }\n      return of(null); // Return an observable with a fallback value\n    }\n    getData() {\n      const headers = this.createHeaders();\n      const params = this.createParams();\n      return this.http.get(`${_url}accessmenu`, {\n        headers,\n        params\n      });\n    }\n    getDataUserAccount() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}userAccount`, {\n        headers\n      });\n    }\n    getSecurityRolesByDesc_Code(rolecode) {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}security/${rolecode}`, {\n        headers\n      });\n    }\n    postData(endpoint, body) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}${endpoint}`, body, {\n        headers\n      });\n    }\n    putData(endpoint, body) {\n      const headers = this.createHeaders();\n      return this.http.put(`${_url}${endpoint}`, body, {\n        headers\n      });\n    }\n    deleteData(endpoint) {\n      const headers = this.createHeaders();\n      return this.http.delete(`${_url}${endpoint}`, {\n        headers\n      });\n    }\n    submitData(formData) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}security`, formData, {\n        headers\n      });\n    }\n  }\n  SecurityRolesService.ɵfac = function SecurityRolesService_Factory(t) {\n    return new (t || SecurityRolesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SecurityRolesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SecurityRolesService,\n    factory: SecurityRolesService.ɵfac,\n    providedIn: 'root'\n  });\n  return SecurityRolesService;\n})();","map":null,"metadata":{},"sourceType":"module"}