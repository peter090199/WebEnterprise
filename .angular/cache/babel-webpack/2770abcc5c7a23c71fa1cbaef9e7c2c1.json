{"ast":null,"code":"import * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst _c0 = [\"mat-menu-item\", \"\"];\nfunction MatMenuItem__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"polygon\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = [\"*\"];\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1._handleKeydown($event);\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.closed.emit(\"click\");\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4._onAnimationStart($event);\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5._onAnimationDone($event);\n    });\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n  // TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n  constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n    this._template = _template;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._injector = _injector;\n    this._viewContainerRef = _viewContainerRef;\n    this._document = _document;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Emits when the menu content has been attached. */\n    this._attached = new Subject();\n  }\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n    this.detach();\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n    }\n    const element = this._template.elementRef.nativeElement;\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode.insertBefore(this._outlet.outletElement, element);\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    this._changeDetectorRef?.markForCheck();\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n_MatMenuContentBase.ɵfac = function _MatMenuContentBase_Factory(t) {\n  return new (t || _MatMenuContentBase)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n_MatMenuContentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuContentBase\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuContentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent extends _MatMenuContentBase {}\nMatMenuContent.ɵfac = /* @__PURE__ */function () {\n  let ɵMatMenuContent_BaseFactory;\n  return function MatMenuContent_Factory(t) {\n    return (ɵMatMenuContent_BaseFactory || (ɵMatMenuContent_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuContent)))(t || MatMenuContent);\n  };\n}();\nMatMenuContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatMenuContent,\n  selectors: [[\"ng-template\", \"matMenuContent\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_CONTENT,\n    useExisting: MatMenuContent\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matMenuContent]',\n      providers: [{\n        provide: MAT_MENU_CONTENT,\n        useExisting: MatMenuContent\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` + `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n  constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n    super();\n    this._elementRef = _elementRef;\n    this._document = _document;\n    this._focusMonitor = _focusMonitor;\n    this._parentMenu = _parentMenu;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** ARIA role for the menu item. */\n    this.role = 'menuitem';\n    /** Stream that emits when the menu item is hovered. */\n    this._hovered = new Subject();\n    /** Stream that emits when the menu item is focused. */\n    this._focused = new Subject();\n    /** Whether the menu item is highlighted. */\n    this._highlighted = false;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    this._triggersSubmenu = false;\n    _parentMenu?.addItem?.(this);\n  }\n  /** Focuses the menu item. */\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n    this._focused.next(this);\n  }\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n    this._hovered.complete();\n    this._focused.complete();\n  }\n  /** Used to set the `tabindex`. */\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /** Returns the host DOM element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel() {\n    const clone = this._elementRef.nativeElement.cloneNode(true);\n    const icons = clone.querySelectorAll('mat-icon, .material-icons');\n    // Strip away icons so they don't show up in the text.\n    for (let i = 0; i < icons.length; i++) {\n      icons[i].remove();\n    }\n    return clone.textContent?.trim() || '';\n  }\n  _setHighlighted(isHighlighted) {\n    // We need to mark this for check for the case where the content is coming from a\n    // `matMenuContent` whose change detection tree is at the declaration position,\n    // not the insertion position. See #23175.\n    // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n    this._highlighted = isHighlighted;\n    this._changeDetectorRef?.markForCheck();\n  }\n  _hasFocus() {\n    return this._document && this._document.activeElement === this._getHostElement();\n  }\n}\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n  return new (t || MatMenuItem)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nMatMenuItem.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatMenuItem,\n  selectors: [[\"\", \"mat-menu-item\", \"\"]],\n  hostAttrs: [1, \"mat-focus-indicator\"],\n  hostVars: 10,\n  hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n        return ctx._checkDisabled($event);\n      })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n        return ctx._handleMouseEnter();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n      i0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    role: \"role\"\n  },\n  exportAs: [\"matMenuItem\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 3,\n  vars: 3,\n  consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"], [\"class\", \"mat-menu-submenu-icon\", \"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 4, \"ngIf\"], [\"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 1, \"mat-menu-submenu-icon\"], [\"points\", \"0,0 5,5 0,10\"]],\n  template: function MatMenuItem_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n      i0.ɵɵelement(1, \"div\", 0);\n      i0.ɵɵtemplate(2, MatMenuItem__svg_svg_2_Template, 2, 0, \"svg\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx._triggersSubmenu);\n    }\n  },\n  directives: [i2.MatRipple, i3.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuItem, [{\n    type: Component,\n    args: [{\n      selector: '[mat-menu-item]',\n      exportAs: 'matMenuItem',\n      inputs: ['disabled', 'disableRipple'],\n      host: {\n        '[attr.role]': 'role',\n        '[class.mat-menu-item]': 'true',\n        '[class.mat-menu-item-highlighted]': '_highlighted',\n        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        'class': 'mat-focus-indicator',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n  constructor(_elementRef, _ngZone, _defaultOptions,\n  // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n  _changeDetectorRef) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._xPosition = this._defaultOptions.xPosition;\n    this._yPosition = this._defaultOptions.yPosition;\n    /** Only the direct descendant menu items. */\n    this._directDescendantItems = new QueryList();\n    /** Subscription to tab events on the menu panel */\n    this._tabSubscription = Subscription.EMPTY;\n    /** Config object to be passed into the menu's ngClass */\n    this._classList = {};\n    /** Current state of the panel animation. */\n    this._panelAnimationState = 'void';\n    /** Emits whenever an animation on the menu completes. */\n    this._animationDone = new Subject();\n    /** Class or list of classes to be added to the overlay panel. */\n    this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n    /** Class to be added to the backdrop element. */\n    this.backdropClass = this._defaultOptions.backdropClass;\n    this._overlapTrigger = this._defaultOptions.overlapTrigger;\n    this._hasBackdrop = this._defaultOptions.hasBackdrop;\n    /** Event emitted when the menu is closed. */\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n    this.close = this.closed;\n    this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n  }\n  /** Position of the menu in the X axis. */\n  get xPosition() {\n    return this._xPosition;\n  }\n  set xPosition(value) {\n    if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n  /** Position of the menu in the Y axis. */\n  get yPosition() {\n    return this._yPosition;\n  }\n  set yPosition(value) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n  /** Whether the menu should overlap its trigger. */\n  get overlapTrigger() {\n    return this._overlapTrigger;\n  }\n  set overlapTrigger(value) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  /** Whether the menu has a backdrop. */\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  set panelClass(classes) {\n    const previousPanelClass = this._previousPanelClass;\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach(className => {\n        this._classList[className] = false;\n      });\n    }\n    this._previousPanelClass = classes;\n    if (classes && classes.length) {\n      classes.split(' ').forEach(className => {\n        this._classList[className] = true;\n      });\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  get classList() {\n    return this.panelClass;\n  }\n  set classList(classes) {\n    this.panelClass = classes;\n  }\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n    this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    this._directDescendantItems.changes.subscribe(itemsList => {\n      // Move focus to another item, if the active item is removed from the list.\n      // We need to debounce the callback, because multiple items might be removed\n      // in quick succession.\n      const manager = this._keyManager;\n      if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n        const items = itemsList.toArray();\n        const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n        if (items[index] && !items[index].disabled) {\n          manager.setActiveItem(index);\n        } else {\n          manager.setNextItemActive();\n        }\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered() {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes;\n    return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._hovered))));\n  }\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item) {}\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item) {}\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n        break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n        manager.onKeydown(event);\n        return;\n    }\n    // Don't allow the event to propagate if we've already handled it, or it may\n    // end up reaching other overlays that were opened earlier (see #22694).\n    event.stopPropagation();\n  }\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin = 'program') {\n    // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      let menuPanel = null;\n      if (this._directDescendantItems.length) {\n        // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n        // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n        // because the panel is inside an `ng-template`. We work around it by starting from one of\n        // the items and walking up the DOM.\n        menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n      }\n      // If an item in the menuPanel is already focused, avoid overriding the focus.\n      if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && menuPanel) {\n          menuPanel.focus();\n        }\n      }\n    });\n  }\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth) {\n    // The elevation starts at the base and increases by one for each level.\n    // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n    const elevation = Math.min(this._baseElevation + depth, 24);\n    const newElevation = `${this._elevationPrefix}${elevation}`;\n    const customElevation = Object.keys(this._classList).find(className => {\n      return className.startsWith(this._elevationPrefix);\n    });\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n    // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n    this._changeDetectorRef?.markForCheck();\n  }\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n  _onAnimationStart(event) {\n    this._isAnimating = true;\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  _updateDirectDescendants() {\n    this._allItems.changes.pipe(startWith(this._allItems)).subscribe(items => {\n      this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n      this._directDescendantItems.notifyOnChanges();\n    });\n  }\n}\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) {\n  return new (t || _MatMenuBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n_MatMenuBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuBase,\n  contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allItems = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n    }\n  },\n  viewQuery: function _MatMenuBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TemplateRef, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    }\n  },\n  inputs: {\n    backdropClass: \"backdropClass\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    xPosition: \"xPosition\",\n    yPosition: \"yPosition\",\n    overlapTrigger: \"overlapTrigger\",\n    hasBackdrop: \"hasBackdrop\",\n    panelClass: [\"class\", \"panelClass\"],\n    classList: \"classList\"\n  },\n  outputs: {\n    closed: \"closed\",\n    close: \"close\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    _allItems: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: true\n      }]\n    }],\n    backdropClass: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    templateRef: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    items: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: false\n      }]\n    }],\n    lazyContent: [{\n      type: ContentChild,\n      args: [MAT_MENU_CONTENT]\n    }],\n    overlapTrigger: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['class']\n    }],\n    classList: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }]\n  });\n})();\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n  constructor(elementRef, ngZone, defaultOptions, changeDetectorRef) {\n    super(elementRef, ngZone, defaultOptions, changeDetectorRef);\n    this._elevationPrefix = 'mat-elevation-z';\n    this._baseElevation = 4;\n  }\n}\nMatMenu.ɵfac = function MatMenu_Factory(t) {\n  return new (t || MatMenu)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nMatMenu.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatMenu,\n  selectors: [[\"mat-menu\"]],\n  hostVars: 3,\n  hostBindings: function MatMenu_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n    }\n  },\n  exportAs: [\"matMenu\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_PANEL,\n    useExisting: MatMenu\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n  template: function MatMenu_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    }\n  },\n  directives: [i3.NgClass],\n  styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::before{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenu, [{\n    type: Component,\n    args: [{\n      selector: 'mat-menu',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matMenu',\n      host: {\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null'\n      },\n      animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n      providers: [{\n        provide: MAT_MENU_PANEL,\n        useExisting: MatMenu\n      }],\n      template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::before{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\nclass _MatMenuTriggerBase {\n  constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu,\n  // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n  // tslint:disable-next-line: lightweight-tokens\n  _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n    this._overlay = _overlay;\n    this._element = _element;\n    this._viewContainerRef = _viewContainerRef;\n    this._menuItemInstance = _menuItemInstance;\n    this._dir = _dir;\n    this._focusMonitor = _focusMonitor;\n    this._ngZone = _ngZone;\n    this._overlayRef = null;\n    this._menuOpen = false;\n    this._closingActionsSubscription = Subscription.EMPTY;\n    this._hoverSubscription = Subscription.EMPTY;\n    this._menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    this._handleTouchStart = event => {\n      if (!isFakeTouchstartFromScreenReader(event)) {\n        this._openedBy = 'touch';\n      }\n    };\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n    this._openedBy = undefined;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n    this.restoreFocus = true;\n    /** Event emitted when the associated menu is opened. */\n    this.menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    this.onMenuOpen = this.menuOpened;\n    /** Event emitted when the associated menu is closed. */\n    this.menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    this.onMenuClose = this.menuClosed;\n    this._scrollStrategy = scrollStrategy;\n    this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  get _deprecatedMatMenuTriggerFor() {\n    return this.menu;\n  }\n  set _deprecatedMatMenuTriggerFor(v) {\n    this.menu = v;\n  }\n  /** References the menu instance that the trigger is associated with. */\n  get menu() {\n    return this._menu;\n  }\n  set menu(menu) {\n    if (menu === this._menu) {\n      return;\n    }\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n    if (menu) {\n      if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n      this._menuCloseSubscription = menu.close.subscribe(reason => {\n        this._destroyMenu(reason);\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n          this._parentMaterialMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n  /** Whether the menu is open. */\n  get menuOpen() {\n    return this._menuOpen;\n  }\n  /** The text direction of the containing app. */\n  get dir() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu() {\n    return !!(this._menuItemInstance && this._parentMaterialMenu);\n  }\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu() {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n  /** Opens the menu. */\n  openMenu() {\n    if (this._menuOpen) {\n      return;\n    }\n    this._checkMenu();\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n    const positionStrategy = overlayConfig.positionStrategy;\n    this._setPosition(positionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n    if (this.menu instanceof _MatMenuBase) {\n      this.menu._startAnimation();\n      this.menu._directDescendantItems.changes.pipe(takeUntil(this.menu.close)).subscribe(() => {\n        // Re-adjust the position without locking when the amount of items\n        // changes so that the overlay is allowed to pick a new optimal position.\n        positionStrategy.withLockedPosition(false).reapplyLastPosition();\n        positionStrategy.withLockedPosition(true);\n      });\n    }\n  }\n  /** Closes the menu. */\n  closeMenu() {\n    this.menu.close.emit();\n  }\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Updates the position of the menu to ensure that it fits all options within the viewport.\n   */\n  updatePosition() {\n    this._overlayRef?.updatePosition();\n  }\n  /** Closes the menu and does the necessary cleanup. */\n  _destroyMenu(reason) {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n    const menu = this.menu;\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n    // Always restore focus if the user is navigating using the keyboard or the menu was opened\n    // programmatically. We don't restore for non-root triggers, because it can prevent focus\n    // from making it back to the root trigger when closing a long chain of menus by clicking\n    // on the backdrop.\n    if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n      this.focus(this._openedBy);\n    }\n    this._openedBy = undefined;\n    if (menu instanceof _MatMenuBase) {\n      menu._resetAnimation();\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone.pipe(filter(event => event.toState === 'void'), take(1),\n        // Interrupt if the content got re-attached.\n        takeUntil(menu.lazyContent._attached)).subscribe({\n          next: () => menu.lazyContent.detach(),\n          // No matter whether the content got re-attached, reset the menu.\n          complete: () => this._setIsMenuOpen(false)\n        });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  _initMenu() {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this.menu.focusFirstItem(this._openedBy || 'program');\n    this._setIsMenuOpen(true);\n  }\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  _setMenuElevation() {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n      this.menu.setElevation(depth);\n    }\n  }\n  // set state rather than toggle to support triggers sharing a menu\n  _setIsMenuOpen(isOpen) {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._setHighlighted(isOpen);\n    }\n  }\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  _checkMenu() {\n    if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuMissingError();\n    }\n  }\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  _createOverlay() {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy);\n      this._overlayRef = this._overlay.create(config);\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n    return this._overlayRef;\n  }\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: this.menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  _subscribeToPositions(position) {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n        // @breaking-change 15.0.0 Remove null check for `ngZone`.\n        // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n        // updating something in the view so we need to bring it back in.\n        if (this._ngZone) {\n          this._ngZone.run(() => this.menu.setPositionClasses(posX, posY));\n        } else {\n          this.menu.setPositionClasses(posX, posY);\n        }\n      });\n    }\n  }\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  _setPosition(positionStrategy) {\n    let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n    let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n    positionStrategy.withPositions([{\n      originX,\n      originY,\n      overlayX,\n      overlayY,\n      offsetY\n    }, {\n      originX: originFallbackX,\n      originY,\n      overlayX: overlayFallbackX,\n      overlayY,\n      offsetY\n    }, {\n      originX,\n      originY: originFallbackY,\n      overlayX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }, {\n      originX: originFallbackX,\n      originY: originFallbackY,\n      overlayX: overlayFallbackX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }]);\n  }\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  _menuClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n    const detachments = this._overlayRef.detachments();\n    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n    const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event) {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : undefined;\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    // Pressing enter on the trigger will trigger the click handler later.\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this._openedBy = 'keyboard';\n    }\n    if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n      this._openedBy = 'keyboard';\n      this.openMenu();\n    }\n  }\n  /** Handles click events on the trigger. */\n  _handleClick(event) {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n  /** Handles the cases where the user hovers over the trigger. */\n  _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n      return;\n    }\n    this._hoverSubscription = this._parentMaterialMenu._hovered()\n    // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n    // with different data and triggers), we have to delay it by a tick to ensure that\n    // it won't be closed immediately after it is opened.\n    .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {\n      this._openedBy = 'mouse';\n      // If the same menu is used between multiple triggers, it might still be animating\n      // while the new trigger tries to re-open it. Wait for the animation to finish\n      // before doing so. Also interrupt if the user moves to another item.\n      if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n        // We need the `delay(0)` here in order to avoid\n        // 'changed after checked' errors in some cases. See #12194.\n        this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered())).subscribe(() => this.openMenu());\n      } else {\n        this.openMenu();\n      }\n    });\n  }\n  /** Gets the portal that should be attached to the overlay. */\n  _getPortal() {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n    return this._portal;\n  }\n}\n_MatMenuTriggerBase.ɵfac = function _MatMenuTriggerBase_Factory(t) {\n  return new (t || _MatMenuTriggerBase)(i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(MatMenuItem, 10), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n_MatMenuTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuTriggerBase,\n  hostAttrs: [\"aria-haspopup\", \"true\"],\n  hostVars: 2,\n  hostBindings: function _MatMenuTriggerBase_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function _MatMenuTriggerBase_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"mousedown\", function _MatMenuTriggerBase_mousedown_HostBindingHandler($event) {\n        return ctx._handleMousedown($event);\n      })(\"keydown\", function _MatMenuTriggerBase_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n    }\n  },\n  inputs: {\n    _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n    menu: [\"matMenuTriggerFor\", \"menu\"],\n    menuData: [\"matMenuTriggerData\", \"menuData\"],\n    restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"]\n  },\n  outputs: {\n    menuOpened: \"menuOpened\",\n    onMenuOpen: \"onMenuOpen\",\n    menuClosed: \"menuClosed\",\n    onMenuClose: \"onMenuClose\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuTriggerBase, [{\n    type: Directive,\n    args: [{\n      host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'menuOpen || null',\n        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n        '(click)': '_handleClick($event)',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: MatMenuItem,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i3$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    _deprecatedMatMenuTriggerFor: [{\n      type: Input,\n      args: ['mat-menu-trigger-for']\n    }],\n    menu: [{\n      type: Input,\n      args: ['matMenuTriggerFor']\n    }],\n    menuData: [{\n      type: Input,\n      args: ['matMenuTriggerData']\n    }],\n    restoreFocus: [{\n      type: Input,\n      args: ['matMenuTriggerRestoreFocus']\n    }],\n    menuOpened: [{\n      type: Output\n    }],\n    onMenuOpen: [{\n      type: Output\n    }],\n    menuClosed: [{\n      type: Output\n    }],\n    onMenuClose: [{\n      type: Output\n    }]\n  });\n})();\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {}\nMatMenuTrigger.ɵfac = /* @__PURE__ */function () {\n  let ɵMatMenuTrigger_BaseFactory;\n  return function MatMenuTrigger_Factory(t) {\n    return (ɵMatMenuTrigger_BaseFactory || (ɵMatMenuTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuTrigger)))(t || MatMenuTrigger);\n  };\n}();\nMatMenuTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatMenuTrigger,\n  selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n  hostAttrs: [1, \"mat-menu-trigger\"],\n  exportAs: [\"matMenuTrigger\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n      host: {\n        'class': 'mat-menu-trigger'\n      },\n      exportAs: 'matMenuTrigger'\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatMenuModule {}\nMatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n  return new (t || MatMenuModule)();\n};\nMatMenuModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatMenuModule\n});\nMatMenuModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule], CdkScrollableModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n      exports: [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n      declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };","map":{"version":3,"names":["i1","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceBooleanProperty","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","i0","InjectionToken","Directive","Inject","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Input","QueryList","EventEmitter","TemplateRef","ContentChildren","ViewChild","ContentChild","Output","Self","NgModule","Subject","Subscription","merge","of","asapScheduler","startWith","switchMap","take","takeUntil","filter","delay","trigger","state","style","transition","animate","TemplatePortal","DomPortalOutlet","i3","DOCUMENT","CommonModule","i2","mixinDisableRipple","mixinDisabled","MatCommonModule","MatRippleModule","i3$1","i1$1","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","CdkScrollableModule","_c0","MatMenuItem__svg_svg_2_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","_c1","MatMenu_ng_template_0_Template","_r2","ɵɵgetCurrentView","ɵɵlistener","MatMenu_ng_template_0_Template_div_keydown_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","_handleKeydown","MatMenu_ng_template_0_Template_div_click_0_listener","ctx_r3","closed","emit","MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener","ctx_r4","_onAnimationStart","MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener","ctx_r5","_onAnimationDone","ɵɵprojection","ctx_r0","ɵɵproperty","panelId","_classList","_panelAnimationState","ɵɵattribute","ariaLabel","ariaLabelledby","ariaDescribedby","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","MAT_MENU_CONTENT","_MatMenuContentBase","constructor","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","attach","context","_portal","detach","_outlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","markForCheck","next","isAttached","ngOnDestroy","dispose","ɵfac","_MatMenuContentBase_Factory","t","ɵɵdirectiveInject","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","ChangeDetectorRef","ɵdir","ɵɵdefineDirective","type","ngDevMode","ɵsetClassMetadata","undefined","decorators","args","MatMenuContent","ɵMatMenuContent_BaseFactory","MatMenuContent_Factory","ɵɵgetInheritedFactory","selectors","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","selector","providers","throwMatMenuMissingError","Error","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_PANEL","_MatMenuItemBase","MatMenuItem","_elementRef","_focusMonitor","_parentMenu","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","ngAfterViewInit","monitor","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","_hasFocus","activeElement","MatMenuItem_Factory","ElementRef","FocusMonitor","ɵcmp","ɵɵdefineComponent","hostAttrs","hostVars","hostBindings","MatMenuItem_HostBindings","MatMenuItem_click_HostBindingHandler","MatMenuItem_mouseenter_HostBindingHandler","toString","ɵɵclassProp","inputs","disableRipple","exportAs","attrs","ngContentSelectors","decls","vars","consts","template","MatMenuItem_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵadvance","directives","MatRipple","NgIf","encapsulation","changeDetection","host","OnPush","None","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","menuPanelUid","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","EMPTY","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","hasBackdrop","close","value","setPositionClasses","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","items","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","unsubscribe","itemChanges","_item","keyCode","parentMenu","direction","setFocusOrigin","onKeydown","focusFirstItem","onStable","menuPanel","first","closest","contains","document","setFirstItemActive","resetActiveItem","setElevation","depth","elevation","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","scrollTop","_allItems","reset","notifyOnChanges","_MatMenuBase_Factory","NgZone","contentQueries","_MatMenuBase_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","lazyContent","viewQuery","_MatMenuBase_Query","ɵɵviewQuery","templateRef","outputs","descendants","MatMenu","ngZone","defaultOptions","changeDetectorRef","MatMenu_Factory","MatMenu_HostBindings","MatMenu_Template","NgClass","styles","data","animation","animations","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","passive","_MatMenuTriggerBase","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","_parentMaterialMenu","addEventListener","triggersSubmenu","_deprecatedMatMenuTriggerFor","menu","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","_MatMenuTriggerBase_Factory","Directionality","_MatMenuTriggerBase_HostBindings","_MatMenuTriggerBase_click_HostBindingHandler","_MatMenuTriggerBase_mousedown_HostBindingHandler","_MatMenuTriggerBase_keydown_HostBindingHandler","MatMenuTrigger","ɵMatMenuTrigger_BaseFactory","MatMenuTrigger_Factory","MatMenuModule","MatMenuModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sources":["D:/MY FILES/CLIENT/Enterprise/Frontend-angular.v13/node_modules/@angular/material/fesm2020/menu.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        this._changeDetectorRef?.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n_MatMenuContentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuContentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuContentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent extends _MatMenuContentBase {\n}\nMatMenuContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        super();\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n}\nMatMenuItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenuItem.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-menu-item\": \"true\", \"class.mat-menu-item-highlighted\": \"_highlighted\", \"class.mat-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-focus-indicator\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        '[class.mat-menu-item]': 'true',\n                        '[class.mat-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.disabled]': 'disabled || null',\n                        'class': 'mat-focus-indicator',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions, changeDetectorRef) {\n        super(elementRef, ngZone, defaultOptions, changeDetectorRef);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 4;\n    }\n}\nMatMenu.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenu.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenu, selector: \"mat-menu\", host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::before{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::before{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\nclass _MatMenuTriggerBase {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(positionStrategy);\n        overlayConfig.hasBackdrop =\n            this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof _MatMenuBase) {\n            this.menu._startAnimation();\n            this.menu._directDescendantItems.changes.pipe(takeUntil(this.menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this.menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            let depth = 0;\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._setHighlighted(isOpen);\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: this.menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => this.menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    this.menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\n_MatMenuTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { attributes: { \"aria-haspopup\": \"true\" }, listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-expanded\": \"menuOpen || null\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        'aria-haspopup': 'true',\n                        '[attr.aria-expanded]': 'menuOpen || null',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }]; }, propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n}\nMatMenuTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent], imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule], exports: [CdkScrollableModule,\n        MatCommonModule,\n        MatMenu,\n        MatMenuItem,\n        MatMenuTrigger,\n        MatMenuContent] });\nMatMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule], CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuTrigger,\n                        MatMenuContent,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}