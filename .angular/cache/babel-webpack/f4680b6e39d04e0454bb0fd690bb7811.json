{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { _url } from 'src/global-variables';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MenuService = /*#__PURE__*/(() => {\n  class MenuService {\n    // Inject HttpClient into the constructor\n    constructor(http) {\n      this.http = http;\n    }\n    // Method to get the authentication token from localStorage or another method\n    getAuthToken() {\n      return localStorage.getItem('token') || ''; // Fetch the token from localStorage or other storage\n    }\n    // Method to create HTTP headers with the Bearer token\n    createHeaders() {\n      const token = this.getAuthToken();\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    }\n    // Method to create HTTP params with the desc_code\n    createParams() {\n      return new HttpParams().set('desc_code', 'top_navigation');\n    }\n    //taskwebsite\n    //blog\n    post_blog(menu) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}post_blog`, menu, {\n        headers\n      });\n    }\n    uploadImages(formData) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}upload_images`, formData, {\n        headers\n      });\n    }\n    get_images() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}get_images`, {\n        headers\n      });\n    }\n    get_blogByRole() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}websitemodule/get_blogByPublic`, {\n        headers\n      });\n    }\n    update_blog(transNo, data) {\n      const headers = this.createHeaders();\n      return this.http.put(`${_url}update_blog/${transNo}`, data, {\n        headers\n      });\n    }\n    delete_blog(transNo) {\n      const headers = this.createHeaders();\n      return this.http.delete(`${_url}delete_blog/${transNo}`, {\n        headers\n      });\n    }\n    //about\n    post(menu) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}post`, menu, {\n        headers\n      });\n    }\n    get() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}get`, {\n        headers\n      });\n    }\n    delete(transNo) {\n      const headers = this.createHeaders();\n      return this.http.delete(`${_url}delete/${transNo}`, {\n        headers\n      });\n    }\n    update_about(transNo, data) {\n      const headers = this.createHeaders();\n      return this.http.put(`${_url}update_about/${transNo}`, data, {\n        headers\n      });\n    }\n    //contact\n    post_contact(menu) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}post_contact`, menu, {\n        headers\n      });\n    }\n    get_contactByRole() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}get_contactByRole`, {\n        headers\n      });\n    }\n    update_contact(transNo, data) {\n      const headers = this.createHeaders();\n      return this.http.put(`${_url}update_contact/${transNo}`, data, {\n        headers\n      });\n    }\n    delete_contact(transNo) {\n      const headers = this.createHeaders();\n      return this.http.delete(`${_url}delete_contact/${transNo}`, {\n        headers\n      });\n    }\n    submitMenu(formData) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}module`, formData, {\n        headers\n      });\n    }\n    submitMenus(menu) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}module`, menu, {\n        headers\n      });\n    }\n    // Example of a GET request\n    getMenu() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}menu`, {\n        headers\n      });\n    }\n    postData(menu) {\n      const headers = this.createHeaders();\n      return this.http.post(`${_url}menu`, menu, {\n        headers\n      });\n    }\n    getAbout() {\n      return this.http.get(`${_url}websitemodule/getAbout`);\n    }\n    get_contact() {\n      return this.http.get(`${_url}websitemodule/get_contact`);\n    }\n    getWebsiteMenu() {\n      return this.http.get(`${_url}websitemodule/all`);\n    }\n    getWebsiteMenuByTask() {\n      const headers = this.createHeaders();\n      return this.http.get(`${_url}getAllModules`, {\n        headers\n      });\n    }\n    getWebsiteModule() {\n      return this.http.get(`${_url}websitemodule/allModules`);\n    }\n    postWebsiteMenu(menu) {\n      return this.http.post(`${_url}websitemodule/create`, menu);\n    }\n    deleteWebsiteMenu(transNo) {\n      return this.http.delete(`${_url}websitemodule/delete/${transNo}`);\n    }\n    editWebsiteMenu(transNo, menu) {\n      return this.http.put(`${_url}websitemodule/edit/${transNo}`, menu);\n    }\n    // Example of a PUT request\n    putData(id, body) {\n      const headers = this.createHeaders();\n      return this.http.put(`${_url}role/${id}`, body, {\n        headers\n      });\n    }\n    // Example of a DELETE request\n    deleteMenu(transNo) {\n      const headers = this.createHeaders();\n      return this.http.delete(`${_url}menu/delete/${transNo}`, {\n        headers\n      });\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error); // Log the error for debugging\n        // Optionally, you can use toastr to show the error message here:\n        // this.toastrService.error(error.message || 'An error occurred');\n        // Let the app keep running by returning a safe result.\n        return of(result);\n      };\n    }\n  }\n  MenuService.ɵfac = function MenuService_Factory(t) {\n    return new (t || MenuService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  MenuService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MenuService,\n    factory: MenuService.ɵfac,\n    providedIn: 'root'\n  });\n  return MenuService;\n})();","map":null,"metadata":{},"sourceType":"module"}