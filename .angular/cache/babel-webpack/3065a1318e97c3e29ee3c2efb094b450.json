{"ast":null,"code":"import { FormGroup, FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/Services/Global/notifications.service\";\nimport * as i3 from \"src/app/Services/Role/roles.service\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/divider\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nexport let RoleUIComponent = /*#__PURE__*/(() => {\n  class RoleUIComponent {\n    constructor(dialog, dialogRef, notificationService, roleService, data) {\n      this.dialog = dialog;\n      this.dialogRef = dialogRef;\n      this.notificationService = notificationService;\n      this.roleService = roleService;\n      this.data = data;\n      this.btnSave = \"Save\";\n      this.loading = false;\n      this.success = true;\n      this.roleForm = new FormGroup({\n        id: new FormControl(0),\n        rolecode: new FormControl(''),\n        description: new FormControl('')\n      });\n    }\n    ngOnInit() {\n      if (this.data) {\n        if (this.data.id) {\n          this.btnSave = \"Update\";\n          //this.roleForm.controls['empID'].disable();\n          this.GetItemFormData();\n        }\n      }\n    }\n    GetItemFormData() {\n      this.roleForm.controls['id'].setValue(this.data.id);\n      this.roleForm.controls['rolecode'].setValue(this.data.rolecode);\n      this.roleForm.controls['description'].setValue(this.data.description);\n    }\n    onClose() {\n      // Logic to close the dialog or any other close action\n      this.dialogRef.close(); // If using Angular Material Dialog\n    }\n    onSubmit() {\n      if (this.roleForm.valid) {\n        const role = this.roleForm.value;\n        this.loading = true;\n        if (this.btnSave === \"Save\") {\n          this.roleService.postData(role).subscribe({\n            next: res => {\n              if (res.success === true) {\n                this.notificationService.toastrSuccess(res.message);\n                this.ResetForm();\n                this.loading = false;\n              } else {\n                this.notificationService.toastrError(res.message);\n                this.loading = false;\n              }\n            },\n            error: error => {\n              this.success = false;\n              this.notificationService.toastrError(error.error);\n              this.loading = false;\n              // Set loading to false in case of error\n            }\n          });\n        } else if (this.btnSave === 'Update') {\n          this.roleService.putData(this.data.id, role).subscribe({\n            next: res => {\n              if (res.success === true) {\n                this.notificationService.toastrSuccess(res.message);\n                this.ResetForm();\n                this.loading = true;\n              } else {\n                this.notificationService.toastrWarning(res.message);\n                this.loading = false;\n              }\n            },\n            error: err => {\n              this.notificationService.toastrWarning(err.error);\n              this.loading = false; // Set loading to false in case of error\n            }\n          });\n        }\n      } else {\n        // Optionally handle form invalid scenario\n        this.notificationService.toastrError(\"Please fill in the required fields.\");\n      }\n    }\n    ResetForm() {\n      this.roleForm.reset();\n    }\n  }\n  RoleUIComponent.ɵfac = function RoleUIComponent_Factory(t) {\n    return new (t || RoleUIComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.NotificationsService), i0.ɵɵdirectiveInject(i3.RolesService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n  RoleUIComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RoleUIComponent,\n    selectors: [[\"app-role-ui\"]],\n    decls: 19,\n    vars: 5,\n    consts: [[\"mat-icon-button\", \"\", 1, \"close-button\", 3, \"mat-dialog-close\"], [\"color\", \"warn\", 1, \"close-icon\"], [\"mat-dialog-title\", \"\"], [3, \"formGroup\", \"ngSubmit\"], [\"mat-dialog-content\", \"\"], [\"appearance\", \"standard\", 1, \"full-width\"], [\"matInput\", \"\", \"placeholder\", \"Input Rolecode\", \"autocomplete\", \"off\", \"required\", \"\", \"formControlName\", \"rolecode\"], [\"matInput\", \"\", \"placeholder\", \"Input Updated By\", \"autocomplete\", \"off\", \"required\", \"\", \"formControlName\", \"description\"], [\"mat-dialog-actions\", \"\", \"align\", \"end\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\"]],\n    template: function RoleUIComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵelementStart(1, \"mat-icon\", 1);\n        i0.ɵɵtext(2, \"close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"h2\", 2);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"mat-divider\");\n        i0.ɵɵelementStart(6, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function RoleUIComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"mat-form-field\", 5);\n        i0.ɵɵelementStart(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Rolecode\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\", 5);\n        i0.ɵɵelementStart(13, \"mat-label\");\n        i0.ɵɵtext(14, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 8);\n        i0.ɵɵelementStart(17, \"button\", 9);\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"mat-dialog-close\", true);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", ctx.btnSave, \" Role\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.roleForm);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"disabled\", ctx.roleForm.invalid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.btnSave);\n      }\n    },\n    directives: [i4.MatButton, i1.MatDialogClose, i5.MatIcon, i1.MatDialogTitle, i6.MatDivider, i7.ɵNgNoValidate, i7.NgControlStatusGroup, i7.FormGroupDirective, i1.MatDialogContent, i8.MatFormField, i8.MatLabel, i9.MatInput, i7.DefaultValueAccessor, i7.RequiredValidator, i7.NgControlStatus, i7.FormControlName, i1.MatDialogActions],\n    styles: [\".form-actions[_ngcontent-%COMP%]{margin-top:0;text-align:right}.form-container[_ngcontent-%COMP%]{max-height:400px;width:300px;overflow:auto;padding:0;box-sizing:border-box;display:flex;flex-direction:column}mat-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:0}mat-form-field[_ngcontent-%COMP%]   .mat-label[_ngcontent-%COMP%]{font-weight:bold}mat-form-field[_ngcontent-%COMP%]   .mat-error[_ngcontent-%COMP%]{font-size:.875rem}.form-actions[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;grid-gap:8px;gap:8px}.button-container[_ngcontent-%COMP%]{display:flex;justify-content:flex-end}button[mat-raised-button][_ngcontent-%COMP%]{font-size:14x;border-radius:4px;width:25%}.close-button[_ngcontent-%COMP%]{position:absolute;top:18px;right:8px}@media (max-width: 600px){.form-container[_ngcontent-%COMP%]{padding:8px;box-sizing:border-box;overflow:auto}mat-form-field[_ngcontent-%COMP%]{margin-bottom:12px}.form-actions[_ngcontent-%COMP%]{flex-direction:column;align-items:flex-end}button[mat-raised-button][_ngcontent-%COMP%], button[mat-stroked-button][_ngcontent-%COMP%]{width:100%;margin-top:1px}.close-button[_ngcontent-%COMP%]{position:absolute;top:18px;right:8px}}\"]\n  });\n  return RoleUIComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}