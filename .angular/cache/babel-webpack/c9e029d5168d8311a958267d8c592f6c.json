{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n  constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone,\n  // TODO: Remove this once the legacy appearance has been removed. We only need\n  // to inject the form-field for determining whether the placeholder has been promoted.\n  _formField) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._autofillMonitor = _autofillMonitor;\n    this._formField = _formField;\n    this._uid = `mat-input-${nextUniqueId++}`;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.autofilled = false;\n    this._disabled = false;\n    this._type = 'text';\n    this._readonly = false;\n    this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n    this._iOSKeyupListener = event => {\n      const el = event.target;\n      // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n      // indicate different things. If the value is 0, it means that the caret is at the start\n      // of the input, whereas a value of `null` means that the input doesn't support\n      // manipulating the selection range. Inputs that don't support setting the selection range\n      // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n      // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n      if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n        // `1, 1` fixes it for the first time that you type text and\n        // then hold delete. Toggling to `1, 1` and then back to\n        // `0, 0` seems to completely fix it.\n        el.setSelectionRange(1, 1);\n        el.setSelectionRange(0, 0);\n      }\n    };\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase();\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n    this._previousNativeValue = this.value;\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n      });\n    }\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n    this._isInFormField = !!_formField;\n    if (this._isNativeSelect) {\n      this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Input type of the element. */\n  get type() {\n    return this._type;\n  }\n  set type(value) {\n    this._type = value || 'text';\n    this._validateType();\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get value() {\n    return this._inputValueAccessor.value;\n  }\n  set value(value) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n  /** Whether the element is readonly. */\n  get readonly() {\n    return this._readonly;\n  }\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n    if (this._platform.IOS) {\n      this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n    }\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n    // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n    // present or not depends on a query which is prone to \"changed after checked\" errors.\n    this._dirtyCheckPlaceholder();\n  }\n  /** Focuses the input. */\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n  /** Does some manual dirty checking on the native input `placeholder` attribute. */\n  _dirtyCheckPlaceholder() {\n    // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n    // screen readers will read it out twice: once from the label and once from the attribute.\n    // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n    // the only one that supports promoting the placeholder to a label.\n    const placeholder = this._formField?._hideControlPlaceholder?.() ? null : this.placeholder;\n    if (placeholder !== this._previousPlaceholder) {\n      const element = this._elementRef.nativeElement;\n      this._previousPlaceholder = placeholder;\n      placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n    }\n  }\n  /** Does some manual dirty checking on the native input `value` property. */\n  _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n  /** Make sure the input is a supported type. */\n  _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n  /** Checks whether the input type is one of the types that are never empty. */\n  _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n  /** Checks whether the input is invalid based on the native validation. */\n  _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = this._elementRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty() {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement;\n      const firstOption = selectElement.options[0];\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n  /** Whether the form control is a native select that is displayed inline. */\n  _isInlineSelect() {\n    const element = this._elementRef.nativeElement;\n    return this._isNativeSelect && (element.multiple || element.size > 1);\n  }\n}\nMatInput.ɵfac = function MatInput_Factory(t) {\n  return new (t || MatInput)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher), i0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(i4.AutofillMonitor), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n};\nMatInput.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatInput,\n  selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n  hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n  hostVars: 12,\n  hostBindings: function MatInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n        return ctx._focusChanged(true);\n      })(\"blur\", function MatInput_blur_HostBindingHandler() {\n        return ctx._focusChanged(false);\n      })(\"input\", function MatInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      i0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"name\", ctx.name || null)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n      i0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-native-select-inline\", ctx._isInlineSelect());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    id: \"id\",\n    placeholder: \"placeholder\",\n    name: \"name\",\n    required: \"required\",\n    type: \"type\",\n    errorStateMatcher: \"errorStateMatcher\",\n    userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n    value: \"value\",\n    readonly: \"readonly\"\n  },\n  exportAs: [\"matInput\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatInput\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n      exportAs: 'matInput',\n      host: {\n        /**\n         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n         */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        // At the time of writing, we have a lot of customer tests that look up the input based on its\n        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n        '[attr.data-placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.name]': 'name || null',\n        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n        '[class.mat-native-select-inline]': '_isInlineSelect()',\n        // Only mark the input as invalid for assistive technology if it has a value since the\n        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n        '[attr.aria-required]': 'required',\n        '(focus)': '_focusChanged(true)',\n        '(blur)': '_focusChanged(false)',\n        '(input)': '_onInput()'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [MAT_INPUT_VALUE_ACCESSOR]\n      }]\n    }, {\n      type: i4.AutofillMonitor\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i5.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {}\nMatInputModule.ɵfac = function MatInputModule_Factory(t) {\n  return new (t || MatInputModule)();\n};\nMatInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatInputModule\n});\nMatInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher],\n  imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule,\n  // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n  // be used together with `MatFormField`.\n  MatFormFieldModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatInput],\n      imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n      exports: [TextFieldModule,\n      // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };","map":{"version":3,"names":["coerceBooleanProperty","i1","getSupportedInputTypes","i4","TextFieldModule","i0","InjectionToken","Directive","Optional","Self","Inject","Input","NgModule","i2","Validators","i3","mixinErrorState","MatCommonModule","ErrorStateMatcher","i5","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","Subject","getMatInputUnsupportedTypeError","type","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_type","_readonly","_neverEmptyInputTypes","filter","t","has","_iOSKeyupListener","event","el","target","value","selectionStart","selectionEnd","setSelectionRange","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","_isServer","isBrowser","_isNativeSelect","_isTextarea","_isInFormField","multiple","disabled","next","_id","required","_required","control","hasValidator","_validateType","readonly","ngAfterViewInit","monitor","subscribe","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","removeEventListener","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","placeholder","_hideControlPlaceholder","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","ngDevMode","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","_isInlineSelect","size","ɵfac","MatInput_Factory","ɵɵdirectiveInject","ElementRef","Platform","NgControl","NgForm","FormGroupDirective","AutofillMonitor","NgZone","ɵdir","ɵɵdefineDirective","selectors","hostAttrs","hostVars","hostBindings","MatInput_HostBindings","rf","ctx","ɵɵlistener","MatInput_focus_HostBindingHandler","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","name","errorState","ɵɵclassProp","inputs","errorStateMatcher","userAriaDescribedBy","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ɵsetClassMetadata","args","selector","host","providers","decorators","undefined","MatFormField","MatInputModule","MatInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["D:/MY FILES/Projects/angular-13/node_modules/@angular/material/fesm2020/input.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = this._formField?._hideControlPlaceholder?.() ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n}\nMatInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"attr.id\": \"id\", \"attr.data-placeholder\": \"placeholder\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"class.mat-native-select-inline\": \"_isInlineSelect()\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\" }, classAttribute: \"mat-input-element mat-form-field-autofill-control\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        // At the time of writing, we have a lot of customer tests that look up the input based on its\n                        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                        '[attr.data-placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        '[class.mat-native-select-inline]': '_isInlineSelect()',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [MAT_INPUT_VALUE_ACCESSOR]\n                }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [TextFieldModule, MatFormFieldModule, MatCommonModule], exports: [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput] });\nMatInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, providers: [ErrorStateMatcher], imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatInput],\n                    imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                        // be used together with `MatFormField`.\n                        MatFormFieldModule,\n                        MatInput,\n                    ],\n                    providers: [ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}